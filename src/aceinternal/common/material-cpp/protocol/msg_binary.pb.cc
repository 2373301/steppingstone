// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/msg_binary.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocol/msg_binary.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocol {

namespace {

const ::google::protobuf::Descriptor* msg_binary_file_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_binary_file_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_binary_record_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_binary_record_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_protocol_2fmsg_5fbinary_2eproto() {
  protobuf_AddDesc_protocol_2fmsg_5fbinary_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protocol/msg_binary.proto");
  GOOGLE_CHECK(file != NULL);
  msg_binary_file_descriptor_ = file->message_type(0);
  static const int msg_binary_file_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_binary_file, cache_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_binary_file, binary_file_),
  };
  msg_binary_file_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_binary_file_descriptor_,
      msg_binary_file::default_instance_,
      msg_binary_file_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_binary_file, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_binary_file, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_binary_file));
  msg_binary_record_descriptor_ = file->message_type(1);
  static const int msg_binary_record_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_binary_record, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_binary_record, last_modify_time_),
  };
  msg_binary_record_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_binary_record_descriptor_,
      msg_binary_record::default_instance_,
      msg_binary_record_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_binary_record, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_binary_record, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_binary_record));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protocol_2fmsg_5fbinary_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_binary_file_descriptor_, &msg_binary_file::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_binary_record_descriptor_, &msg_binary_record::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protocol_2fmsg_5fbinary_2eproto() {
  delete msg_binary_file::default_instance_;
  delete msg_binary_file_reflection_;
  delete msg_binary_record::default_instance_;
  delete msg_binary_record_reflection_;
}

void protobuf_AddDesc_protocol_2fmsg_5fbinary_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031protocol/msg_binary.proto\022\010protocol\":\n"
    "\017msg_binary_file\022\022\n\ncache_addr\030\001 \002(\014\022\023\n\013"
    "binary_file\030\002 \002(\014\";\n\021msg_binary_record\022\014"
    "\n\004guid\030\001 \002(\004\022\030\n\020last_modify_time\030\002 \002(\004", 158);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol/msg_binary.proto", &protobuf_RegisterTypes);
  msg_binary_file::default_instance_ = new msg_binary_file();
  msg_binary_record::default_instance_ = new msg_binary_record();
  msg_binary_file::default_instance_->InitAsDefaultInstance();
  msg_binary_record::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protocol_2fmsg_5fbinary_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protocol_2fmsg_5fbinary_2eproto {
  StaticDescriptorInitializer_protocol_2fmsg_5fbinary_2eproto() {
    protobuf_AddDesc_protocol_2fmsg_5fbinary_2eproto();
  }
} static_descriptor_initializer_protocol_2fmsg_5fbinary_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int msg_binary_file::kCacheAddrFieldNumber;
const int msg_binary_file::kBinaryFileFieldNumber;
#endif  // !_MSC_VER

msg_binary_file::msg_binary_file()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.msg_binary_file)
}

void msg_binary_file::InitAsDefaultInstance() {
}

msg_binary_file::msg_binary_file(const msg_binary_file& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.msg_binary_file)
}

void msg_binary_file::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cache_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  binary_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_binary_file::~msg_binary_file() {
  // @@protoc_insertion_point(destructor:protocol.msg_binary_file)
  SharedDtor();
}

void msg_binary_file::SharedDtor() {
  if (cache_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cache_addr_;
  }
  if (binary_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete binary_file_;
  }
  if (this != default_instance_) {
  }
}

void msg_binary_file::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_binary_file::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_binary_file_descriptor_;
}

const msg_binary_file& msg_binary_file::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fmsg_5fbinary_2eproto();
  return *default_instance_;
}

msg_binary_file* msg_binary_file::default_instance_ = NULL;

msg_binary_file* msg_binary_file::New() const {
  return new msg_binary_file;
}

void msg_binary_file::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_cache_addr()) {
      if (cache_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cache_addr_->clear();
      }
    }
    if (has_binary_file()) {
      if (binary_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        binary_file_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_binary_file::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.msg_binary_file)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes cache_addr = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cache_addr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_binary_file;
        break;
      }

      // required bytes binary_file = 2;
      case 2: {
        if (tag == 18) {
         parse_binary_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_binary_file()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.msg_binary_file)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.msg_binary_file)
  return false;
#undef DO_
}

void msg_binary_file::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.msg_binary_file)
  // required bytes cache_addr = 1;
  if (has_cache_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->cache_addr(), output);
  }

  // required bytes binary_file = 2;
  if (has_binary_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->binary_file(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.msg_binary_file)
}

::google::protobuf::uint8* msg_binary_file::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.msg_binary_file)
  // required bytes cache_addr = 1;
  if (has_cache_addr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->cache_addr(), target);
  }

  // required bytes binary_file = 2;
  if (has_binary_file()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->binary_file(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.msg_binary_file)
  return target;
}

int msg_binary_file::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes cache_addr = 1;
    if (has_cache_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cache_addr());
    }

    // required bytes binary_file = 2;
    if (has_binary_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->binary_file());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_binary_file::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_binary_file* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_binary_file*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_binary_file::MergeFrom(const msg_binary_file& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cache_addr()) {
      set_cache_addr(from.cache_addr());
    }
    if (from.has_binary_file()) {
      set_binary_file(from.binary_file());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_binary_file::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_binary_file::CopyFrom(const msg_binary_file& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_binary_file::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void msg_binary_file::Swap(msg_binary_file* other) {
  if (other != this) {
    std::swap(cache_addr_, other->cache_addr_);
    std::swap(binary_file_, other->binary_file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_binary_file::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_binary_file_descriptor_;
  metadata.reflection = msg_binary_file_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_binary_record::kGuidFieldNumber;
const int msg_binary_record::kLastModifyTimeFieldNumber;
#endif  // !_MSC_VER

msg_binary_record::msg_binary_record()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.msg_binary_record)
}

void msg_binary_record::InitAsDefaultInstance() {
}

msg_binary_record::msg_binary_record(const msg_binary_record& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.msg_binary_record)
}

void msg_binary_record::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  last_modify_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_binary_record::~msg_binary_record() {
  // @@protoc_insertion_point(destructor:protocol.msg_binary_record)
  SharedDtor();
}

void msg_binary_record::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_binary_record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_binary_record::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_binary_record_descriptor_;
}

const msg_binary_record& msg_binary_record::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fmsg_5fbinary_2eproto();
  return *default_instance_;
}

msg_binary_record* msg_binary_record::default_instance_ = NULL;

msg_binary_record* msg_binary_record::New() const {
  return new msg_binary_record;
}

void msg_binary_record::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<msg_binary_record*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(guid_, last_modify_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_binary_record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.msg_binary_record)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_last_modify_time;
        break;
      }

      // required uint64 last_modify_time = 2;
      case 2: {
        if (tag == 16) {
         parse_last_modify_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_modify_time_)));
          set_has_last_modify_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.msg_binary_record)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.msg_binary_record)
  return false;
#undef DO_
}

void msg_binary_record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.msg_binary_record)
  // required uint64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // required uint64 last_modify_time = 2;
  if (has_last_modify_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->last_modify_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.msg_binary_record)
}

::google::protobuf::uint8* msg_binary_record::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.msg_binary_record)
  // required uint64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // required uint64 last_modify_time = 2;
  if (has_last_modify_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->last_modify_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.msg_binary_record)
  return target;
}

int msg_binary_record::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // required uint64 last_modify_time = 2;
    if (has_last_modify_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_modify_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_binary_record::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_binary_record* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_binary_record*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_binary_record::MergeFrom(const msg_binary_record& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_last_modify_time()) {
      set_last_modify_time(from.last_modify_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_binary_record::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_binary_record::CopyFrom(const msg_binary_record& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_binary_record::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void msg_binary_record::Swap(msg_binary_record* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(last_modify_time_, other->last_modify_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_binary_record::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_binary_record_descriptor_;
  metadata.reflection = msg_binary_record_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)
