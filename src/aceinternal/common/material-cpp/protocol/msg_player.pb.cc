// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_player.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg_player.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace typed {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* cmsg_check_player_name_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cmsg_check_player_name_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_check_player_name_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_check_player_name_reflection_ = NULL;
const ::google::protobuf::Descriptor* cmsg_player_make_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cmsg_player_make_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_player_make_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_player_make_reflection_ = NULL;
const ::google::protobuf::Descriptor* cmsg_request_random_name_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cmsg_request_random_name_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_request_random_name_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_request_random_name_reflection_ = NULL;
const ::google::protobuf::Descriptor* cmsg_request_player_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cmsg_request_player_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_request_one_player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_request_one_player_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_request_player_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_request_player_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* cmsg_player_delete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cmsg_player_delete_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_player_delete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_player_delete_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_create_other_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_create_other_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_player_remove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_player_remove_reflection_ = NULL;
const ::google::protobuf::Descriptor* cmsg_validate_account_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cmsg_validate_account_reflection_ = NULL;
const ::google::protobuf::Descriptor* cmsg_player_enter_map_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cmsg_player_enter_map_reflection_ = NULL;
const ::google::protobuf::Descriptor* cmsg_player_leave_map_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cmsg_player_leave_map_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_create_self_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_create_self_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_create_role_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_create_role_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_update_flower_rank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_update_flower_rank_reflection_ = NULL;
const ::google::protobuf::Descriptor* cmsg_lookup_player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cmsg_lookup_player_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_lookup_player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_lookup_player_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_create_item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_create_item_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_role_remove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_role_remove_reflection_ = NULL;
const ::google::protobuf::Descriptor* cmsg_player_move_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cmsg_player_move_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_player_move_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_player_move_reflection_ = NULL;
const ::google::protobuf::Descriptor* cmsg_player_jump_map_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cmsg_player_jump_map_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_player_jump_map_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_player_jump_map_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_player_upgrade_level_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_player_upgrade_level_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_role_upgrade_level_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_role_upgrade_level_reflection_ = NULL;
const ::google::protobuf::Descriptor* cmsg_loopback_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cmsg_loopback_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_money_update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_money_update_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_update_role_attr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_update_role_attr_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_update_energy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_update_energy_reflection_ = NULL;
const ::google::protobuf::Descriptor* cmsg_request_role_attr_rank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cmsg_request_role_attr_rank_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_request_role_attr_rank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_request_role_attr_rank_reflection_ = NULL;
const ::google::protobuf::Descriptor* cmsg_request_role_attr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cmsg_request_role_attr_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_request_role_attr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_request_role_attr_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_update_prestige_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_update_prestige_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_update_reverence_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_update_reverence_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_unlock_function_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_unlock_function_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_update_unlock_function_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_update_unlock_function_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_update_char_ability_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_update_char_ability_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_get_server_time_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_get_server_time_reflection_ = NULL;
const ::google::protobuf::Descriptor* cmsg_special_action_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cmsg_special_action_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_special_action_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_special_action_reflection_ = NULL;
const ::google::protobuf::Descriptor* cmsg_special_action_person_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cmsg_special_action_person_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_special_action_person_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_special_action_person_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_update_plentiful_energy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_update_plentiful_energy_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_update_module_free_time_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_update_module_free_time_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_update_module_free_time_ModuleFreeTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_update_module_free_time_ModuleFreeTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* cmsg_set_follow_role_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cmsg_set_follow_role_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_set_follow_role_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_set_follow_role_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_update_follow_role_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_update_follow_role_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_update_current_title_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_update_current_title_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_update_special_right_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_update_special_right_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_wife_update_follow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_wife_update_follow_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_update_doubleexp_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_update_doubleexp_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_lookup_guild_name_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_lookup_guild_name_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_lookup_dodge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_lookup_dodge_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_hire_zslw_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_hire_zslw_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_server_open_time_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_server_open_time_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_client_config_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_client_config_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_update_yellow_vip_level_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_update_yellow_vip_level_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_5fplayer_2eproto() {
  protobuf_AddDesc_msg_5fplayer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg_player.proto");
  GOOGLE_CHECK(file != NULL);
  cmsg_check_player_name_descriptor_ = file->message_type(0);
  static const int cmsg_check_player_name_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_check_player_name, name_),
  };
  cmsg_check_player_name_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cmsg_check_player_name_descriptor_,
      cmsg_check_player_name::default_instance_,
      cmsg_check_player_name_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_check_player_name, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_check_player_name, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cmsg_check_player_name));
  smsg_check_player_name_descriptor_ = file->message_type(1);
  static const int smsg_check_player_name_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_check_player_name, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_check_player_name, check_result_),
  };
  smsg_check_player_name_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_check_player_name_descriptor_,
      smsg_check_player_name::default_instance_,
      smsg_check_player_name_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_check_player_name, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_check_player_name, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_check_player_name));
  cmsg_player_make_descriptor_ = file->message_type(2);
  static const int cmsg_player_make_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_player_make, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_player_make, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_player_make, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_player_make, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_player_make, gm_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_player_make, validatestr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_player_make, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_player_make, param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_player_make, param3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_player_make, param4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_player_make, param5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_player_make, invkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_player_make, itime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_player_make, iopenid_),
  };
  cmsg_player_make_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cmsg_player_make_descriptor_,
      cmsg_player_make::default_instance_,
      cmsg_player_make_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_player_make, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_player_make, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cmsg_player_make));
  smsg_player_make_descriptor_ = file->message_type(3);
  static const int smsg_player_make_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_player_make, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_player_make, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_player_make, line_id_),
  };
  smsg_player_make_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_player_make_descriptor_,
      smsg_player_make::default_instance_,
      smsg_player_make_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_player_make, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_player_make, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_player_make));
  cmsg_request_random_name_descriptor_ = file->message_type(4);
  static const int cmsg_request_random_name_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_request_random_name, sex_),
  };
  cmsg_request_random_name_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cmsg_request_random_name_descriptor_,
      cmsg_request_random_name::default_instance_,
      cmsg_request_random_name_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_request_random_name, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_request_random_name, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cmsg_request_random_name));
  smsg_request_random_name_descriptor_ = file->message_type(5);
  static const int smsg_request_random_name_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_request_random_name, random_name_),
  };
  smsg_request_random_name_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_request_random_name_descriptor_,
      smsg_request_random_name::default_instance_,
      smsg_request_random_name_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_request_random_name, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_request_random_name, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_request_random_name));
  cmsg_request_player_list_descriptor_ = file->message_type(6);
  static const int cmsg_request_player_list_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_request_player_list, account_id_),
  };
  cmsg_request_player_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cmsg_request_player_list_descriptor_,
      cmsg_request_player_list::default_instance_,
      cmsg_request_player_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_request_player_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_request_player_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cmsg_request_player_list));
  smsg_request_one_player_descriptor_ = file->message_type(7);
  static const int smsg_request_one_player_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_request_one_player, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_request_one_player, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_request_one_player, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_request_one_player, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_request_one_player, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_request_one_player, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_request_one_player, line_id_),
  };
  smsg_request_one_player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_request_one_player_descriptor_,
      smsg_request_one_player::default_instance_,
      smsg_request_one_player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_request_one_player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_request_one_player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_request_one_player));
  smsg_request_player_list_descriptor_ = file->message_type(8);
  static const int smsg_request_player_list_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_request_player_list, player_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_request_player_list, player_list_),
  };
  smsg_request_player_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_request_player_list_descriptor_,
      smsg_request_player_list::default_instance_,
      smsg_request_player_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_request_player_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_request_player_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_request_player_list));
  cmsg_player_delete_descriptor_ = file->message_type(9);
  static const int cmsg_player_delete_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_player_delete, guid_),
  };
  cmsg_player_delete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cmsg_player_delete_descriptor_,
      cmsg_player_delete::default_instance_,
      cmsg_player_delete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_player_delete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_player_delete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cmsg_player_delete));
  smsg_player_delete_descriptor_ = file->message_type(10);
  static const int smsg_player_delete_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_player_delete, guid_),
  };
  smsg_player_delete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_player_delete_descriptor_,
      smsg_player_delete::default_instance_,
      smsg_player_delete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_player_delete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_player_delete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_player_delete));
  smsg_create_other_descriptor_ = file->message_type(11);
  static const int smsg_create_other_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_other, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_other, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_other, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_other, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_other, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_other, src_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_other, src_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_other, dst_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_other, dst_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_other, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_other, first_role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_other, flower_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_other, guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_other, guild_icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_other, follow_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_other, current_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_other, special_right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_other, horse_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_other, wife_follow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_other, yellow_vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_other, is_yellow_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_other, is_yellow_year_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_other, is_yellow_high_vip_),
  };
  smsg_create_other_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_create_other_descriptor_,
      smsg_create_other::default_instance_,
      smsg_create_other_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_other, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_other, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_create_other));
  smsg_player_remove_descriptor_ = file->message_type(12);
  static const int smsg_player_remove_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_player_remove, guid_),
  };
  smsg_player_remove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_player_remove_descriptor_,
      smsg_player_remove::default_instance_,
      smsg_player_remove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_player_remove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_player_remove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_player_remove));
  cmsg_validate_account_descriptor_ = file->message_type(13);
  static const int cmsg_validate_account_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_validate_account, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_validate_account, session_id_),
  };
  cmsg_validate_account_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cmsg_validate_account_descriptor_,
      cmsg_validate_account::default_instance_,
      cmsg_validate_account_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_validate_account, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_validate_account, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cmsg_validate_account));
  cmsg_player_enter_map_descriptor_ = file->message_type(14);
  static const int cmsg_player_enter_map_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_player_enter_map, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_player_enter_map, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_player_enter_map, line_id_),
  };
  cmsg_player_enter_map_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cmsg_player_enter_map_descriptor_,
      cmsg_player_enter_map::default_instance_,
      cmsg_player_enter_map_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_player_enter_map, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_player_enter_map, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cmsg_player_enter_map));
  cmsg_player_leave_map_descriptor_ = file->message_type(15);
  static const int cmsg_player_leave_map_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_player_leave_map, leave_type_),
  };
  cmsg_player_leave_map_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cmsg_player_leave_map_descriptor_,
      cmsg_player_leave_map::default_instance_,
      cmsg_player_leave_map_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_player_leave_map, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_player_leave_map, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cmsg_player_leave_map));
  smsg_create_self_descriptor_ = file->message_type(16);
  static const int smsg_create_self_offsets_[40] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_self, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_self, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_self, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_self, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_self, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_self, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_self, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_self, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_self, src_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_self, src_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_self, dst_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_self, dst_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_self, seniority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_self, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_self, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_self, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_self, prestige_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_self, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_self, guild_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_self, guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_self, member_slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_self, attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_self, roles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_self, bag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_self, storehouse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_self, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_self, is_addiction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_self, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_self, vip_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_self, reverence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_self, guild_icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_self, follow_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_self, current_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_self, special_right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_self, horse_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_self, wife_follow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_self, yellow_vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_self, is_yellow_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_self, is_yellow_year_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_self, is_yellow_high_vip_),
  };
  smsg_create_self_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_create_self_descriptor_,
      smsg_create_self::default_instance_,
      smsg_create_self_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_self, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_self, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_create_self));
  smsg_create_role_descriptor_ = file->message_type(17);
  static const int smsg_create_role_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_role, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_role, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_role, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_role, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_role, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_role, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_role, faction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_role, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_role, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_role, postion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_role, normal_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_role, extremely_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_role, char_ability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_role, hire_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_role, attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_role, inherit_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_role, inherit_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_role, attrs_rank_),
  };
  smsg_create_role_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_create_role_descriptor_,
      smsg_create_role::default_instance_,
      smsg_create_role_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_role, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_role, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_create_role));
  smsg_update_flower_rank_descriptor_ = file->message_type(18);
  static const int smsg_update_flower_rank_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_flower_rank, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_flower_rank, flower_rank_),
  };
  smsg_update_flower_rank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_update_flower_rank_descriptor_,
      smsg_update_flower_rank::default_instance_,
      smsg_update_flower_rank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_flower_rank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_flower_rank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_update_flower_rank));
  cmsg_lookup_player_descriptor_ = file->message_type(19);
  static const int cmsg_lookup_player_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_lookup_player, guid_),
  };
  cmsg_lookup_player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cmsg_lookup_player_descriptor_,
      cmsg_lookup_player::default_instance_,
      cmsg_lookup_player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_lookup_player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_lookup_player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cmsg_lookup_player));
  smsg_lookup_player_descriptor_ = file->message_type(20);
  static const int smsg_lookup_player_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_lookup_player, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_lookup_player, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_lookup_player, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_lookup_player, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_lookup_player, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_lookup_player, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_lookup_player, prestige_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_lookup_player, attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_lookup_player, roles_),
  };
  smsg_lookup_player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_lookup_player_descriptor_,
      smsg_lookup_player::default_instance_,
      smsg_lookup_player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_lookup_player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_lookup_player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_lookup_player));
  smsg_create_item_descriptor_ = file->message_type(21);
  static const int smsg_create_item_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_item, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_item, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_item, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_item, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_item, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_item, strength_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_item, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_item, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_item, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_item, attribute_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_item, attribute_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_item, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_item, wife_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_item, gems_),
  };
  smsg_create_item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_create_item_descriptor_,
      smsg_create_item::default_instance_,
      smsg_create_item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_create_item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_create_item));
  smsg_role_remove_descriptor_ = file->message_type(22);
  static const int smsg_role_remove_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_role_remove, player_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_role_remove, role_guid_),
  };
  smsg_role_remove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_role_remove_descriptor_,
      smsg_role_remove::default_instance_,
      smsg_role_remove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_role_remove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_role_remove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_role_remove));
  cmsg_player_move_descriptor_ = file->message_type(23);
  static const int cmsg_player_move_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_player_move, src_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_player_move, src_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_player_move, dst_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_player_move, dst_y_),
  };
  cmsg_player_move_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cmsg_player_move_descriptor_,
      cmsg_player_move::default_instance_,
      cmsg_player_move_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_player_move, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_player_move, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cmsg_player_move));
  smsg_player_move_descriptor_ = file->message_type(24);
  static const int smsg_player_move_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_player_move, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_player_move, src_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_player_move, src_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_player_move, dst_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_player_move, dst_y_),
  };
  smsg_player_move_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_player_move_descriptor_,
      smsg_player_move::default_instance_,
      smsg_player_move_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_player_move, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_player_move, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_player_move));
  cmsg_player_jump_map_descriptor_ = file->message_type(25);
  static const int cmsg_player_jump_map_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_player_jump_map, target_map_id_),
  };
  cmsg_player_jump_map_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cmsg_player_jump_map_descriptor_,
      cmsg_player_jump_map::default_instance_,
      cmsg_player_jump_map_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_player_jump_map, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_player_jump_map, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cmsg_player_jump_map));
  smsg_player_jump_map_descriptor_ = file->message_type(26);
  static const int smsg_player_jump_map_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_player_jump_map, target_map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_player_jump_map, src_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_player_jump_map, src_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_player_jump_map, line_no_),
  };
  smsg_player_jump_map_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_player_jump_map_descriptor_,
      smsg_player_jump_map::default_instance_,
      smsg_player_jump_map_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_player_jump_map, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_player_jump_map, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_player_jump_map));
  smsg_player_upgrade_level_descriptor_ = file->message_type(27);
  static const int smsg_player_upgrade_level_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_player_upgrade_level, upgrade_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_player_upgrade_level, upgrade_exp_),
  };
  smsg_player_upgrade_level_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_player_upgrade_level_descriptor_,
      smsg_player_upgrade_level::default_instance_,
      smsg_player_upgrade_level_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_player_upgrade_level, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_player_upgrade_level, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_player_upgrade_level));
  smsg_role_upgrade_level_descriptor_ = file->message_type(28);
  static const int smsg_role_upgrade_level_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_role_upgrade_level, role_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_role_upgrade_level, upgrade_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_role_upgrade_level, upgrade_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_role_upgrade_level, upgrade_hp_),
  };
  smsg_role_upgrade_level_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_role_upgrade_level_descriptor_,
      smsg_role_upgrade_level::default_instance_,
      smsg_role_upgrade_level_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_role_upgrade_level, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_role_upgrade_level, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_role_upgrade_level));
  cmsg_loopback_descriptor_ = file->message_type(29);
  static const int cmsg_loopback_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_loopback, sendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_loopback, logic_run_elapse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_loopback, gs_run_elapse_),
  };
  cmsg_loopback_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cmsg_loopback_descriptor_,
      cmsg_loopback::default_instance_,
      cmsg_loopback_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_loopback, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_loopback, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cmsg_loopback));
  smsg_money_update_descriptor_ = file->message_type(30);
  static const int smsg_money_update_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_money_update, curr_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_money_update, curr_coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_money_update, curr_seniority_),
  };
  smsg_money_update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_money_update_descriptor_,
      smsg_money_update::default_instance_,
      smsg_money_update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_money_update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_money_update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_money_update));
  smsg_update_role_attr_descriptor_ = file->message_type(31);
  static const int smsg_update_role_attr_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_role_attr, role_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_role_attr, attr_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_role_attr, attr_value_),
  };
  smsg_update_role_attr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_update_role_attr_descriptor_,
      smsg_update_role_attr::default_instance_,
      smsg_update_role_attr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_role_attr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_role_attr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_update_role_attr));
  smsg_update_energy_descriptor_ = file->message_type(32);
  static const int smsg_update_energy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_energy, curr_energy_),
  };
  smsg_update_energy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_update_energy_descriptor_,
      smsg_update_energy::default_instance_,
      smsg_update_energy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_energy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_energy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_update_energy));
  cmsg_request_role_attr_rank_descriptor_ = file->message_type(33);
  static const int cmsg_request_role_attr_rank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_request_role_attr_rank, role_guid_),
  };
  cmsg_request_role_attr_rank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cmsg_request_role_attr_rank_descriptor_,
      cmsg_request_role_attr_rank::default_instance_,
      cmsg_request_role_attr_rank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_request_role_attr_rank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_request_role_attr_rank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cmsg_request_role_attr_rank));
  smsg_request_role_attr_rank_descriptor_ = file->message_type(34);
  static const int smsg_request_role_attr_rank_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_request_role_attr_rank, role_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_request_role_attr_rank, role_attr_),
  };
  smsg_request_role_attr_rank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_request_role_attr_rank_descriptor_,
      smsg_request_role_attr_rank::default_instance_,
      smsg_request_role_attr_rank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_request_role_attr_rank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_request_role_attr_rank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_request_role_attr_rank));
  cmsg_request_role_attr_descriptor_ = file->message_type(35);
  static const int cmsg_request_role_attr_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_request_role_attr, role_guid_),
  };
  cmsg_request_role_attr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cmsg_request_role_attr_descriptor_,
      cmsg_request_role_attr::default_instance_,
      cmsg_request_role_attr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_request_role_attr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_request_role_attr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cmsg_request_role_attr));
  smsg_request_role_attr_descriptor_ = file->message_type(36);
  static const int smsg_request_role_attr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_request_role_attr, role_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_request_role_attr, role_attr_),
  };
  smsg_request_role_attr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_request_role_attr_descriptor_,
      smsg_request_role_attr::default_instance_,
      smsg_request_role_attr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_request_role_attr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_request_role_attr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_request_role_attr));
  smsg_update_prestige_descriptor_ = file->message_type(37);
  static const int smsg_update_prestige_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_prestige, prestige_value_),
  };
  smsg_update_prestige_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_update_prestige_descriptor_,
      smsg_update_prestige::default_instance_,
      smsg_update_prestige_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_prestige, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_prestige, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_update_prestige));
  smsg_update_reverence_descriptor_ = file->message_type(38);
  static const int smsg_update_reverence_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_reverence, reverence_value_),
  };
  smsg_update_reverence_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_update_reverence_descriptor_,
      smsg_update_reverence::default_instance_,
      smsg_update_reverence_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_reverence, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_reverence, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_update_reverence));
  smsg_unlock_function_descriptor_ = file->message_type(39);
  static const int smsg_unlock_function_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_unlock_function, function_id_),
  };
  smsg_unlock_function_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_unlock_function_descriptor_,
      smsg_unlock_function::default_instance_,
      smsg_unlock_function_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_unlock_function, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_unlock_function, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_unlock_function));
  smsg_update_unlock_function_descriptor_ = file->message_type(40);
  static const int smsg_update_unlock_function_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_unlock_function, function_id_),
  };
  smsg_update_unlock_function_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_update_unlock_function_descriptor_,
      smsg_update_unlock_function::default_instance_,
      smsg_update_unlock_function_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_unlock_function, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_unlock_function, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_update_unlock_function));
  smsg_update_char_ability_descriptor_ = file->message_type(41);
  static const int smsg_update_char_ability_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_char_ability, role_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_char_ability, char_ability_),
  };
  smsg_update_char_ability_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_update_char_ability_descriptor_,
      smsg_update_char_ability::default_instance_,
      smsg_update_char_ability_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_char_ability, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_char_ability, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_update_char_ability));
  smsg_get_server_time_descriptor_ = file->message_type(42);
  static const int smsg_get_server_time_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_get_server_time, server_time_),
  };
  smsg_get_server_time_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_get_server_time_descriptor_,
      smsg_get_server_time::default_instance_,
      smsg_get_server_time_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_get_server_time, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_get_server_time, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_get_server_time));
  cmsg_special_action_descriptor_ = file->message_type(43);
  static const int cmsg_special_action_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_special_action, action_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_special_action, param_),
  };
  cmsg_special_action_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cmsg_special_action_descriptor_,
      cmsg_special_action::default_instance_,
      cmsg_special_action_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_special_action, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_special_action, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cmsg_special_action));
  smsg_special_action_descriptor_ = file->message_type(44);
  static const int smsg_special_action_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_special_action, player_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_special_action, action_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_special_action, param_),
  };
  smsg_special_action_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_special_action_descriptor_,
      smsg_special_action::default_instance_,
      smsg_special_action_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_special_action, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_special_action, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_special_action));
  cmsg_special_action_person_descriptor_ = file->message_type(45);
  static const int cmsg_special_action_person_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_special_action_person, player_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_special_action_person, action_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_special_action_person, param_),
  };
  cmsg_special_action_person_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cmsg_special_action_person_descriptor_,
      cmsg_special_action_person::default_instance_,
      cmsg_special_action_person_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_special_action_person, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_special_action_person, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cmsg_special_action_person));
  smsg_special_action_person_descriptor_ = file->message_type(46);
  static const int smsg_special_action_person_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_special_action_person, player_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_special_action_person, action_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_special_action_person, param_),
  };
  smsg_special_action_person_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_special_action_person_descriptor_,
      smsg_special_action_person::default_instance_,
      smsg_special_action_person_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_special_action_person, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_special_action_person, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_special_action_person));
  smsg_update_plentiful_energy_descriptor_ = file->message_type(47);
  static const int smsg_update_plentiful_energy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_plentiful_energy, energy_value_),
  };
  smsg_update_plentiful_energy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_update_plentiful_energy_descriptor_,
      smsg_update_plentiful_energy::default_instance_,
      smsg_update_plentiful_energy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_plentiful_energy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_plentiful_energy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_update_plentiful_energy));
  smsg_update_module_free_time_descriptor_ = file->message_type(48);
  static const int smsg_update_module_free_time_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_module_free_time, module_left_free_time_),
  };
  smsg_update_module_free_time_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_update_module_free_time_descriptor_,
      smsg_update_module_free_time::default_instance_,
      smsg_update_module_free_time_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_module_free_time, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_module_free_time, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_update_module_free_time));
  smsg_update_module_free_time_ModuleFreeTime_descriptor_ = smsg_update_module_free_time_descriptor_->nested_type(0);
  static const int smsg_update_module_free_time_ModuleFreeTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_module_free_time_ModuleFreeTime, module_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_module_free_time_ModuleFreeTime, left_free_time_),
  };
  smsg_update_module_free_time_ModuleFreeTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_update_module_free_time_ModuleFreeTime_descriptor_,
      smsg_update_module_free_time_ModuleFreeTime::default_instance_,
      smsg_update_module_free_time_ModuleFreeTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_module_free_time_ModuleFreeTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_module_free_time_ModuleFreeTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_update_module_free_time_ModuleFreeTime));
  cmsg_set_follow_role_descriptor_ = file->message_type(49);
  static const int cmsg_set_follow_role_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_set_follow_role, role_guid_),
  };
  cmsg_set_follow_role_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cmsg_set_follow_role_descriptor_,
      cmsg_set_follow_role::default_instance_,
      cmsg_set_follow_role_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_set_follow_role, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_set_follow_role, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cmsg_set_follow_role));
  smsg_set_follow_role_descriptor_ = file->message_type(50);
  static const int smsg_set_follow_role_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_set_follow_role, role_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_set_follow_role, result_),
  };
  smsg_set_follow_role_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_set_follow_role_descriptor_,
      smsg_set_follow_role::default_instance_,
      smsg_set_follow_role_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_set_follow_role, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_set_follow_role, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_set_follow_role));
  smsg_update_follow_role_descriptor_ = file->message_type(51);
  static const int smsg_update_follow_role_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_follow_role, player_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_follow_role, follow_role_id_),
  };
  smsg_update_follow_role_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_update_follow_role_descriptor_,
      smsg_update_follow_role::default_instance_,
      smsg_update_follow_role_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_follow_role, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_follow_role, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_update_follow_role));
  smsg_update_current_title_descriptor_ = file->message_type(52);
  static const int smsg_update_current_title_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_current_title, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_current_title, current_title_),
  };
  smsg_update_current_title_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_update_current_title_descriptor_,
      smsg_update_current_title::default_instance_,
      smsg_update_current_title_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_current_title, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_current_title, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_update_current_title));
  smsg_update_special_right_descriptor_ = file->message_type(53);
  static const int smsg_update_special_right_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_special_right, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_special_right, special_right_),
  };
  smsg_update_special_right_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_update_special_right_descriptor_,
      smsg_update_special_right::default_instance_,
      smsg_update_special_right_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_special_right, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_special_right, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_update_special_right));
  smsg_wife_update_follow_descriptor_ = file->message_type(54);
  static const int smsg_wife_update_follow_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_wife_update_follow, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_wife_update_follow, wife_follow_),
  };
  smsg_wife_update_follow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_wife_update_follow_descriptor_,
      smsg_wife_update_follow::default_instance_,
      smsg_wife_update_follow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_wife_update_follow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_wife_update_follow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_wife_update_follow));
  smsg_update_doubleexp_info_descriptor_ = file->message_type(55);
  static const int smsg_update_doubleexp_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_doubleexp_info, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_doubleexp_info, left_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_doubleexp_info, mutil_value_),
  };
  smsg_update_doubleexp_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_update_doubleexp_info_descriptor_,
      smsg_update_doubleexp_info::default_instance_,
      smsg_update_doubleexp_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_doubleexp_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_doubleexp_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_update_doubleexp_info));
  smsg_lookup_guild_name_descriptor_ = file->message_type(56);
  static const int smsg_lookup_guild_name_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_lookup_guild_name, player_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_lookup_guild_name, guild_name_),
  };
  smsg_lookup_guild_name_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_lookup_guild_name_descriptor_,
      smsg_lookup_guild_name::default_instance_,
      smsg_lookup_guild_name_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_lookup_guild_name, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_lookup_guild_name, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_lookup_guild_name));
  smsg_lookup_dodge_descriptor_ = file->message_type(57);
  static const int smsg_lookup_dodge_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_lookup_dodge, player_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_lookup_dodge, dodge_id_),
  };
  smsg_lookup_dodge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_lookup_dodge_descriptor_,
      smsg_lookup_dodge::default_instance_,
      smsg_lookup_dodge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_lookup_dodge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_lookup_dodge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_lookup_dodge));
  smsg_hire_zslw_descriptor_ = file->message_type(58);
  static const int smsg_hire_zslw_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_hire_zslw, hired_),
  };
  smsg_hire_zslw_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_hire_zslw_descriptor_,
      smsg_hire_zslw::default_instance_,
      smsg_hire_zslw_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_hire_zslw, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_hire_zslw, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_hire_zslw));
  smsg_server_open_time_descriptor_ = file->message_type(59);
  static const int smsg_server_open_time_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_server_open_time, open_time_),
  };
  smsg_server_open_time_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_server_open_time_descriptor_,
      smsg_server_open_time::default_instance_,
      smsg_server_open_time_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_server_open_time, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_server_open_time, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_server_open_time));
  smsg_client_config_descriptor_ = file->message_type(60);
  static const int smsg_client_config_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_client_config, config_str_),
  };
  smsg_client_config_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_client_config_descriptor_,
      smsg_client_config::default_instance_,
      smsg_client_config_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_client_config, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_client_config, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_client_config));
  smsg_update_yellow_vip_level_descriptor_ = file->message_type(61);
  static const int smsg_update_yellow_vip_level_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_yellow_vip_level, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_yellow_vip_level, yellow_vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_yellow_vip_level, is_yellow_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_yellow_vip_level, is_yellow_year_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_yellow_vip_level, is_yellow_high_vip_),
  };
  smsg_update_yellow_vip_level_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_update_yellow_vip_level_descriptor_,
      smsg_update_yellow_vip_level::default_instance_,
      smsg_update_yellow_vip_level_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_yellow_vip_level, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_update_yellow_vip_level, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_update_yellow_vip_level));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_5fplayer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cmsg_check_player_name_descriptor_, &cmsg_check_player_name::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_check_player_name_descriptor_, &smsg_check_player_name::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cmsg_player_make_descriptor_, &cmsg_player_make::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_player_make_descriptor_, &smsg_player_make::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cmsg_request_random_name_descriptor_, &cmsg_request_random_name::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_request_random_name_descriptor_, &smsg_request_random_name::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cmsg_request_player_list_descriptor_, &cmsg_request_player_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_request_one_player_descriptor_, &smsg_request_one_player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_request_player_list_descriptor_, &smsg_request_player_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cmsg_player_delete_descriptor_, &cmsg_player_delete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_player_delete_descriptor_, &smsg_player_delete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_create_other_descriptor_, &smsg_create_other::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_player_remove_descriptor_, &smsg_player_remove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cmsg_validate_account_descriptor_, &cmsg_validate_account::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cmsg_player_enter_map_descriptor_, &cmsg_player_enter_map::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cmsg_player_leave_map_descriptor_, &cmsg_player_leave_map::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_create_self_descriptor_, &smsg_create_self::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_create_role_descriptor_, &smsg_create_role::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_update_flower_rank_descriptor_, &smsg_update_flower_rank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cmsg_lookup_player_descriptor_, &cmsg_lookup_player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_lookup_player_descriptor_, &smsg_lookup_player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_create_item_descriptor_, &smsg_create_item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_role_remove_descriptor_, &smsg_role_remove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cmsg_player_move_descriptor_, &cmsg_player_move::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_player_move_descriptor_, &smsg_player_move::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cmsg_player_jump_map_descriptor_, &cmsg_player_jump_map::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_player_jump_map_descriptor_, &smsg_player_jump_map::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_player_upgrade_level_descriptor_, &smsg_player_upgrade_level::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_role_upgrade_level_descriptor_, &smsg_role_upgrade_level::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cmsg_loopback_descriptor_, &cmsg_loopback::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_money_update_descriptor_, &smsg_money_update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_update_role_attr_descriptor_, &smsg_update_role_attr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_update_energy_descriptor_, &smsg_update_energy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cmsg_request_role_attr_rank_descriptor_, &cmsg_request_role_attr_rank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_request_role_attr_rank_descriptor_, &smsg_request_role_attr_rank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cmsg_request_role_attr_descriptor_, &cmsg_request_role_attr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_request_role_attr_descriptor_, &smsg_request_role_attr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_update_prestige_descriptor_, &smsg_update_prestige::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_update_reverence_descriptor_, &smsg_update_reverence::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_unlock_function_descriptor_, &smsg_unlock_function::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_update_unlock_function_descriptor_, &smsg_update_unlock_function::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_update_char_ability_descriptor_, &smsg_update_char_ability::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_get_server_time_descriptor_, &smsg_get_server_time::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cmsg_special_action_descriptor_, &cmsg_special_action::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_special_action_descriptor_, &smsg_special_action::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cmsg_special_action_person_descriptor_, &cmsg_special_action_person::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_special_action_person_descriptor_, &smsg_special_action_person::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_update_plentiful_energy_descriptor_, &smsg_update_plentiful_energy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_update_module_free_time_descriptor_, &smsg_update_module_free_time::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_update_module_free_time_ModuleFreeTime_descriptor_, &smsg_update_module_free_time_ModuleFreeTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cmsg_set_follow_role_descriptor_, &cmsg_set_follow_role::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_set_follow_role_descriptor_, &smsg_set_follow_role::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_update_follow_role_descriptor_, &smsg_update_follow_role::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_update_current_title_descriptor_, &smsg_update_current_title::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_update_special_right_descriptor_, &smsg_update_special_right::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_wife_update_follow_descriptor_, &smsg_wife_update_follow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_update_doubleexp_info_descriptor_, &smsg_update_doubleexp_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_lookup_guild_name_descriptor_, &smsg_lookup_guild_name::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_lookup_dodge_descriptor_, &smsg_lookup_dodge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_hire_zslw_descriptor_, &smsg_hire_zslw::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_server_open_time_descriptor_, &smsg_server_open_time::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_client_config_descriptor_, &smsg_client_config::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_update_yellow_vip_level_descriptor_, &smsg_update_yellow_vip_level::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_5fplayer_2eproto() {
  delete cmsg_check_player_name::default_instance_;
  delete cmsg_check_player_name_reflection_;
  delete smsg_check_player_name::default_instance_;
  delete smsg_check_player_name_reflection_;
  delete cmsg_player_make::default_instance_;
  delete cmsg_player_make_reflection_;
  delete smsg_player_make::default_instance_;
  delete smsg_player_make_reflection_;
  delete cmsg_request_random_name::default_instance_;
  delete cmsg_request_random_name_reflection_;
  delete smsg_request_random_name::default_instance_;
  delete smsg_request_random_name_reflection_;
  delete cmsg_request_player_list::default_instance_;
  delete cmsg_request_player_list_reflection_;
  delete smsg_request_one_player::default_instance_;
  delete smsg_request_one_player_reflection_;
  delete smsg_request_player_list::default_instance_;
  delete smsg_request_player_list_reflection_;
  delete cmsg_player_delete::default_instance_;
  delete cmsg_player_delete_reflection_;
  delete smsg_player_delete::default_instance_;
  delete smsg_player_delete_reflection_;
  delete smsg_create_other::default_instance_;
  delete smsg_create_other_reflection_;
  delete smsg_player_remove::default_instance_;
  delete smsg_player_remove_reflection_;
  delete cmsg_validate_account::default_instance_;
  delete cmsg_validate_account_reflection_;
  delete cmsg_player_enter_map::default_instance_;
  delete cmsg_player_enter_map_reflection_;
  delete cmsg_player_leave_map::default_instance_;
  delete cmsg_player_leave_map_reflection_;
  delete smsg_create_self::default_instance_;
  delete smsg_create_self_reflection_;
  delete smsg_create_role::default_instance_;
  delete smsg_create_role_reflection_;
  delete smsg_update_flower_rank::default_instance_;
  delete smsg_update_flower_rank_reflection_;
  delete cmsg_lookup_player::default_instance_;
  delete cmsg_lookup_player_reflection_;
  delete smsg_lookup_player::default_instance_;
  delete smsg_lookup_player_reflection_;
  delete smsg_create_item::default_instance_;
  delete smsg_create_item_reflection_;
  delete smsg_role_remove::default_instance_;
  delete smsg_role_remove_reflection_;
  delete cmsg_player_move::default_instance_;
  delete cmsg_player_move_reflection_;
  delete smsg_player_move::default_instance_;
  delete smsg_player_move_reflection_;
  delete cmsg_player_jump_map::default_instance_;
  delete cmsg_player_jump_map_reflection_;
  delete smsg_player_jump_map::default_instance_;
  delete smsg_player_jump_map_reflection_;
  delete smsg_player_upgrade_level::default_instance_;
  delete smsg_player_upgrade_level_reflection_;
  delete smsg_role_upgrade_level::default_instance_;
  delete smsg_role_upgrade_level_reflection_;
  delete cmsg_loopback::default_instance_;
  delete cmsg_loopback_reflection_;
  delete smsg_money_update::default_instance_;
  delete smsg_money_update_reflection_;
  delete smsg_update_role_attr::default_instance_;
  delete smsg_update_role_attr_reflection_;
  delete smsg_update_energy::default_instance_;
  delete smsg_update_energy_reflection_;
  delete cmsg_request_role_attr_rank::default_instance_;
  delete cmsg_request_role_attr_rank_reflection_;
  delete smsg_request_role_attr_rank::default_instance_;
  delete smsg_request_role_attr_rank_reflection_;
  delete cmsg_request_role_attr::default_instance_;
  delete cmsg_request_role_attr_reflection_;
  delete smsg_request_role_attr::default_instance_;
  delete smsg_request_role_attr_reflection_;
  delete smsg_update_prestige::default_instance_;
  delete smsg_update_prestige_reflection_;
  delete smsg_update_reverence::default_instance_;
  delete smsg_update_reverence_reflection_;
  delete smsg_unlock_function::default_instance_;
  delete smsg_unlock_function_reflection_;
  delete smsg_update_unlock_function::default_instance_;
  delete smsg_update_unlock_function_reflection_;
  delete smsg_update_char_ability::default_instance_;
  delete smsg_update_char_ability_reflection_;
  delete smsg_get_server_time::default_instance_;
  delete smsg_get_server_time_reflection_;
  delete cmsg_special_action::default_instance_;
  delete cmsg_special_action_reflection_;
  delete smsg_special_action::default_instance_;
  delete smsg_special_action_reflection_;
  delete cmsg_special_action_person::default_instance_;
  delete cmsg_special_action_person_reflection_;
  delete smsg_special_action_person::default_instance_;
  delete smsg_special_action_person_reflection_;
  delete smsg_update_plentiful_energy::default_instance_;
  delete smsg_update_plentiful_energy_reflection_;
  delete smsg_update_module_free_time::default_instance_;
  delete smsg_update_module_free_time_reflection_;
  delete smsg_update_module_free_time_ModuleFreeTime::default_instance_;
  delete smsg_update_module_free_time_ModuleFreeTime_reflection_;
  delete cmsg_set_follow_role::default_instance_;
  delete cmsg_set_follow_role_reflection_;
  delete smsg_set_follow_role::default_instance_;
  delete smsg_set_follow_role_reflection_;
  delete smsg_update_follow_role::default_instance_;
  delete smsg_update_follow_role_reflection_;
  delete smsg_update_current_title::default_instance_;
  delete smsg_update_current_title_reflection_;
  delete smsg_update_special_right::default_instance_;
  delete smsg_update_special_right_reflection_;
  delete smsg_wife_update_follow::default_instance_;
  delete smsg_wife_update_follow_reflection_;
  delete smsg_update_doubleexp_info::default_instance_;
  delete smsg_update_doubleexp_info_reflection_;
  delete smsg_lookup_guild_name::default_instance_;
  delete smsg_lookup_guild_name_reflection_;
  delete smsg_lookup_dodge::default_instance_;
  delete smsg_lookup_dodge_reflection_;
  delete smsg_hire_zslw::default_instance_;
  delete smsg_hire_zslw_reflection_;
  delete smsg_server_open_time::default_instance_;
  delete smsg_server_open_time_reflection_;
  delete smsg_client_config::default_instance_;
  delete smsg_client_config_reflection_;
  delete smsg_update_yellow_vip_level::default_instance_;
  delete smsg_update_yellow_vip_level_reflection_;
}

void protobuf_AddDesc_msg_5fplayer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020msg_player.proto\022\016typed.protocol\"&\n\026cm"
    "sg_check_player_name\022\014\n\004name\030\001 \002(\014\"<\n\026sm"
    "sg_check_player_name\022\014\n\004name\030\001 \002(\014\022\024\n\014ch"
    "eck_result\030\002 \001(\005\"\371\001\n\020cmsg_player_make\022\017\n"
    "\007account\030\001 \002(\t\022\014\n\004name\030\002 \002(\014\022\013\n\003sex\030\003 \002("
    "\005\022\022\n\nprofession\030\004 \002(\005\022\020\n\010gm_level\030\005 \001(\r\022"
    "\023\n\013validateStr\030\006 \001(\t\022\016\n\006param1\030\007 \001(\r\022\016\n\006"
    "param2\030\010 \001(\r\022\016\n\006param3\030\t \001(\r\022\016\n\006param4\030\n"
    " \001(\t\022\016\n\006param5\030\013 \001(\r\022\016\n\006invkey\030\014 \001(\t\022\r\n\005"
    "itime\030\r \001(\t\022\017\n\007iopenid\030\016 \001(\t\"A\n\020smsg_pla"
    "yer_make\022\014\n\004guid\030\001 \002(\004\022\016\n\006map_id\030\002 \001(\r\022\017"
    "\n\007line_id\030\003 \001(\r\"\'\n\030cmsg_request_random_n"
    "ame\022\013\n\003sex\030\001 \002(\005\"/\n\030smsg_request_random_"
    "name\022\023\n\013random_name\030\001 \002(\t\".\n\030cmsg_reques"
    "t_player_list\022\022\n\naccount_id\030\001 \002(\t\"\206\001\n\027sm"
    "sg_request_one_player\022\014\n\004guid\030\001 \002(\004\022\014\n\004n"
    "ame\030\002 \002(\014\022\022\n\nprofession\030\003 \002(\005\022\013\n\003sex\030\004 \002"
    "(\005\022\r\n\005level\030\005 \002(\005\022\016\n\006map_id\030\006 \001(\r\022\017\n\007lin"
    "e_id\030\007 \001(\r\"l\n\030smsg_request_player_list\022\022"
    "\n\nplayer_num\030\001 \002(\005\022<\n\013player_list\030\002 \003(\0132"
    "\'.typed.protocol.smsg_request_one_player"
    "\"\"\n\022cmsg_player_delete\022\014\n\004guid\030\001 \002(\004\"\"\n\022"
    "smsg_player_delete\022\014\n\004guid\030\001 \002(\004\"\322\003\n\021sms"
    "g_create_other\022\014\n\004guid\030\001 \002(\004\022\017\n\007role_id\030"
    "\002 \002(\r\022\014\n\004name\030\003 \001(\014\022\r\n\005level\030\004 \001(\005\022\013\n\003se"
    "x\030\005 \001(\005\022\r\n\005src_x\030\006 \001(\002\022\r\n\005src_y\030\007 \001(\002\022\r\n"
    "\005dst_x\030\010 \001(\002\022\r\n\005dst_y\030\t \001(\002\022\021\n\tdirection"
    "\030\n \001(\005\022\022\n\nfirst_role\030\013 \001(\004\022\023\n\013flower_ran"
    "k\030\014 \001(\r\022\022\n\nguild_name\030\r \001(\t\022\022\n\nguild_ico"
    "n\030\016 \001(\r\022\026\n\016follow_role_id\030\017 \001(\r\022\025\n\rcurre"
    "nt_title\030\020 \003(\r\022\025\n\rspecial_right\030\021 \001(\r\022\020\n"
    "\010horse_id\030\022 \001(\r\022\023\n\013wife_follow\030\023 \001(\r\022\030\n\020"
    "yellow_vip_level\030\024 \001(\r\022\025\n\ris_yellow_vip\030"
    "\025 \001(\r\022\032\n\022is_yellow_year_vip\030\026 \001(\r\022\032\n\022is_"
    "yellow_high_vip\030\027 \001(\r\"\"\n\022smsg_player_rem"
    "ove\022\014\n\004guid\030\001 \002(\004\"\?\n\025cmsg_validate_accou"
    "nt\022\022\n\naccount_id\030\001 \002(\t\022\022\n\nsession_id\030\002 \002"
    "(\014\"F\n\025cmsg_player_enter_map\022\014\n\004guid\030\001 \002("
    "\004\022\016\n\006map_id\030\002 \001(\r\022\017\n\007line_id\030\003 \001(\r\"+\n\025cm"
    "sg_player_leave_map\022\022\n\nleave_type\030\001 \002(\005\""
    "\356\005\n\020smsg_create_self\022\014\n\004guid\030\001 \002(\004\022\014\n\004na"
    "me\030\002 \001(\014\022\r\n\005level\030\003 \001(\r\022\013\n\003exp\030\004 \001(\r\022\022\n\n"
    "profession\030\005 \001(\005\022\013\n\003sex\030\006 \001(\005\022\r\n\005money\030\007"
    " \001(\r\022\014\n\004coin\030\010 \001(\r\022\r\n\005src_x\030\t \001(\002\022\r\n\005src"
    "_y\030\n \001(\002\022\r\n\005dst_x\030\013 \001(\002\022\r\n\005dst_y\030\014 \001(\002\022\021"
    "\n\tseniority\030\r \001(\r\022\016\n\006map_id\030\016 \001(\r\022\021\n\tdir"
    "ection\030\017 \001(\005\022\017\n\007role_id\030\020 \001(\005\022\020\n\010prestig"
    "e\030\021 \001(\r\022\014\n\004rank\030\022 \001(\r\022\r\n\005guild\030\023 \001(\004\022\022\n\n"
    "guild_name\030\024 \001(\t\022\023\n\013member_slot\030\025 \001(\r\022\022\n"
    "\nattributes\030\026 \003(\r\022\r\n\005roles\030\027 \003(\004\022\013\n\003bag\030"
    "\030 \003(\004\022\022\n\nstorehouse\030\031 \003(\004\022\016\n\006energy\030\032 \001("
    "\r\022\024\n\014is_addiction\030\033 \001(\r\022\021\n\tvip_level\030\034 \001"
    "(\r\022\017\n\007vip_exp\030\035 \001(\r\022\021\n\treverence\030\036 \001(\r\022\022"
    "\n\nguild_icon\030\037 \001(\r\022\026\n\016follow_role_id\030  \001"
    "(\r\022\025\n\rcurrent_title\030! \003(\r\022\025\n\rspecial_rig"
    "ht\030\" \001(\r\022\020\n\010horse_id\030# \001(\r\022\023\n\013wife_follo"
    "w\030$ \001(\r\022\030\n\020yellow_vip_level\030% \001(\r\022\025\n\ris_"
    "yellow_vip\030& \001(\r\022\032\n\022is_yellow_year_vip\030\'"
    " \001(\r\022\032\n\022is_yellow_high_vip\030( \001(\r\"\317\002\n\020sms"
    "g_create_role\022\014\n\004guid\030\001 \002(\004\022\016\n\006player\030\002 "
    "\002(\004\022\017\n\007role_id\030\003 \001(\r\022\014\n\004name\030\004 \001(\t\022\013\n\003se"
    "x\030\005 \001(\r\022\013\n\003job\030\006 \001(\r\022\017\n\007faction\030\007 \001(\r\022\r\n"
    "\005level\030\010 \001(\r\022\013\n\003exp\030\t \001(\r\022\017\n\007postion\030\n \001"
    "(\r\022\024\n\014normal_skill\030\013 \001(\r\022\027\n\017extremely_sk"
    "ill\030\014 \001(\r\022\024\n\014char_ability\030\r \001(\r\022\017\n\007hire_"
    "id\030\016 \001(\r\022\022\n\nattributes\030\017 \003(\r\022\022\n\ninherit_"
    "to\030\036 \001(\004\022\024\n\014inherit_from\030\037 \001(\004\022\022\n\nattrs_"
    "rank\030  \003(\r\"<\n\027smsg_update_flower_rank\022\014\n"
    "\004guid\030\001 \002(\004\022\023\n\013flower_rank\030\002 \002(\r\"\"\n\022cmsg"
    "_lookup_player\022\014\n\004guid\030\001 \002(\004\"\246\001\n\022smsg_lo"
    "okup_player\022\014\n\004guid\030\001 \002(\004\022\014\n\004name\030\002 \001(\014\022"
    "\r\n\005level\030\003 \001(\r\022\022\n\nprofession\030\005 \001(\005\022\013\n\003se"
    "x\030\006 \001(\005\022\017\n\007role_id\030\020 \001(\005\022\020\n\010prestige\030\021 \001"
    "(\r\022\022\n\nattributes\030\026 \003(\r\022\r\n\005roles\030\027 \003(\004\"\367\001"
    "\n\020smsg_create_item\022\014\n\004guid\030\001 \002(\004\022\016\n\006play"
    "er\030\002 \002(\004\022\014\n\004role\030\003 \002(\004\022\n\n\002id\030\004 \002(\r\022\013\n\003nu"
    "m\030\005 \001(\r\022\026\n\016strength_level\030\006 \001(\r\022\020\n\010locat"
    "ion\030\007 \001(\r\022\013\n\003pos\030\010 \001(\r\022\r\n\005price\030\t \001(\r\022\024\n"
    "\014attribute_id\030\n \003(\r\022\027\n\017attribute_value\030\013"
    " \003(\005\022\r\n\005color\030\014 \001(\r\022\014\n\004wife\030\r \001(\004\022\014\n\004gem"
    "s\030\016 \003(\r\":\n\020smsg_role_remove\022\023\n\013player_gu"
    "id\030\001 \002(\004\022\021\n\trole_guid\030\002 \002(\004\"N\n\020cmsg_play"
    "er_move\022\r\n\005src_x\030\001 \001(\002\022\r\n\005src_y\030\002 \001(\002\022\r\n"
    "\005dst_x\030\003 \001(\002\022\r\n\005dst_y\030\004 \001(\002\"\\\n\020smsg_play"
    "er_move\022\014\n\004guid\030\001 \002(\004\022\r\n\005src_x\030\002 \001(\002\022\r\n\005"
    "src_y\030\003 \001(\002\022\r\n\005dst_x\030\004 \001(\002\022\r\n\005dst_y\030\005 \001("
    "\002\"-\n\024cmsg_player_jump_map\022\025\n\rtarget_map_"
    "id\030\001 \002(\r\"\\\n\024smsg_player_jump_map\022\025\n\rtarg"
    "et_map_id\030\001 \002(\r\022\r\n\005src_x\030\002 \001(\r\022\r\n\005src_y\030"
    "\003 \001(\r\022\017\n\007line_no\030\004 \001(\r\"G\n\031smsg_player_up"
    "grade_level\022\025\n\rupgrade_level\030\001 \002(\r\022\023\n\013up"
    "grade_exp\030\002 \002(\r\"l\n\027smsg_role_upgrade_lev"
    "el\022\021\n\trole_guid\030\001 \002(\004\022\025\n\rupgrade_level\030\002"
    " \002(\r\022\023\n\013upgrade_exp\030\003 \002(\r\022\022\n\nupgrade_hp\030"
    "\004 \002(\r\"R\n\rcmsg_loopback\022\020\n\010sendtime\030\001 \002(\004"
    "\022\030\n\020logic_run_elapse\030\002 \001(\004\022\025\n\rgs_run_ela"
    "pse\030\003 \001(\004\"R\n\021smsg_money_update\022\022\n\ncurr_m"
    "oney\030\001 \001(\005\022\021\n\tcurr_coin\030\002 \001(\005\022\026\n\016curr_se"
    "niority\030\003 \001(\005\"R\n\025smsg_update_role_attr\022\021"
    "\n\trole_guid\030\001 \002(\004\022\022\n\nattr_index\030\002 \003(\r\022\022\n"
    "\nattr_value\030\003 \003(\r\")\n\022smsg_update_energy\022"
    "\023\n\013curr_energy\030\001 \002(\005\"0\n\033cmsg_request_rol"
    "e_attr_rank\022\021\n\trole_guid\030\001 \002(\004\"C\n\033smsg_r"
    "equest_role_attr_rank\022\021\n\trole_guid\030\001 \002(\004"
    "\022\021\n\trole_attr\030\002 \003(\r\"+\n\026cmsg_request_role"
    "_attr\022\021\n\trole_guid\030\001 \002(\004\">\n\026smsg_request"
    "_role_attr\022\021\n\trole_guid\030\001 \002(\004\022\021\n\trole_at"
    "tr\030\002 \003(\r\".\n\024smsg_update_prestige\022\026\n\016pres"
    "tige_value\030\001 \002(\005\"0\n\025smsg_update_reverenc"
    "e\022\027\n\017reverence_value\030\001 \002(\005\"+\n\024smsg_unloc"
    "k_function\022\023\n\013function_id\030\001 \003(\r\"2\n\033smsg_"
    "update_unlock_function\022\023\n\013function_id\030\001 "
    "\003(\r\"C\n\030smsg_update_char_ability\022\021\n\trole_"
    "guid\030\001 \001(\004\022\024\n\014char_ability\030\002 \001(\r\"+\n\024smsg"
    "_get_server_time\022\023\n\013server_time\030\001 \002(\r\"9\n"
    "\023cmsg_special_action\022\023\n\013action_type\030\001 \001("
    "\r\022\r\n\005param\030\002 \001(\004\"N\n\023smsg_special_action\022"
    "\023\n\013player_guid\030\001 \002(\004\022\023\n\013action_type\030\002 \001("
    "\r\022\r\n\005param\030\003 \001(\004\"U\n\032cmsg_special_action_"
    "person\022\023\n\013player_guid\030\001 \003(\004\022\023\n\013action_ty"
    "pe\030\002 \001(\r\022\r\n\005param\030\003 \001(\004\"U\n\032smsg_special_"
    "action_person\022\023\n\013player_guid\030\001 \002(\004\022\023\n\013ac"
    "tion_type\030\002 \001(\r\022\r\n\005param\030\003 \001(\004\"4\n\034smsg_u"
    "pdate_plentiful_energy\022\024\n\014energy_value\030\001"
    " \002(\r\"\267\001\n\034smsg_update_module_free_time\022Z\n"
    "\025module_left_free_time\030\001 \003(\0132;.typed.pro"
    "tocol.smsg_update_module_free_time.Modul"
    "eFreeTime\032;\n\016ModuleFreeTime\022\021\n\tmodule_id"
    "\030\001 \002(\r\022\026\n\016left_free_time\030\002 \002(\r\")\n\024cmsg_s"
    "et_follow_role\022\021\n\trole_guid\030\001 \002(\004\"9\n\024sms"
    "g_set_follow_role\022\021\n\trole_guid\030\001 \002(\004\022\016\n\006"
    "result\030\002 \001(\r\"F\n\027smsg_update_follow_role\022"
    "\023\n\013player_guid\030\001 \002(\004\022\026\n\016follow_role_id\030\002"
    " \002(\r\"B\n\031smsg_update_current_title\022\016\n\006pla"
    "yer\030\001 \002(\004\022\025\n\rcurrent_title\030\002 \003(\r\"B\n\031smsg"
    "_update_special_right\022\016\n\006player\030\001 \002(\004\022\025\n"
    "\rspecial_right\030\002 \002(\r\">\n\027smsg_wife_update"
    "_follow\022\016\n\006player\030\001 \002(\004\022\023\n\013wife_follow\030\002"
    " \002(\r\"O\n\032smsg_update_doubleexp_info\022\n\n\002id"
    "\030\001 \002(\r\022\020\n\010left_num\030\002 \001(\r\022\023\n\013mutil_value\030"
    "\003 \001(\r\"A\n\026smsg_lookup_guild_name\022\023\n\013playe"
    "r_guid\030\001 \002(\004\022\022\n\nguild_name\030\002 \001(\t\":\n\021smsg"
    "_lookup_dodge\022\023\n\013player_guid\030\001 \002(\004\022\020\n\010do"
    "dge_id\030\002 \001(\r\"\037\n\016smsg_hire_zslw\022\r\n\005hired\030"
    "\001 \002(\r\"*\n\025smsg_server_open_time\022\021\n\topen_t"
    "ime\030\001 \001(\004\"(\n\022smsg_client_config\022\022\n\nconfi"
    "g_str\030\001 \001(\t\"\227\001\n\034smsg_update_yellow_vip_l"
    "evel\022\016\n\006player\030\001 \002(\004\022\030\n\020yellow_vip_level"
    "\030\002 \002(\r\022\025\n\ris_yellow_vip\030\003 \001(\r\022\032\n\022is_yell"
    "ow_year_vip\030\004 \001(\r\022\032\n\022is_yellow_high_vip\030"
    "\005 \001(\r", 6005);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_player.proto", &protobuf_RegisterTypes);
  cmsg_check_player_name::default_instance_ = new cmsg_check_player_name();
  smsg_check_player_name::default_instance_ = new smsg_check_player_name();
  cmsg_player_make::default_instance_ = new cmsg_player_make();
  smsg_player_make::default_instance_ = new smsg_player_make();
  cmsg_request_random_name::default_instance_ = new cmsg_request_random_name();
  smsg_request_random_name::default_instance_ = new smsg_request_random_name();
  cmsg_request_player_list::default_instance_ = new cmsg_request_player_list();
  smsg_request_one_player::default_instance_ = new smsg_request_one_player();
  smsg_request_player_list::default_instance_ = new smsg_request_player_list();
  cmsg_player_delete::default_instance_ = new cmsg_player_delete();
  smsg_player_delete::default_instance_ = new smsg_player_delete();
  smsg_create_other::default_instance_ = new smsg_create_other();
  smsg_player_remove::default_instance_ = new smsg_player_remove();
  cmsg_validate_account::default_instance_ = new cmsg_validate_account();
  cmsg_player_enter_map::default_instance_ = new cmsg_player_enter_map();
  cmsg_player_leave_map::default_instance_ = new cmsg_player_leave_map();
  smsg_create_self::default_instance_ = new smsg_create_self();
  smsg_create_role::default_instance_ = new smsg_create_role();
  smsg_update_flower_rank::default_instance_ = new smsg_update_flower_rank();
  cmsg_lookup_player::default_instance_ = new cmsg_lookup_player();
  smsg_lookup_player::default_instance_ = new smsg_lookup_player();
  smsg_create_item::default_instance_ = new smsg_create_item();
  smsg_role_remove::default_instance_ = new smsg_role_remove();
  cmsg_player_move::default_instance_ = new cmsg_player_move();
  smsg_player_move::default_instance_ = new smsg_player_move();
  cmsg_player_jump_map::default_instance_ = new cmsg_player_jump_map();
  smsg_player_jump_map::default_instance_ = new smsg_player_jump_map();
  smsg_player_upgrade_level::default_instance_ = new smsg_player_upgrade_level();
  smsg_role_upgrade_level::default_instance_ = new smsg_role_upgrade_level();
  cmsg_loopback::default_instance_ = new cmsg_loopback();
  smsg_money_update::default_instance_ = new smsg_money_update();
  smsg_update_role_attr::default_instance_ = new smsg_update_role_attr();
  smsg_update_energy::default_instance_ = new smsg_update_energy();
  cmsg_request_role_attr_rank::default_instance_ = new cmsg_request_role_attr_rank();
  smsg_request_role_attr_rank::default_instance_ = new smsg_request_role_attr_rank();
  cmsg_request_role_attr::default_instance_ = new cmsg_request_role_attr();
  smsg_request_role_attr::default_instance_ = new smsg_request_role_attr();
  smsg_update_prestige::default_instance_ = new smsg_update_prestige();
  smsg_update_reverence::default_instance_ = new smsg_update_reverence();
  smsg_unlock_function::default_instance_ = new smsg_unlock_function();
  smsg_update_unlock_function::default_instance_ = new smsg_update_unlock_function();
  smsg_update_char_ability::default_instance_ = new smsg_update_char_ability();
  smsg_get_server_time::default_instance_ = new smsg_get_server_time();
  cmsg_special_action::default_instance_ = new cmsg_special_action();
  smsg_special_action::default_instance_ = new smsg_special_action();
  cmsg_special_action_person::default_instance_ = new cmsg_special_action_person();
  smsg_special_action_person::default_instance_ = new smsg_special_action_person();
  smsg_update_plentiful_energy::default_instance_ = new smsg_update_plentiful_energy();
  smsg_update_module_free_time::default_instance_ = new smsg_update_module_free_time();
  smsg_update_module_free_time_ModuleFreeTime::default_instance_ = new smsg_update_module_free_time_ModuleFreeTime();
  cmsg_set_follow_role::default_instance_ = new cmsg_set_follow_role();
  smsg_set_follow_role::default_instance_ = new smsg_set_follow_role();
  smsg_update_follow_role::default_instance_ = new smsg_update_follow_role();
  smsg_update_current_title::default_instance_ = new smsg_update_current_title();
  smsg_update_special_right::default_instance_ = new smsg_update_special_right();
  smsg_wife_update_follow::default_instance_ = new smsg_wife_update_follow();
  smsg_update_doubleexp_info::default_instance_ = new smsg_update_doubleexp_info();
  smsg_lookup_guild_name::default_instance_ = new smsg_lookup_guild_name();
  smsg_lookup_dodge::default_instance_ = new smsg_lookup_dodge();
  smsg_hire_zslw::default_instance_ = new smsg_hire_zslw();
  smsg_server_open_time::default_instance_ = new smsg_server_open_time();
  smsg_client_config::default_instance_ = new smsg_client_config();
  smsg_update_yellow_vip_level::default_instance_ = new smsg_update_yellow_vip_level();
  cmsg_check_player_name::default_instance_->InitAsDefaultInstance();
  smsg_check_player_name::default_instance_->InitAsDefaultInstance();
  cmsg_player_make::default_instance_->InitAsDefaultInstance();
  smsg_player_make::default_instance_->InitAsDefaultInstance();
  cmsg_request_random_name::default_instance_->InitAsDefaultInstance();
  smsg_request_random_name::default_instance_->InitAsDefaultInstance();
  cmsg_request_player_list::default_instance_->InitAsDefaultInstance();
  smsg_request_one_player::default_instance_->InitAsDefaultInstance();
  smsg_request_player_list::default_instance_->InitAsDefaultInstance();
  cmsg_player_delete::default_instance_->InitAsDefaultInstance();
  smsg_player_delete::default_instance_->InitAsDefaultInstance();
  smsg_create_other::default_instance_->InitAsDefaultInstance();
  smsg_player_remove::default_instance_->InitAsDefaultInstance();
  cmsg_validate_account::default_instance_->InitAsDefaultInstance();
  cmsg_player_enter_map::default_instance_->InitAsDefaultInstance();
  cmsg_player_leave_map::default_instance_->InitAsDefaultInstance();
  smsg_create_self::default_instance_->InitAsDefaultInstance();
  smsg_create_role::default_instance_->InitAsDefaultInstance();
  smsg_update_flower_rank::default_instance_->InitAsDefaultInstance();
  cmsg_lookup_player::default_instance_->InitAsDefaultInstance();
  smsg_lookup_player::default_instance_->InitAsDefaultInstance();
  smsg_create_item::default_instance_->InitAsDefaultInstance();
  smsg_role_remove::default_instance_->InitAsDefaultInstance();
  cmsg_player_move::default_instance_->InitAsDefaultInstance();
  smsg_player_move::default_instance_->InitAsDefaultInstance();
  cmsg_player_jump_map::default_instance_->InitAsDefaultInstance();
  smsg_player_jump_map::default_instance_->InitAsDefaultInstance();
  smsg_player_upgrade_level::default_instance_->InitAsDefaultInstance();
  smsg_role_upgrade_level::default_instance_->InitAsDefaultInstance();
  cmsg_loopback::default_instance_->InitAsDefaultInstance();
  smsg_money_update::default_instance_->InitAsDefaultInstance();
  smsg_update_role_attr::default_instance_->InitAsDefaultInstance();
  smsg_update_energy::default_instance_->InitAsDefaultInstance();
  cmsg_request_role_attr_rank::default_instance_->InitAsDefaultInstance();
  smsg_request_role_attr_rank::default_instance_->InitAsDefaultInstance();
  cmsg_request_role_attr::default_instance_->InitAsDefaultInstance();
  smsg_request_role_attr::default_instance_->InitAsDefaultInstance();
  smsg_update_prestige::default_instance_->InitAsDefaultInstance();
  smsg_update_reverence::default_instance_->InitAsDefaultInstance();
  smsg_unlock_function::default_instance_->InitAsDefaultInstance();
  smsg_update_unlock_function::default_instance_->InitAsDefaultInstance();
  smsg_update_char_ability::default_instance_->InitAsDefaultInstance();
  smsg_get_server_time::default_instance_->InitAsDefaultInstance();
  cmsg_special_action::default_instance_->InitAsDefaultInstance();
  smsg_special_action::default_instance_->InitAsDefaultInstance();
  cmsg_special_action_person::default_instance_->InitAsDefaultInstance();
  smsg_special_action_person::default_instance_->InitAsDefaultInstance();
  smsg_update_plentiful_energy::default_instance_->InitAsDefaultInstance();
  smsg_update_module_free_time::default_instance_->InitAsDefaultInstance();
  smsg_update_module_free_time_ModuleFreeTime::default_instance_->InitAsDefaultInstance();
  cmsg_set_follow_role::default_instance_->InitAsDefaultInstance();
  smsg_set_follow_role::default_instance_->InitAsDefaultInstance();
  smsg_update_follow_role::default_instance_->InitAsDefaultInstance();
  smsg_update_current_title::default_instance_->InitAsDefaultInstance();
  smsg_update_special_right::default_instance_->InitAsDefaultInstance();
  smsg_wife_update_follow::default_instance_->InitAsDefaultInstance();
  smsg_update_doubleexp_info::default_instance_->InitAsDefaultInstance();
  smsg_lookup_guild_name::default_instance_->InitAsDefaultInstance();
  smsg_lookup_dodge::default_instance_->InitAsDefaultInstance();
  smsg_hire_zslw::default_instance_->InitAsDefaultInstance();
  smsg_server_open_time::default_instance_->InitAsDefaultInstance();
  smsg_client_config::default_instance_->InitAsDefaultInstance();
  smsg_update_yellow_vip_level::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_5fplayer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_5fplayer_2eproto {
  StaticDescriptorInitializer_msg_5fplayer_2eproto() {
    protobuf_AddDesc_msg_5fplayer_2eproto();
  }
} static_descriptor_initializer_msg_5fplayer_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int cmsg_check_player_name::kNameFieldNumber;
#endif  // !_MSC_VER

cmsg_check_player_name::cmsg_check_player_name()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.cmsg_check_player_name)
}

void cmsg_check_player_name::InitAsDefaultInstance() {
}

cmsg_check_player_name::cmsg_check_player_name(const cmsg_check_player_name& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.cmsg_check_player_name)
}

void cmsg_check_player_name::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cmsg_check_player_name::~cmsg_check_player_name() {
  // @@protoc_insertion_point(destructor:typed.protocol.cmsg_check_player_name)
  SharedDtor();
}

void cmsg_check_player_name::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void cmsg_check_player_name::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cmsg_check_player_name::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cmsg_check_player_name_descriptor_;
}

const cmsg_check_player_name& cmsg_check_player_name::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

cmsg_check_player_name* cmsg_check_player_name::default_instance_ = NULL;

cmsg_check_player_name* cmsg_check_player_name::New() const {
  return new cmsg_check_player_name;
}

void cmsg_check_player_name::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cmsg_check_player_name::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.cmsg_check_player_name)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.cmsg_check_player_name)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.cmsg_check_player_name)
  return false;
#undef DO_
}

void cmsg_check_player_name::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.cmsg_check_player_name)
  // required bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.cmsg_check_player_name)
}

::google::protobuf::uint8* cmsg_check_player_name::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.cmsg_check_player_name)
  // required bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.cmsg_check_player_name)
  return target;
}

int cmsg_check_player_name::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cmsg_check_player_name::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cmsg_check_player_name* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cmsg_check_player_name*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cmsg_check_player_name::MergeFrom(const cmsg_check_player_name& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cmsg_check_player_name::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmsg_check_player_name::CopyFrom(const cmsg_check_player_name& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmsg_check_player_name::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void cmsg_check_player_name::Swap(cmsg_check_player_name* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cmsg_check_player_name::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cmsg_check_player_name_descriptor_;
  metadata.reflection = cmsg_check_player_name_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_check_player_name::kNameFieldNumber;
const int smsg_check_player_name::kCheckResultFieldNumber;
#endif  // !_MSC_VER

smsg_check_player_name::smsg_check_player_name()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_check_player_name)
}

void smsg_check_player_name::InitAsDefaultInstance() {
}

smsg_check_player_name::smsg_check_player_name(const smsg_check_player_name& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_check_player_name)
}

void smsg_check_player_name::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  check_result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_check_player_name::~smsg_check_player_name() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_check_player_name)
  SharedDtor();
}

void smsg_check_player_name::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void smsg_check_player_name::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_check_player_name::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_check_player_name_descriptor_;
}

const smsg_check_player_name& smsg_check_player_name::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_check_player_name* smsg_check_player_name::default_instance_ = NULL;

smsg_check_player_name* smsg_check_player_name::New() const {
  return new smsg_check_player_name;
}

void smsg_check_player_name::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    check_result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_check_player_name::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_check_player_name)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_check_result;
        break;
      }

      // optional int32 check_result = 2;
      case 2: {
        if (tag == 16) {
         parse_check_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &check_result_)));
          set_has_check_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_check_player_name)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_check_player_name)
  return false;
#undef DO_
}

void smsg_check_player_name::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_check_player_name)
  // required bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 check_result = 2;
  if (has_check_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->check_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_check_player_name)
}

::google::protobuf::uint8* smsg_check_player_name::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_check_player_name)
  // required bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional int32 check_result = 2;
  if (has_check_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->check_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_check_player_name)
  return target;
}

int smsg_check_player_name::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 check_result = 2;
    if (has_check_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->check_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_check_player_name::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_check_player_name* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_check_player_name*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_check_player_name::MergeFrom(const smsg_check_player_name& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_check_result()) {
      set_check_result(from.check_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_check_player_name::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_check_player_name::CopyFrom(const smsg_check_player_name& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_check_player_name::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void smsg_check_player_name::Swap(smsg_check_player_name* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(check_result_, other->check_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_check_player_name::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_check_player_name_descriptor_;
  metadata.reflection = smsg_check_player_name_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cmsg_player_make::kAccountFieldNumber;
const int cmsg_player_make::kNameFieldNumber;
const int cmsg_player_make::kSexFieldNumber;
const int cmsg_player_make::kProfessionFieldNumber;
const int cmsg_player_make::kGmLevelFieldNumber;
const int cmsg_player_make::kValidateStrFieldNumber;
const int cmsg_player_make::kParam1FieldNumber;
const int cmsg_player_make::kParam2FieldNumber;
const int cmsg_player_make::kParam3FieldNumber;
const int cmsg_player_make::kParam4FieldNumber;
const int cmsg_player_make::kParam5FieldNumber;
const int cmsg_player_make::kInvkeyFieldNumber;
const int cmsg_player_make::kItimeFieldNumber;
const int cmsg_player_make::kIopenidFieldNumber;
#endif  // !_MSC_VER

cmsg_player_make::cmsg_player_make()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.cmsg_player_make)
}

void cmsg_player_make::InitAsDefaultInstance() {
}

cmsg_player_make::cmsg_player_make(const cmsg_player_make& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.cmsg_player_make)
}

void cmsg_player_make::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = 0;
  profession_ = 0;
  gm_level_ = 0u;
  validatestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param1_ = 0u;
  param2_ = 0u;
  param3_ = 0u;
  param4_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param5_ = 0u;
  invkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  itime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cmsg_player_make::~cmsg_player_make() {
  // @@protoc_insertion_point(destructor:typed.protocol.cmsg_player_make)
  SharedDtor();
}

void cmsg_player_make::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (validatestr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete validatestr_;
  }
  if (param4_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete param4_;
  }
  if (invkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete invkey_;
  }
  if (itime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itime_;
  }
  if (iopenid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete iopenid_;
  }
  if (this != default_instance_) {
  }
}

void cmsg_player_make::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cmsg_player_make::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cmsg_player_make_descriptor_;
}

const cmsg_player_make& cmsg_player_make::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

cmsg_player_make* cmsg_player_make::default_instance_ = NULL;

cmsg_player_make* cmsg_player_make::New() const {
  return new cmsg_player_make;
}

void cmsg_player_make::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<cmsg_player_make*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(sex_, profession_);
    ZR_(gm_level_, param2_);
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_validatestr()) {
      if (validatestr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        validatestr_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 16128) {
    param3_ = 0u;
    if (has_param4()) {
      if (param4_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        param4_->clear();
      }
    }
    param5_ = 0u;
    if (has_invkey()) {
      if (invkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        invkey_->clear();
      }
    }
    if (has_itime()) {
      if (itime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itime_->clear();
      }
    }
    if (has_iopenid()) {
      if (iopenid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        iopenid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cmsg_player_make::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.cmsg_player_make)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string account = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sex;
        break;
      }

      // required int32 sex = 3;
      case 3: {
        if (tag == 24) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_profession;
        break;
      }

      // required int32 profession = 4;
      case 4: {
        if (tag == 32) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gm_level;
        break;
      }

      // optional uint32 gm_level = 5;
      case 5: {
        if (tag == 40) {
         parse_gm_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gm_level_)));
          set_has_gm_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_validateStr;
        break;
      }

      // optional string validateStr = 6;
      case 6: {
        if (tag == 50) {
         parse_validateStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_validatestr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->validatestr().data(), this->validatestr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "validatestr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_param1;
        break;
      }

      // optional uint32 param1 = 7;
      case 7: {
        if (tag == 56) {
         parse_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_param2;
        break;
      }

      // optional uint32 param2 = 8;
      case 8: {
        if (tag == 64) {
         parse_param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param2_)));
          set_has_param2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_param3;
        break;
      }

      // optional uint32 param3 = 9;
      case 9: {
        if (tag == 72) {
         parse_param3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param3_)));
          set_has_param3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_param4;
        break;
      }

      // optional string param4 = 10;
      case 10: {
        if (tag == 82) {
         parse_param4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param4()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param4().data(), this->param4().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "param4");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_param5;
        break;
      }

      // optional uint32 param5 = 11;
      case 11: {
        if (tag == 88) {
         parse_param5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param5_)));
          set_has_param5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_invkey;
        break;
      }

      // optional string invkey = 12;
      case 12: {
        if (tag == 98) {
         parse_invkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->invkey().data(), this->invkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "invkey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_itime;
        break;
      }

      // optional string itime = 13;
      case 13: {
        if (tag == 106) {
         parse_itime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itime().data(), this->itime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_iopenid;
        break;
      }

      // optional string iopenid = 14;
      case 14: {
        if (tag == 114) {
         parse_iopenid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iopenid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->iopenid().data(), this->iopenid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "iopenid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.cmsg_player_make)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.cmsg_player_make)
  return false;
#undef DO_
}

void cmsg_player_make::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.cmsg_player_make)
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account(), output);
  }

  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // required int32 sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sex(), output);
  }

  // required int32 profession = 4;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->profession(), output);
  }

  // optional uint32 gm_level = 5;
  if (has_gm_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->gm_level(), output);
  }

  // optional string validateStr = 6;
  if (has_validatestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->validatestr().data(), this->validatestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "validatestr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->validatestr(), output);
  }

  // optional uint32 param1 = 7;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->param1(), output);
  }

  // optional uint32 param2 = 8;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->param2(), output);
  }

  // optional uint32 param3 = 9;
  if (has_param3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->param3(), output);
  }

  // optional string param4 = 10;
  if (has_param4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param4().data(), this->param4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "param4");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->param4(), output);
  }

  // optional uint32 param5 = 11;
  if (has_param5()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->param5(), output);
  }

  // optional string invkey = 12;
  if (has_invkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invkey().data(), this->invkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->invkey(), output);
  }

  // optional string itime = 13;
  if (has_itime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itime().data(), this->itime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->itime(), output);
  }

  // optional string iopenid = 14;
  if (has_iopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iopenid().data(), this->iopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "iopenid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->iopenid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.cmsg_player_make)
}

::google::protobuf::uint8* cmsg_player_make::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.cmsg_player_make)
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required int32 sex = 3;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sex(), target);
  }

  // required int32 profession = 4;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->profession(), target);
  }

  // optional uint32 gm_level = 5;
  if (has_gm_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->gm_level(), target);
  }

  // optional string validateStr = 6;
  if (has_validatestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->validatestr().data(), this->validatestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "validatestr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->validatestr(), target);
  }

  // optional uint32 param1 = 7;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->param1(), target);
  }

  // optional uint32 param2 = 8;
  if (has_param2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->param2(), target);
  }

  // optional uint32 param3 = 9;
  if (has_param3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->param3(), target);
  }

  // optional string param4 = 10;
  if (has_param4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param4().data(), this->param4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "param4");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->param4(), target);
  }

  // optional uint32 param5 = 11;
  if (has_param5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->param5(), target);
  }

  // optional string invkey = 12;
  if (has_invkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invkey().data(), this->invkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->invkey(), target);
  }

  // optional string itime = 13;
  if (has_itime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itime().data(), this->itime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->itime(), target);
  }

  // optional string iopenid = 14;
  if (has_iopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iopenid().data(), this->iopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "iopenid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->iopenid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.cmsg_player_make)
  return target;
}

int cmsg_player_make::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required int32 sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // required int32 profession = 4;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }

    // optional uint32 gm_level = 5;
    if (has_gm_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gm_level());
    }

    // optional string validateStr = 6;
    if (has_validatestr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->validatestr());
    }

    // optional uint32 param1 = 7;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param1());
    }

    // optional uint32 param2 = 8;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param2());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 param3 = 9;
    if (has_param3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param3());
    }

    // optional string param4 = 10;
    if (has_param4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param4());
    }

    // optional uint32 param5 = 11;
    if (has_param5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param5());
    }

    // optional string invkey = 12;
    if (has_invkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invkey());
    }

    // optional string itime = 13;
    if (has_itime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itime());
    }

    // optional string iopenid = 14;
    if (has_iopenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iopenid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cmsg_player_make::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cmsg_player_make* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cmsg_player_make*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cmsg_player_make::MergeFrom(const cmsg_player_make& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_gm_level()) {
      set_gm_level(from.gm_level());
    }
    if (from.has_validatestr()) {
      set_validatestr(from.validatestr());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_param2()) {
      set_param2(from.param2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_param3()) {
      set_param3(from.param3());
    }
    if (from.has_param4()) {
      set_param4(from.param4());
    }
    if (from.has_param5()) {
      set_param5(from.param5());
    }
    if (from.has_invkey()) {
      set_invkey(from.invkey());
    }
    if (from.has_itime()) {
      set_itime(from.itime());
    }
    if (from.has_iopenid()) {
      set_iopenid(from.iopenid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cmsg_player_make::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmsg_player_make::CopyFrom(const cmsg_player_make& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmsg_player_make::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void cmsg_player_make::Swap(cmsg_player_make* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(profession_, other->profession_);
    std::swap(gm_level_, other->gm_level_);
    std::swap(validatestr_, other->validatestr_);
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(param3_, other->param3_);
    std::swap(param4_, other->param4_);
    std::swap(param5_, other->param5_);
    std::swap(invkey_, other->invkey_);
    std::swap(itime_, other->itime_);
    std::swap(iopenid_, other->iopenid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cmsg_player_make::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cmsg_player_make_descriptor_;
  metadata.reflection = cmsg_player_make_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_player_make::kGuidFieldNumber;
const int smsg_player_make::kMapIdFieldNumber;
const int smsg_player_make::kLineIdFieldNumber;
#endif  // !_MSC_VER

smsg_player_make::smsg_player_make()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_player_make)
}

void smsg_player_make::InitAsDefaultInstance() {
}

smsg_player_make::smsg_player_make(const smsg_player_make& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_player_make)
}

void smsg_player_make::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  map_id_ = 0u;
  line_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_player_make::~smsg_player_make() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_player_make)
  SharedDtor();
}

void smsg_player_make::SharedDtor() {
  if (this != default_instance_) {
  }
}

void smsg_player_make::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_player_make::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_player_make_descriptor_;
}

const smsg_player_make& smsg_player_make::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_player_make* smsg_player_make::default_instance_ = NULL;

smsg_player_make* smsg_player_make::New() const {
  return new smsg_player_make;
}

void smsg_player_make::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<smsg_player_make*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(guid_, line_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_player_make::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_player_make)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_map_id;
        break;
      }

      // optional uint32 map_id = 2;
      case 2: {
        if (tag == 16) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_line_id;
        break;
      }

      // optional uint32 line_id = 3;
      case 3: {
        if (tag == 24) {
         parse_line_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &line_id_)));
          set_has_line_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_player_make)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_player_make)
  return false;
#undef DO_
}

void smsg_player_make::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_player_make)
  // required uint64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // optional uint32 map_id = 2;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->map_id(), output);
  }

  // optional uint32 line_id = 3;
  if (has_line_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->line_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_player_make)
}

::google::protobuf::uint8* smsg_player_make::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_player_make)
  // required uint64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // optional uint32 map_id = 2;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->map_id(), target);
  }

  // optional uint32 line_id = 3;
  if (has_line_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->line_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_player_make)
  return target;
}

int smsg_player_make::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional uint32 map_id = 2;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }

    // optional uint32 line_id = 3;
    if (has_line_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->line_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_player_make::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_player_make* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_player_make*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_player_make::MergeFrom(const smsg_player_make& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_line_id()) {
      set_line_id(from.line_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_player_make::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_player_make::CopyFrom(const smsg_player_make& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_player_make::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void smsg_player_make::Swap(smsg_player_make* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(map_id_, other->map_id_);
    std::swap(line_id_, other->line_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_player_make::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_player_make_descriptor_;
  metadata.reflection = smsg_player_make_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cmsg_request_random_name::kSexFieldNumber;
#endif  // !_MSC_VER

cmsg_request_random_name::cmsg_request_random_name()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.cmsg_request_random_name)
}

void cmsg_request_random_name::InitAsDefaultInstance() {
}

cmsg_request_random_name::cmsg_request_random_name(const cmsg_request_random_name& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.cmsg_request_random_name)
}

void cmsg_request_random_name::SharedCtor() {
  _cached_size_ = 0;
  sex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cmsg_request_random_name::~cmsg_request_random_name() {
  // @@protoc_insertion_point(destructor:typed.protocol.cmsg_request_random_name)
  SharedDtor();
}

void cmsg_request_random_name::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cmsg_request_random_name::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cmsg_request_random_name::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cmsg_request_random_name_descriptor_;
}

const cmsg_request_random_name& cmsg_request_random_name::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

cmsg_request_random_name* cmsg_request_random_name::default_instance_ = NULL;

cmsg_request_random_name* cmsg_request_random_name::New() const {
  return new cmsg_request_random_name;
}

void cmsg_request_random_name::Clear() {
  sex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cmsg_request_random_name::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.cmsg_request_random_name)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.cmsg_request_random_name)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.cmsg_request_random_name)
  return false;
#undef DO_
}

void cmsg_request_random_name::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.cmsg_request_random_name)
  // required int32 sex = 1;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.cmsg_request_random_name)
}

::google::protobuf::uint8* cmsg_request_random_name::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.cmsg_request_random_name)
  // required int32 sex = 1;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.cmsg_request_random_name)
  return target;
}

int cmsg_request_random_name::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sex = 1;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cmsg_request_random_name::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cmsg_request_random_name* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cmsg_request_random_name*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cmsg_request_random_name::MergeFrom(const cmsg_request_random_name& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cmsg_request_random_name::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmsg_request_random_name::CopyFrom(const cmsg_request_random_name& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmsg_request_random_name::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void cmsg_request_random_name::Swap(cmsg_request_random_name* other) {
  if (other != this) {
    std::swap(sex_, other->sex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cmsg_request_random_name::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cmsg_request_random_name_descriptor_;
  metadata.reflection = cmsg_request_random_name_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_request_random_name::kRandomNameFieldNumber;
#endif  // !_MSC_VER

smsg_request_random_name::smsg_request_random_name()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_request_random_name)
}

void smsg_request_random_name::InitAsDefaultInstance() {
}

smsg_request_random_name::smsg_request_random_name(const smsg_request_random_name& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_request_random_name)
}

void smsg_request_random_name::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  random_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_request_random_name::~smsg_request_random_name() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_request_random_name)
  SharedDtor();
}

void smsg_request_random_name::SharedDtor() {
  if (random_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete random_name_;
  }
  if (this != default_instance_) {
  }
}

void smsg_request_random_name::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_request_random_name::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_request_random_name_descriptor_;
}

const smsg_request_random_name& smsg_request_random_name::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_request_random_name* smsg_request_random_name::default_instance_ = NULL;

smsg_request_random_name* smsg_request_random_name::New() const {
  return new smsg_request_random_name;
}

void smsg_request_random_name::Clear() {
  if (has_random_name()) {
    if (random_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      random_name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_request_random_name::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_request_random_name)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string random_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_random_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->random_name().data(), this->random_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "random_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_request_random_name)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_request_random_name)
  return false;
#undef DO_
}

void smsg_request_random_name::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_request_random_name)
  // required string random_name = 1;
  if (has_random_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->random_name().data(), this->random_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "random_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->random_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_request_random_name)
}

::google::protobuf::uint8* smsg_request_random_name::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_request_random_name)
  // required string random_name = 1;
  if (has_random_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->random_name().data(), this->random_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "random_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->random_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_request_random_name)
  return target;
}

int smsg_request_random_name::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string random_name = 1;
    if (has_random_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->random_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_request_random_name::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_request_random_name* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_request_random_name*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_request_random_name::MergeFrom(const smsg_request_random_name& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_random_name()) {
      set_random_name(from.random_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_request_random_name::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_request_random_name::CopyFrom(const smsg_request_random_name& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_request_random_name::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void smsg_request_random_name::Swap(smsg_request_random_name* other) {
  if (other != this) {
    std::swap(random_name_, other->random_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_request_random_name::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_request_random_name_descriptor_;
  metadata.reflection = smsg_request_random_name_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cmsg_request_player_list::kAccountIdFieldNumber;
#endif  // !_MSC_VER

cmsg_request_player_list::cmsg_request_player_list()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.cmsg_request_player_list)
}

void cmsg_request_player_list::InitAsDefaultInstance() {
}

cmsg_request_player_list::cmsg_request_player_list(const cmsg_request_player_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.cmsg_request_player_list)
}

void cmsg_request_player_list::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cmsg_request_player_list::~cmsg_request_player_list() {
  // @@protoc_insertion_point(destructor:typed.protocol.cmsg_request_player_list)
  SharedDtor();
}

void cmsg_request_player_list::SharedDtor() {
  if (account_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_id_;
  }
  if (this != default_instance_) {
  }
}

void cmsg_request_player_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cmsg_request_player_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cmsg_request_player_list_descriptor_;
}

const cmsg_request_player_list& cmsg_request_player_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

cmsg_request_player_list* cmsg_request_player_list::default_instance_ = NULL;

cmsg_request_player_list* cmsg_request_player_list::New() const {
  return new cmsg_request_player_list;
}

void cmsg_request_player_list::Clear() {
  if (has_account_id()) {
    if (account_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      account_id_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cmsg_request_player_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.cmsg_request_player_list)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string account_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account_id().data(), this->account_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.cmsg_request_player_list)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.cmsg_request_player_list)
  return false;
#undef DO_
}

void cmsg_request_player_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.cmsg_request_player_list)
  // required string account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_id().data(), this->account_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.cmsg_request_player_list)
}

::google::protobuf::uint8* cmsg_request_player_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.cmsg_request_player_list)
  // required string account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_id().data(), this->account_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.cmsg_request_player_list)
  return target;
}

int cmsg_request_player_list::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cmsg_request_player_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cmsg_request_player_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cmsg_request_player_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cmsg_request_player_list::MergeFrom(const cmsg_request_player_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cmsg_request_player_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmsg_request_player_list::CopyFrom(const cmsg_request_player_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmsg_request_player_list::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void cmsg_request_player_list::Swap(cmsg_request_player_list* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cmsg_request_player_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cmsg_request_player_list_descriptor_;
  metadata.reflection = cmsg_request_player_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_request_one_player::kGuidFieldNumber;
const int smsg_request_one_player::kNameFieldNumber;
const int smsg_request_one_player::kProfessionFieldNumber;
const int smsg_request_one_player::kSexFieldNumber;
const int smsg_request_one_player::kLevelFieldNumber;
const int smsg_request_one_player::kMapIdFieldNumber;
const int smsg_request_one_player::kLineIdFieldNumber;
#endif  // !_MSC_VER

smsg_request_one_player::smsg_request_one_player()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_request_one_player)
}

void smsg_request_one_player::InitAsDefaultInstance() {
}

smsg_request_one_player::smsg_request_one_player(const smsg_request_one_player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_request_one_player)
}

void smsg_request_one_player::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  profession_ = 0;
  sex_ = 0;
  level_ = 0;
  map_id_ = 0u;
  line_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_request_one_player::~smsg_request_one_player() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_request_one_player)
  SharedDtor();
}

void smsg_request_one_player::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void smsg_request_one_player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_request_one_player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_request_one_player_descriptor_;
}

const smsg_request_one_player& smsg_request_one_player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_request_one_player* smsg_request_one_player::default_instance_ = NULL;

smsg_request_one_player* smsg_request_one_player::New() const {
  return new smsg_request_one_player;
}

void smsg_request_one_player::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<smsg_request_one_player*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(profession_, line_id_);
    guid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_request_one_player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_request_one_player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_profession;
        break;
      }

      // required int32 profession = 3;
      case 3: {
        if (tag == 24) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }

      // required int32 sex = 4;
      case 4: {
        if (tag == 32) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // required int32 level = 5;
      case 5: {
        if (tag == 40) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_map_id;
        break;
      }

      // optional uint32 map_id = 6;
      case 6: {
        if (tag == 48) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_line_id;
        break;
      }

      // optional uint32 line_id = 7;
      case 7: {
        if (tag == 56) {
         parse_line_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &line_id_)));
          set_has_line_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_request_one_player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_request_one_player)
  return false;
#undef DO_
}

void smsg_request_one_player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_request_one_player)
  // required uint64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // required int32 profession = 3;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->profession(), output);
  }

  // required int32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sex(), output);
  }

  // required int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // optional uint32 map_id = 6;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->map_id(), output);
  }

  // optional uint32 line_id = 7;
  if (has_line_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->line_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_request_one_player)
}

::google::protobuf::uint8* smsg_request_one_player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_request_one_player)
  // required uint64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required int32 profession = 3;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->profession(), target);
  }

  // required int32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sex(), target);
  }

  // required int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  // optional uint32 map_id = 6;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->map_id(), target);
  }

  // optional uint32 line_id = 7;
  if (has_line_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->line_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_request_one_player)
  return target;
}

int smsg_request_one_player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required int32 profession = 3;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }

    // required int32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // required int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional uint32 map_id = 6;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }

    // optional uint32 line_id = 7;
    if (has_line_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->line_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_request_one_player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_request_one_player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_request_one_player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_request_one_player::MergeFrom(const smsg_request_one_player& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_line_id()) {
      set_line_id(from.line_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_request_one_player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_request_one_player::CopyFrom(const smsg_request_one_player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_request_one_player::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void smsg_request_one_player::Swap(smsg_request_one_player* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(name_, other->name_);
    std::swap(profession_, other->profession_);
    std::swap(sex_, other->sex_);
    std::swap(level_, other->level_);
    std::swap(map_id_, other->map_id_);
    std::swap(line_id_, other->line_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_request_one_player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_request_one_player_descriptor_;
  metadata.reflection = smsg_request_one_player_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_request_player_list::kPlayerNumFieldNumber;
const int smsg_request_player_list::kPlayerListFieldNumber;
#endif  // !_MSC_VER

smsg_request_player_list::smsg_request_player_list()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_request_player_list)
}

void smsg_request_player_list::InitAsDefaultInstance() {
}

smsg_request_player_list::smsg_request_player_list(const smsg_request_player_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_request_player_list)
}

void smsg_request_player_list::SharedCtor() {
  _cached_size_ = 0;
  player_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_request_player_list::~smsg_request_player_list() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_request_player_list)
  SharedDtor();
}

void smsg_request_player_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void smsg_request_player_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_request_player_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_request_player_list_descriptor_;
}

const smsg_request_player_list& smsg_request_player_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_request_player_list* smsg_request_player_list::default_instance_ = NULL;

smsg_request_player_list* smsg_request_player_list::New() const {
  return new smsg_request_player_list;
}

void smsg_request_player_list::Clear() {
  player_num_ = 0;
  player_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_request_player_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_request_player_list)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 player_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_num_)));
          set_has_player_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player_list;
        break;
      }

      // repeated .typed.protocol.smsg_request_one_player player_list = 2;
      case 2: {
        if (tag == 18) {
         parse_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_request_player_list)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_request_player_list)
  return false;
#undef DO_
}

void smsg_request_player_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_request_player_list)
  // required int32 player_num = 1;
  if (has_player_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_num(), output);
  }

  // repeated .typed.protocol.smsg_request_one_player player_list = 2;
  for (int i = 0; i < this->player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_request_player_list)
}

::google::protobuf::uint8* smsg_request_player_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_request_player_list)
  // required int32 player_num = 1;
  if (has_player_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_num(), target);
  }

  // repeated .typed.protocol.smsg_request_one_player player_list = 2;
  for (int i = 0; i < this->player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_request_player_list)
  return target;
}

int smsg_request_player_list::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 player_num = 1;
    if (has_player_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_num());
    }

  }
  // repeated .typed.protocol.smsg_request_one_player player_list = 2;
  total_size += 1 * this->player_list_size();
  for (int i = 0; i < this->player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_request_player_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_request_player_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_request_player_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_request_player_list::MergeFrom(const smsg_request_player_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_list_.MergeFrom(from.player_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_num()) {
      set_player_num(from.player_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_request_player_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_request_player_list::CopyFrom(const smsg_request_player_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_request_player_list::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->player_list())) return false;
  return true;
}

void smsg_request_player_list::Swap(smsg_request_player_list* other) {
  if (other != this) {
    std::swap(player_num_, other->player_num_);
    player_list_.Swap(&other->player_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_request_player_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_request_player_list_descriptor_;
  metadata.reflection = smsg_request_player_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cmsg_player_delete::kGuidFieldNumber;
#endif  // !_MSC_VER

cmsg_player_delete::cmsg_player_delete()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.cmsg_player_delete)
}

void cmsg_player_delete::InitAsDefaultInstance() {
}

cmsg_player_delete::cmsg_player_delete(const cmsg_player_delete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.cmsg_player_delete)
}

void cmsg_player_delete::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cmsg_player_delete::~cmsg_player_delete() {
  // @@protoc_insertion_point(destructor:typed.protocol.cmsg_player_delete)
  SharedDtor();
}

void cmsg_player_delete::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cmsg_player_delete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cmsg_player_delete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cmsg_player_delete_descriptor_;
}

const cmsg_player_delete& cmsg_player_delete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

cmsg_player_delete* cmsg_player_delete::default_instance_ = NULL;

cmsg_player_delete* cmsg_player_delete::New() const {
  return new cmsg_player_delete;
}

void cmsg_player_delete::Clear() {
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cmsg_player_delete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.cmsg_player_delete)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.cmsg_player_delete)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.cmsg_player_delete)
  return false;
#undef DO_
}

void cmsg_player_delete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.cmsg_player_delete)
  // required uint64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.cmsg_player_delete)
}

::google::protobuf::uint8* cmsg_player_delete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.cmsg_player_delete)
  // required uint64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.cmsg_player_delete)
  return target;
}

int cmsg_player_delete::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cmsg_player_delete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cmsg_player_delete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cmsg_player_delete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cmsg_player_delete::MergeFrom(const cmsg_player_delete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cmsg_player_delete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmsg_player_delete::CopyFrom(const cmsg_player_delete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmsg_player_delete::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void cmsg_player_delete::Swap(cmsg_player_delete* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cmsg_player_delete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cmsg_player_delete_descriptor_;
  metadata.reflection = cmsg_player_delete_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_player_delete::kGuidFieldNumber;
#endif  // !_MSC_VER

smsg_player_delete::smsg_player_delete()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_player_delete)
}

void smsg_player_delete::InitAsDefaultInstance() {
}

smsg_player_delete::smsg_player_delete(const smsg_player_delete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_player_delete)
}

void smsg_player_delete::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_player_delete::~smsg_player_delete() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_player_delete)
  SharedDtor();
}

void smsg_player_delete::SharedDtor() {
  if (this != default_instance_) {
  }
}

void smsg_player_delete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_player_delete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_player_delete_descriptor_;
}

const smsg_player_delete& smsg_player_delete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_player_delete* smsg_player_delete::default_instance_ = NULL;

smsg_player_delete* smsg_player_delete::New() const {
  return new smsg_player_delete;
}

void smsg_player_delete::Clear() {
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_player_delete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_player_delete)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_player_delete)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_player_delete)
  return false;
#undef DO_
}

void smsg_player_delete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_player_delete)
  // required uint64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_player_delete)
}

::google::protobuf::uint8* smsg_player_delete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_player_delete)
  // required uint64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_player_delete)
  return target;
}

int smsg_player_delete::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_player_delete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_player_delete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_player_delete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_player_delete::MergeFrom(const smsg_player_delete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_player_delete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_player_delete::CopyFrom(const smsg_player_delete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_player_delete::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void smsg_player_delete::Swap(smsg_player_delete* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_player_delete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_player_delete_descriptor_;
  metadata.reflection = smsg_player_delete_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_create_other::kGuidFieldNumber;
const int smsg_create_other::kRoleIdFieldNumber;
const int smsg_create_other::kNameFieldNumber;
const int smsg_create_other::kLevelFieldNumber;
const int smsg_create_other::kSexFieldNumber;
const int smsg_create_other::kSrcXFieldNumber;
const int smsg_create_other::kSrcYFieldNumber;
const int smsg_create_other::kDstXFieldNumber;
const int smsg_create_other::kDstYFieldNumber;
const int smsg_create_other::kDirectionFieldNumber;
const int smsg_create_other::kFirstRoleFieldNumber;
const int smsg_create_other::kFlowerRankFieldNumber;
const int smsg_create_other::kGuildNameFieldNumber;
const int smsg_create_other::kGuildIconFieldNumber;
const int smsg_create_other::kFollowRoleIdFieldNumber;
const int smsg_create_other::kCurrentTitleFieldNumber;
const int smsg_create_other::kSpecialRightFieldNumber;
const int smsg_create_other::kHorseIdFieldNumber;
const int smsg_create_other::kWifeFollowFieldNumber;
const int smsg_create_other::kYellowVipLevelFieldNumber;
const int smsg_create_other::kIsYellowVipFieldNumber;
const int smsg_create_other::kIsYellowYearVipFieldNumber;
const int smsg_create_other::kIsYellowHighVipFieldNumber;
#endif  // !_MSC_VER

smsg_create_other::smsg_create_other()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_create_other)
}

void smsg_create_other::InitAsDefaultInstance() {
}

smsg_create_other::smsg_create_other(const smsg_create_other& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_create_other)
}

void smsg_create_other::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  role_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0;
  sex_ = 0;
  src_x_ = 0;
  src_y_ = 0;
  dst_x_ = 0;
  dst_y_ = 0;
  direction_ = 0;
  first_role_ = GOOGLE_ULONGLONG(0);
  flower_rank_ = 0u;
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_icon_ = 0u;
  follow_role_id_ = 0u;
  special_right_ = 0u;
  horse_id_ = 0u;
  wife_follow_ = 0u;
  yellow_vip_level_ = 0u;
  is_yellow_vip_ = 0u;
  is_yellow_year_vip_ = 0u;
  is_yellow_high_vip_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_create_other::~smsg_create_other() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_create_other)
  SharedDtor();
}

void smsg_create_other::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (guild_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guild_name_;
  }
  if (this != default_instance_) {
  }
}

void smsg_create_other::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_create_other::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_create_other_descriptor_;
}

const smsg_create_other& smsg_create_other::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_create_other* smsg_create_other::default_instance_ = NULL;

smsg_create_other* smsg_create_other::New() const {
  return new smsg_create_other;
}

void smsg_create_other::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<smsg_create_other*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(role_id_, dst_x_);
    guid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(dst_y_, first_role_);
    ZR_(flower_rank_, guild_icon_);
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guild_name_->clear();
      }
    }
    follow_role_id_ = 0u;
  }
  if (_has_bits_[16 / 32] & 8323072) {
    ZR_(special_right_, is_yellow_high_vip_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  current_title_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_create_other::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_create_other)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // required uint32 role_id = 2;
      case 2: {
        if (tag == 16) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional bytes name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (tag == 32) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional int32 sex = 5;
      case 5: {
        if (tag == 40) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_src_x;
        break;
      }

      // optional float src_x = 6;
      case 6: {
        if (tag == 53) {
         parse_src_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &src_x_)));
          set_has_src_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_src_y;
        break;
      }

      // optional float src_y = 7;
      case 7: {
        if (tag == 61) {
         parse_src_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &src_y_)));
          set_has_src_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_dst_x;
        break;
      }

      // optional float dst_x = 8;
      case 8: {
        if (tag == 69) {
         parse_dst_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dst_x_)));
          set_has_dst_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_dst_y;
        break;
      }

      // optional float dst_y = 9;
      case 9: {
        if (tag == 77) {
         parse_dst_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dst_y_)));
          set_has_dst_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_direction;
        break;
      }

      // optional int32 direction = 10;
      case 10: {
        if (tag == 80) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_first_role;
        break;
      }

      // optional uint64 first_role = 11;
      case 11: {
        if (tag == 88) {
         parse_first_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &first_role_)));
          set_has_first_role();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_flower_rank;
        break;
      }

      // optional uint32 flower_rank = 12;
      case 12: {
        if (tag == 96) {
         parse_flower_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flower_rank_)));
          set_has_flower_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_guild_name;
        break;
      }

      // optional string guild_name = 13;
      case 13: {
        if (tag == 106) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guild_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_guild_icon;
        break;
      }

      // optional uint32 guild_icon = 14;
      case 14: {
        if (tag == 112) {
         parse_guild_icon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_icon_)));
          set_has_guild_icon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_follow_role_id;
        break;
      }

      // optional uint32 follow_role_id = 15;
      case 15: {
        if (tag == 120) {
         parse_follow_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &follow_role_id_)));
          set_has_follow_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_current_title;
        break;
      }

      // repeated uint32 current_title = 16;
      case 16: {
        if (tag == 128) {
         parse_current_title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 128, input, this->mutable_current_title())));
        } else if (tag == 130) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_current_title())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_current_title;
        if (input->ExpectTag(136)) goto parse_special_right;
        break;
      }

      // optional uint32 special_right = 17;
      case 17: {
        if (tag == 136) {
         parse_special_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &special_right_)));
          set_has_special_right();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_horse_id;
        break;
      }

      // optional uint32 horse_id = 18;
      case 18: {
        if (tag == 144) {
         parse_horse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &horse_id_)));
          set_has_horse_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_wife_follow;
        break;
      }

      // optional uint32 wife_follow = 19;
      case 19: {
        if (tag == 152) {
         parse_wife_follow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wife_follow_)));
          set_has_wife_follow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_yellow_vip_level;
        break;
      }

      // optional uint32 yellow_vip_level = 20;
      case 20: {
        if (tag == 160) {
         parse_yellow_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yellow_vip_level_)));
          set_has_yellow_vip_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_is_yellow_vip;
        break;
      }

      // optional uint32 is_yellow_vip = 21;
      case 21: {
        if (tag == 168) {
         parse_is_yellow_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_yellow_vip_)));
          set_has_is_yellow_vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_is_yellow_year_vip;
        break;
      }

      // optional uint32 is_yellow_year_vip = 22;
      case 22: {
        if (tag == 176) {
         parse_is_yellow_year_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_yellow_year_vip_)));
          set_has_is_yellow_year_vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_is_yellow_high_vip;
        break;
      }

      // optional uint32 is_yellow_high_vip = 23;
      case 23: {
        if (tag == 184) {
         parse_is_yellow_high_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_yellow_high_vip_)));
          set_has_is_yellow_high_vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_create_other)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_create_other)
  return false;
#undef DO_
}

void smsg_create_other::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_create_other)
  // required uint64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  // optional bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->name(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // optional int32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sex(), output);
  }

  // optional float src_x = 6;
  if (has_src_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->src_x(), output);
  }

  // optional float src_y = 7;
  if (has_src_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->src_y(), output);
  }

  // optional float dst_x = 8;
  if (has_dst_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->dst_x(), output);
  }

  // optional float dst_y = 9;
  if (has_dst_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->dst_y(), output);
  }

  // optional int32 direction = 10;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->direction(), output);
  }

  // optional uint64 first_role = 11;
  if (has_first_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->first_role(), output);
  }

  // optional uint32 flower_rank = 12;
  if (has_flower_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->flower_rank(), output);
  }

  // optional string guild_name = 13;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guild_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->guild_name(), output);
  }

  // optional uint32 guild_icon = 14;
  if (has_guild_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->guild_icon(), output);
  }

  // optional uint32 follow_role_id = 15;
  if (has_follow_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->follow_role_id(), output);
  }

  // repeated uint32 current_title = 16;
  for (int i = 0; i < this->current_title_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      16, this->current_title(i), output);
  }

  // optional uint32 special_right = 17;
  if (has_special_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->special_right(), output);
  }

  // optional uint32 horse_id = 18;
  if (has_horse_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->horse_id(), output);
  }

  // optional uint32 wife_follow = 19;
  if (has_wife_follow()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->wife_follow(), output);
  }

  // optional uint32 yellow_vip_level = 20;
  if (has_yellow_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->yellow_vip_level(), output);
  }

  // optional uint32 is_yellow_vip = 21;
  if (has_is_yellow_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->is_yellow_vip(), output);
  }

  // optional uint32 is_yellow_year_vip = 22;
  if (has_is_yellow_year_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->is_yellow_year_vip(), output);
  }

  // optional uint32 is_yellow_high_vip = 23;
  if (has_is_yellow_high_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->is_yellow_high_vip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_create_other)
}

::google::protobuf::uint8* smsg_create_other::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_create_other)
  // required uint64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  // optional bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // optional int32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sex(), target);
  }

  // optional float src_x = 6;
  if (has_src_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->src_x(), target);
  }

  // optional float src_y = 7;
  if (has_src_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->src_y(), target);
  }

  // optional float dst_x = 8;
  if (has_dst_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->dst_x(), target);
  }

  // optional float dst_y = 9;
  if (has_dst_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->dst_y(), target);
  }

  // optional int32 direction = 10;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->direction(), target);
  }

  // optional uint64 first_role = 11;
  if (has_first_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->first_role(), target);
  }

  // optional uint32 flower_rank = 12;
  if (has_flower_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->flower_rank(), target);
  }

  // optional string guild_name = 13;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guild_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->guild_name(), target);
  }

  // optional uint32 guild_icon = 14;
  if (has_guild_icon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->guild_icon(), target);
  }

  // optional uint32 follow_role_id = 15;
  if (has_follow_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->follow_role_id(), target);
  }

  // repeated uint32 current_title = 16;
  for (int i = 0; i < this->current_title_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(16, this->current_title(i), target);
  }

  // optional uint32 special_right = 17;
  if (has_special_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->special_right(), target);
  }

  // optional uint32 horse_id = 18;
  if (has_horse_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->horse_id(), target);
  }

  // optional uint32 wife_follow = 19;
  if (has_wife_follow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->wife_follow(), target);
  }

  // optional uint32 yellow_vip_level = 20;
  if (has_yellow_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->yellow_vip_level(), target);
  }

  // optional uint32 is_yellow_vip = 21;
  if (has_is_yellow_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->is_yellow_vip(), target);
  }

  // optional uint32 is_yellow_year_vip = 22;
  if (has_is_yellow_year_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->is_yellow_year_vip(), target);
  }

  // optional uint32 is_yellow_high_vip = 23;
  if (has_is_yellow_high_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->is_yellow_high_vip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_create_other)
  return target;
}

int smsg_create_other::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // required uint32 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional float src_x = 6;
    if (has_src_x()) {
      total_size += 1 + 4;
    }

    // optional float src_y = 7;
    if (has_src_y()) {
      total_size += 1 + 4;
    }

    // optional float dst_x = 8;
    if (has_dst_x()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float dst_y = 9;
    if (has_dst_y()) {
      total_size += 1 + 4;
    }

    // optional int32 direction = 10;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->direction());
    }

    // optional uint64 first_role = 11;
    if (has_first_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->first_role());
    }

    // optional uint32 flower_rank = 12;
    if (has_flower_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flower_rank());
    }

    // optional string guild_name = 13;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }

    // optional uint32 guild_icon = 14;
    if (has_guild_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_icon());
    }

    // optional uint32 follow_role_id = 15;
    if (has_follow_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->follow_role_id());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 special_right = 17;
    if (has_special_right()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->special_right());
    }

    // optional uint32 horse_id = 18;
    if (has_horse_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->horse_id());
    }

    // optional uint32 wife_follow = 19;
    if (has_wife_follow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wife_follow());
    }

    // optional uint32 yellow_vip_level = 20;
    if (has_yellow_vip_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yellow_vip_level());
    }

    // optional uint32 is_yellow_vip = 21;
    if (has_is_yellow_vip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_yellow_vip());
    }

    // optional uint32 is_yellow_year_vip = 22;
    if (has_is_yellow_year_vip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_yellow_year_vip());
    }

    // optional uint32 is_yellow_high_vip = 23;
    if (has_is_yellow_high_vip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_yellow_high_vip());
    }

  }
  // repeated uint32 current_title = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->current_title_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->current_title(i));
    }
    total_size += 2 * this->current_title_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_create_other::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_create_other* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_create_other*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_create_other::MergeFrom(const smsg_create_other& from) {
  GOOGLE_CHECK_NE(&from, this);
  current_title_.MergeFrom(from.current_title_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_src_x()) {
      set_src_x(from.src_x());
    }
    if (from.has_src_y()) {
      set_src_y(from.src_y());
    }
    if (from.has_dst_x()) {
      set_dst_x(from.dst_x());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dst_y()) {
      set_dst_y(from.dst_y());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_first_role()) {
      set_first_role(from.first_role());
    }
    if (from.has_flower_rank()) {
      set_flower_rank(from.flower_rank());
    }
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
    if (from.has_guild_icon()) {
      set_guild_icon(from.guild_icon());
    }
    if (from.has_follow_role_id()) {
      set_follow_role_id(from.follow_role_id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_special_right()) {
      set_special_right(from.special_right());
    }
    if (from.has_horse_id()) {
      set_horse_id(from.horse_id());
    }
    if (from.has_wife_follow()) {
      set_wife_follow(from.wife_follow());
    }
    if (from.has_yellow_vip_level()) {
      set_yellow_vip_level(from.yellow_vip_level());
    }
    if (from.has_is_yellow_vip()) {
      set_is_yellow_vip(from.is_yellow_vip());
    }
    if (from.has_is_yellow_year_vip()) {
      set_is_yellow_year_vip(from.is_yellow_year_vip());
    }
    if (from.has_is_yellow_high_vip()) {
      set_is_yellow_high_vip(from.is_yellow_high_vip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_create_other::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_create_other::CopyFrom(const smsg_create_other& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_create_other::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void smsg_create_other::Swap(smsg_create_other* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(role_id_, other->role_id_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(sex_, other->sex_);
    std::swap(src_x_, other->src_x_);
    std::swap(src_y_, other->src_y_);
    std::swap(dst_x_, other->dst_x_);
    std::swap(dst_y_, other->dst_y_);
    std::swap(direction_, other->direction_);
    std::swap(first_role_, other->first_role_);
    std::swap(flower_rank_, other->flower_rank_);
    std::swap(guild_name_, other->guild_name_);
    std::swap(guild_icon_, other->guild_icon_);
    std::swap(follow_role_id_, other->follow_role_id_);
    current_title_.Swap(&other->current_title_);
    std::swap(special_right_, other->special_right_);
    std::swap(horse_id_, other->horse_id_);
    std::swap(wife_follow_, other->wife_follow_);
    std::swap(yellow_vip_level_, other->yellow_vip_level_);
    std::swap(is_yellow_vip_, other->is_yellow_vip_);
    std::swap(is_yellow_year_vip_, other->is_yellow_year_vip_);
    std::swap(is_yellow_high_vip_, other->is_yellow_high_vip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_create_other::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_create_other_descriptor_;
  metadata.reflection = smsg_create_other_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_player_remove::kGuidFieldNumber;
#endif  // !_MSC_VER

smsg_player_remove::smsg_player_remove()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_player_remove)
}

void smsg_player_remove::InitAsDefaultInstance() {
}

smsg_player_remove::smsg_player_remove(const smsg_player_remove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_player_remove)
}

void smsg_player_remove::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_player_remove::~smsg_player_remove() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_player_remove)
  SharedDtor();
}

void smsg_player_remove::SharedDtor() {
  if (this != default_instance_) {
  }
}

void smsg_player_remove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_player_remove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_player_remove_descriptor_;
}

const smsg_player_remove& smsg_player_remove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_player_remove* smsg_player_remove::default_instance_ = NULL;

smsg_player_remove* smsg_player_remove::New() const {
  return new smsg_player_remove;
}

void smsg_player_remove::Clear() {
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_player_remove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_player_remove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_player_remove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_player_remove)
  return false;
#undef DO_
}

void smsg_player_remove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_player_remove)
  // required uint64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_player_remove)
}

::google::protobuf::uint8* smsg_player_remove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_player_remove)
  // required uint64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_player_remove)
  return target;
}

int smsg_player_remove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_player_remove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_player_remove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_player_remove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_player_remove::MergeFrom(const smsg_player_remove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_player_remove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_player_remove::CopyFrom(const smsg_player_remove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_player_remove::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void smsg_player_remove::Swap(smsg_player_remove* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_player_remove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_player_remove_descriptor_;
  metadata.reflection = smsg_player_remove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cmsg_validate_account::kAccountIdFieldNumber;
const int cmsg_validate_account::kSessionIdFieldNumber;
#endif  // !_MSC_VER

cmsg_validate_account::cmsg_validate_account()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.cmsg_validate_account)
}

void cmsg_validate_account::InitAsDefaultInstance() {
}

cmsg_validate_account::cmsg_validate_account(const cmsg_validate_account& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.cmsg_validate_account)
}

void cmsg_validate_account::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cmsg_validate_account::~cmsg_validate_account() {
  // @@protoc_insertion_point(destructor:typed.protocol.cmsg_validate_account)
  SharedDtor();
}

void cmsg_validate_account::SharedDtor() {
  if (account_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_id_;
  }
  if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete session_id_;
  }
  if (this != default_instance_) {
  }
}

void cmsg_validate_account::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cmsg_validate_account::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cmsg_validate_account_descriptor_;
}

const cmsg_validate_account& cmsg_validate_account::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

cmsg_validate_account* cmsg_validate_account::default_instance_ = NULL;

cmsg_validate_account* cmsg_validate_account::New() const {
  return new cmsg_validate_account;
}

void cmsg_validate_account::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_account_id()) {
      if (account_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_id_->clear();
      }
    }
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        session_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cmsg_validate_account::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.cmsg_validate_account)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string account_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account_id().data(), this->account_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_session_id;
        break;
      }

      // required bytes session_id = 2;
      case 2: {
        if (tag == 18) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_session_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.cmsg_validate_account)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.cmsg_validate_account)
  return false;
#undef DO_
}

void cmsg_validate_account::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.cmsg_validate_account)
  // required string account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_id().data(), this->account_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account_id(), output);
  }

  // required bytes session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->session_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.cmsg_validate_account)
}

::google::protobuf::uint8* cmsg_validate_account::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.cmsg_validate_account)
  // required string account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_id().data(), this->account_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account_id(), target);
  }

  // required bytes session_id = 2;
  if (has_session_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->session_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.cmsg_validate_account)
  return target;
}

int cmsg_validate_account::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_id());
    }

    // required bytes session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->session_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cmsg_validate_account::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cmsg_validate_account* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cmsg_validate_account*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cmsg_validate_account::MergeFrom(const cmsg_validate_account& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cmsg_validate_account::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmsg_validate_account::CopyFrom(const cmsg_validate_account& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmsg_validate_account::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void cmsg_validate_account::Swap(cmsg_validate_account* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(session_id_, other->session_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cmsg_validate_account::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cmsg_validate_account_descriptor_;
  metadata.reflection = cmsg_validate_account_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cmsg_player_enter_map::kGuidFieldNumber;
const int cmsg_player_enter_map::kMapIdFieldNumber;
const int cmsg_player_enter_map::kLineIdFieldNumber;
#endif  // !_MSC_VER

cmsg_player_enter_map::cmsg_player_enter_map()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.cmsg_player_enter_map)
}

void cmsg_player_enter_map::InitAsDefaultInstance() {
}

cmsg_player_enter_map::cmsg_player_enter_map(const cmsg_player_enter_map& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.cmsg_player_enter_map)
}

void cmsg_player_enter_map::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  map_id_ = 0u;
  line_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cmsg_player_enter_map::~cmsg_player_enter_map() {
  // @@protoc_insertion_point(destructor:typed.protocol.cmsg_player_enter_map)
  SharedDtor();
}

void cmsg_player_enter_map::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cmsg_player_enter_map::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cmsg_player_enter_map::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cmsg_player_enter_map_descriptor_;
}

const cmsg_player_enter_map& cmsg_player_enter_map::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

cmsg_player_enter_map* cmsg_player_enter_map::default_instance_ = NULL;

cmsg_player_enter_map* cmsg_player_enter_map::New() const {
  return new cmsg_player_enter_map;
}

void cmsg_player_enter_map::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<cmsg_player_enter_map*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(guid_, line_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cmsg_player_enter_map::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.cmsg_player_enter_map)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_map_id;
        break;
      }

      // optional uint32 map_id = 2;
      case 2: {
        if (tag == 16) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_line_id;
        break;
      }

      // optional uint32 line_id = 3;
      case 3: {
        if (tag == 24) {
         parse_line_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &line_id_)));
          set_has_line_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.cmsg_player_enter_map)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.cmsg_player_enter_map)
  return false;
#undef DO_
}

void cmsg_player_enter_map::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.cmsg_player_enter_map)
  // required uint64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // optional uint32 map_id = 2;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->map_id(), output);
  }

  // optional uint32 line_id = 3;
  if (has_line_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->line_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.cmsg_player_enter_map)
}

::google::protobuf::uint8* cmsg_player_enter_map::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.cmsg_player_enter_map)
  // required uint64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // optional uint32 map_id = 2;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->map_id(), target);
  }

  // optional uint32 line_id = 3;
  if (has_line_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->line_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.cmsg_player_enter_map)
  return target;
}

int cmsg_player_enter_map::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional uint32 map_id = 2;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }

    // optional uint32 line_id = 3;
    if (has_line_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->line_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cmsg_player_enter_map::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cmsg_player_enter_map* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cmsg_player_enter_map*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cmsg_player_enter_map::MergeFrom(const cmsg_player_enter_map& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_line_id()) {
      set_line_id(from.line_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cmsg_player_enter_map::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmsg_player_enter_map::CopyFrom(const cmsg_player_enter_map& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmsg_player_enter_map::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void cmsg_player_enter_map::Swap(cmsg_player_enter_map* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(map_id_, other->map_id_);
    std::swap(line_id_, other->line_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cmsg_player_enter_map::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cmsg_player_enter_map_descriptor_;
  metadata.reflection = cmsg_player_enter_map_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cmsg_player_leave_map::kLeaveTypeFieldNumber;
#endif  // !_MSC_VER

cmsg_player_leave_map::cmsg_player_leave_map()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.cmsg_player_leave_map)
}

void cmsg_player_leave_map::InitAsDefaultInstance() {
}

cmsg_player_leave_map::cmsg_player_leave_map(const cmsg_player_leave_map& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.cmsg_player_leave_map)
}

void cmsg_player_leave_map::SharedCtor() {
  _cached_size_ = 0;
  leave_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cmsg_player_leave_map::~cmsg_player_leave_map() {
  // @@protoc_insertion_point(destructor:typed.protocol.cmsg_player_leave_map)
  SharedDtor();
}

void cmsg_player_leave_map::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cmsg_player_leave_map::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cmsg_player_leave_map::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cmsg_player_leave_map_descriptor_;
}

const cmsg_player_leave_map& cmsg_player_leave_map::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

cmsg_player_leave_map* cmsg_player_leave_map::default_instance_ = NULL;

cmsg_player_leave_map* cmsg_player_leave_map::New() const {
  return new cmsg_player_leave_map;
}

void cmsg_player_leave_map::Clear() {
  leave_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cmsg_player_leave_map::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.cmsg_player_leave_map)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 leave_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leave_type_)));
          set_has_leave_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.cmsg_player_leave_map)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.cmsg_player_leave_map)
  return false;
#undef DO_
}

void cmsg_player_leave_map::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.cmsg_player_leave_map)
  // required int32 leave_type = 1;
  if (has_leave_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->leave_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.cmsg_player_leave_map)
}

::google::protobuf::uint8* cmsg_player_leave_map::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.cmsg_player_leave_map)
  // required int32 leave_type = 1;
  if (has_leave_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->leave_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.cmsg_player_leave_map)
  return target;
}

int cmsg_player_leave_map::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 leave_type = 1;
    if (has_leave_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leave_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cmsg_player_leave_map::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cmsg_player_leave_map* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cmsg_player_leave_map*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cmsg_player_leave_map::MergeFrom(const cmsg_player_leave_map& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leave_type()) {
      set_leave_type(from.leave_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cmsg_player_leave_map::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmsg_player_leave_map::CopyFrom(const cmsg_player_leave_map& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmsg_player_leave_map::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void cmsg_player_leave_map::Swap(cmsg_player_leave_map* other) {
  if (other != this) {
    std::swap(leave_type_, other->leave_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cmsg_player_leave_map::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cmsg_player_leave_map_descriptor_;
  metadata.reflection = cmsg_player_leave_map_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_create_self::kGuidFieldNumber;
const int smsg_create_self::kNameFieldNumber;
const int smsg_create_self::kLevelFieldNumber;
const int smsg_create_self::kExpFieldNumber;
const int smsg_create_self::kProfessionFieldNumber;
const int smsg_create_self::kSexFieldNumber;
const int smsg_create_self::kMoneyFieldNumber;
const int smsg_create_self::kCoinFieldNumber;
const int smsg_create_self::kSrcXFieldNumber;
const int smsg_create_self::kSrcYFieldNumber;
const int smsg_create_self::kDstXFieldNumber;
const int smsg_create_self::kDstYFieldNumber;
const int smsg_create_self::kSeniorityFieldNumber;
const int smsg_create_self::kMapIdFieldNumber;
const int smsg_create_self::kDirectionFieldNumber;
const int smsg_create_self::kRoleIdFieldNumber;
const int smsg_create_self::kPrestigeFieldNumber;
const int smsg_create_self::kRankFieldNumber;
const int smsg_create_self::kGuildFieldNumber;
const int smsg_create_self::kGuildNameFieldNumber;
const int smsg_create_self::kMemberSlotFieldNumber;
const int smsg_create_self::kAttributesFieldNumber;
const int smsg_create_self::kRolesFieldNumber;
const int smsg_create_self::kBagFieldNumber;
const int smsg_create_self::kStorehouseFieldNumber;
const int smsg_create_self::kEnergyFieldNumber;
const int smsg_create_self::kIsAddictionFieldNumber;
const int smsg_create_self::kVipLevelFieldNumber;
const int smsg_create_self::kVipExpFieldNumber;
const int smsg_create_self::kReverenceFieldNumber;
const int smsg_create_self::kGuildIconFieldNumber;
const int smsg_create_self::kFollowRoleIdFieldNumber;
const int smsg_create_self::kCurrentTitleFieldNumber;
const int smsg_create_self::kSpecialRightFieldNumber;
const int smsg_create_self::kHorseIdFieldNumber;
const int smsg_create_self::kWifeFollowFieldNumber;
const int smsg_create_self::kYellowVipLevelFieldNumber;
const int smsg_create_self::kIsYellowVipFieldNumber;
const int smsg_create_self::kIsYellowYearVipFieldNumber;
const int smsg_create_self::kIsYellowHighVipFieldNumber;
#endif  // !_MSC_VER

smsg_create_self::smsg_create_self()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_create_self)
}

void smsg_create_self::InitAsDefaultInstance() {
}

smsg_create_self::smsg_create_self(const smsg_create_self& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_create_self)
}

void smsg_create_self::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0u;
  exp_ = 0u;
  profession_ = 0;
  sex_ = 0;
  money_ = 0u;
  coin_ = 0u;
  src_x_ = 0;
  src_y_ = 0;
  dst_x_ = 0;
  dst_y_ = 0;
  seniority_ = 0u;
  map_id_ = 0u;
  direction_ = 0;
  role_id_ = 0;
  prestige_ = 0u;
  rank_ = 0u;
  guild_ = GOOGLE_ULONGLONG(0);
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  member_slot_ = 0u;
  energy_ = 0u;
  is_addiction_ = 0u;
  vip_level_ = 0u;
  vip_exp_ = 0u;
  reverence_ = 0u;
  guild_icon_ = 0u;
  follow_role_id_ = 0u;
  special_right_ = 0u;
  horse_id_ = 0u;
  wife_follow_ = 0u;
  yellow_vip_level_ = 0u;
  is_yellow_vip_ = 0u;
  is_yellow_year_vip_ = 0u;
  is_yellow_high_vip_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_create_self::~smsg_create_self() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_create_self)
  SharedDtor();
}

void smsg_create_self::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (guild_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guild_name_;
  }
  if (this != default_instance_) {
  }
}

void smsg_create_self::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_create_self::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_create_self_descriptor_;
}

const smsg_create_self& smsg_create_self::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_create_self* smsg_create_self::default_instance_ = NULL;

smsg_create_self* smsg_create_self::New() const {
  return new smsg_create_self;
}

void smsg_create_self::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<smsg_create_self*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(level_, coin_);
    guid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(src_x_, role_id_);
  }
  if (_has_bits_[16 / 32] & 2031616) {
    ZR_(prestige_, guild_);
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guild_name_->clear();
      }
    }
    member_slot_ = 0u;
  }
  if (_has_bits_[24 / 32] & 4261412864) {
    ZR_(is_addiction_, follow_role_id_);
    energy_ = 0u;
  }
  if (_has_bits_[32 / 32] & 254) {
    ZR_(special_right_, is_yellow_high_vip_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  attributes_.Clear();
  roles_.Clear();
  bag_.Clear();
  storehouse_.Clear();
  current_title_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_create_self::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_create_self)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 4;
      case 4: {
        if (tag == 32) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_profession;
        break;
      }

      // optional int32 profession = 5;
      case 5: {
        if (tag == 40) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }

      // optional int32 sex = 6;
      case 6: {
        if (tag == 48) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_money;
        break;
      }

      // optional uint32 money = 7;
      case 7: {
        if (tag == 56) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_coin;
        break;
      }

      // optional uint32 coin = 8;
      case 8: {
        if (tag == 64) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_src_x;
        break;
      }

      // optional float src_x = 9;
      case 9: {
        if (tag == 77) {
         parse_src_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &src_x_)));
          set_has_src_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_src_y;
        break;
      }

      // optional float src_y = 10;
      case 10: {
        if (tag == 85) {
         parse_src_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &src_y_)));
          set_has_src_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_dst_x;
        break;
      }

      // optional float dst_x = 11;
      case 11: {
        if (tag == 93) {
         parse_dst_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dst_x_)));
          set_has_dst_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_dst_y;
        break;
      }

      // optional float dst_y = 12;
      case 12: {
        if (tag == 101) {
         parse_dst_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dst_y_)));
          set_has_dst_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_seniority;
        break;
      }

      // optional uint32 seniority = 13;
      case 13: {
        if (tag == 104) {
         parse_seniority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seniority_)));
          set_has_seniority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_map_id;
        break;
      }

      // optional uint32 map_id = 14;
      case 14: {
        if (tag == 112) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_direction;
        break;
      }

      // optional int32 direction = 15;
      case 15: {
        if (tag == 120) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_role_id;
        break;
      }

      // optional int32 role_id = 16;
      case 16: {
        if (tag == 128) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_prestige;
        break;
      }

      // optional uint32 prestige = 17;
      case 17: {
        if (tag == 136) {
         parse_prestige:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prestige_)));
          set_has_prestige();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 18;
      case 18: {
        if (tag == 144) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_guild;
        break;
      }

      // optional uint64 guild = 19;
      case 19: {
        if (tag == 152) {
         parse_guild:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guild_)));
          set_has_guild();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_guild_name;
        break;
      }

      // optional string guild_name = 20;
      case 20: {
        if (tag == 162) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guild_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_member_slot;
        break;
      }

      // optional uint32 member_slot = 21;
      case 21: {
        if (tag == 168) {
         parse_member_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_slot_)));
          set_has_member_slot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_attributes;
        break;
      }

      // repeated uint32 attributes = 22;
      case 22: {
        if (tag == 176) {
         parse_attributes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 176, input, this->mutable_attributes())));
        } else if (tag == 178) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_attributes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_attributes;
        if (input->ExpectTag(184)) goto parse_roles;
        break;
      }

      // repeated uint64 roles = 23;
      case 23: {
        if (tag == 184) {
         parse_roles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 184, input, this->mutable_roles())));
        } else if (tag == 186) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_roles())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_roles;
        if (input->ExpectTag(192)) goto parse_bag;
        break;
      }

      // repeated uint64 bag = 24;
      case 24: {
        if (tag == 192) {
         parse_bag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 192, input, this->mutable_bag())));
        } else if (tag == 194) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_bag())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_bag;
        if (input->ExpectTag(200)) goto parse_storehouse;
        break;
      }

      // repeated uint64 storehouse = 25;
      case 25: {
        if (tag == 200) {
         parse_storehouse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 200, input, this->mutable_storehouse())));
        } else if (tag == 202) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_storehouse())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_storehouse;
        if (input->ExpectTag(208)) goto parse_energy;
        break;
      }

      // optional uint32 energy = 26;
      case 26: {
        if (tag == 208) {
         parse_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_is_addiction;
        break;
      }

      // optional uint32 is_addiction = 27;
      case 27: {
        if (tag == 216) {
         parse_is_addiction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_addiction_)));
          set_has_is_addiction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_vip_level;
        break;
      }

      // optional uint32 vip_level = 28;
      case 28: {
        if (tag == 224) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_vip_exp;
        break;
      }

      // optional uint32 vip_exp = 29;
      case 29: {
        if (tag == 232) {
         parse_vip_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_exp_)));
          set_has_vip_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_reverence;
        break;
      }

      // optional uint32 reverence = 30;
      case 30: {
        if (tag == 240) {
         parse_reverence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reverence_)));
          set_has_reverence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_guild_icon;
        break;
      }

      // optional uint32 guild_icon = 31;
      case 31: {
        if (tag == 248) {
         parse_guild_icon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_icon_)));
          set_has_guild_icon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_follow_role_id;
        break;
      }

      // optional uint32 follow_role_id = 32;
      case 32: {
        if (tag == 256) {
         parse_follow_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &follow_role_id_)));
          set_has_follow_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_current_title;
        break;
      }

      // repeated uint32 current_title = 33;
      case 33: {
        if (tag == 264) {
         parse_current_title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 264, input, this->mutable_current_title())));
        } else if (tag == 266) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_current_title())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_current_title;
        if (input->ExpectTag(272)) goto parse_special_right;
        break;
      }

      // optional uint32 special_right = 34;
      case 34: {
        if (tag == 272) {
         parse_special_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &special_right_)));
          set_has_special_right();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_horse_id;
        break;
      }

      // optional uint32 horse_id = 35;
      case 35: {
        if (tag == 280) {
         parse_horse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &horse_id_)));
          set_has_horse_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_wife_follow;
        break;
      }

      // optional uint32 wife_follow = 36;
      case 36: {
        if (tag == 288) {
         parse_wife_follow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wife_follow_)));
          set_has_wife_follow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_yellow_vip_level;
        break;
      }

      // optional uint32 yellow_vip_level = 37;
      case 37: {
        if (tag == 296) {
         parse_yellow_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yellow_vip_level_)));
          set_has_yellow_vip_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_is_yellow_vip;
        break;
      }

      // optional uint32 is_yellow_vip = 38;
      case 38: {
        if (tag == 304) {
         parse_is_yellow_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_yellow_vip_)));
          set_has_is_yellow_vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_is_yellow_year_vip;
        break;
      }

      // optional uint32 is_yellow_year_vip = 39;
      case 39: {
        if (tag == 312) {
         parse_is_yellow_year_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_yellow_year_vip_)));
          set_has_is_yellow_year_vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_is_yellow_high_vip;
        break;
      }

      // optional uint32 is_yellow_high_vip = 40;
      case 40: {
        if (tag == 320) {
         parse_is_yellow_high_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_yellow_high_vip_)));
          set_has_is_yellow_high_vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_create_self)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_create_self)
  return false;
#undef DO_
}

void smsg_create_self::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_create_self)
  // required uint64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional uint32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->exp(), output);
  }

  // optional int32 profession = 5;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->profession(), output);
  }

  // optional int32 sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sex(), output);
  }

  // optional uint32 money = 7;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->money(), output);
  }

  // optional uint32 coin = 8;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->coin(), output);
  }

  // optional float src_x = 9;
  if (has_src_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->src_x(), output);
  }

  // optional float src_y = 10;
  if (has_src_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->src_y(), output);
  }

  // optional float dst_x = 11;
  if (has_dst_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->dst_x(), output);
  }

  // optional float dst_y = 12;
  if (has_dst_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->dst_y(), output);
  }

  // optional uint32 seniority = 13;
  if (has_seniority()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->seniority(), output);
  }

  // optional uint32 map_id = 14;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->map_id(), output);
  }

  // optional int32 direction = 15;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->direction(), output);
  }

  // optional int32 role_id = 16;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->role_id(), output);
  }

  // optional uint32 prestige = 17;
  if (has_prestige()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->prestige(), output);
  }

  // optional uint32 rank = 18;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->rank(), output);
  }

  // optional uint64 guild = 19;
  if (has_guild()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->guild(), output);
  }

  // optional string guild_name = 20;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guild_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->guild_name(), output);
  }

  // optional uint32 member_slot = 21;
  if (has_member_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->member_slot(), output);
  }

  // repeated uint32 attributes = 22;
  for (int i = 0; i < this->attributes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      22, this->attributes(i), output);
  }

  // repeated uint64 roles = 23;
  for (int i = 0; i < this->roles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      23, this->roles(i), output);
  }

  // repeated uint64 bag = 24;
  for (int i = 0; i < this->bag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      24, this->bag(i), output);
  }

  // repeated uint64 storehouse = 25;
  for (int i = 0; i < this->storehouse_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      25, this->storehouse(i), output);
  }

  // optional uint32 energy = 26;
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->energy(), output);
  }

  // optional uint32 is_addiction = 27;
  if (has_is_addiction()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->is_addiction(), output);
  }

  // optional uint32 vip_level = 28;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->vip_level(), output);
  }

  // optional uint32 vip_exp = 29;
  if (has_vip_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->vip_exp(), output);
  }

  // optional uint32 reverence = 30;
  if (has_reverence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->reverence(), output);
  }

  // optional uint32 guild_icon = 31;
  if (has_guild_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->guild_icon(), output);
  }

  // optional uint32 follow_role_id = 32;
  if (has_follow_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->follow_role_id(), output);
  }

  // repeated uint32 current_title = 33;
  for (int i = 0; i < this->current_title_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      33, this->current_title(i), output);
  }

  // optional uint32 special_right = 34;
  if (has_special_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->special_right(), output);
  }

  // optional uint32 horse_id = 35;
  if (has_horse_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->horse_id(), output);
  }

  // optional uint32 wife_follow = 36;
  if (has_wife_follow()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->wife_follow(), output);
  }

  // optional uint32 yellow_vip_level = 37;
  if (has_yellow_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->yellow_vip_level(), output);
  }

  // optional uint32 is_yellow_vip = 38;
  if (has_is_yellow_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->is_yellow_vip(), output);
  }

  // optional uint32 is_yellow_year_vip = 39;
  if (has_is_yellow_year_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->is_yellow_year_vip(), output);
  }

  // optional uint32 is_yellow_high_vip = 40;
  if (has_is_yellow_high_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->is_yellow_high_vip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_create_self)
}

::google::protobuf::uint8* smsg_create_self::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_create_self)
  // required uint64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // optional uint32 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->exp(), target);
  }

  // optional int32 profession = 5;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->profession(), target);
  }

  // optional int32 sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sex(), target);
  }

  // optional uint32 money = 7;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->money(), target);
  }

  // optional uint32 coin = 8;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->coin(), target);
  }

  // optional float src_x = 9;
  if (has_src_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->src_x(), target);
  }

  // optional float src_y = 10;
  if (has_src_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->src_y(), target);
  }

  // optional float dst_x = 11;
  if (has_dst_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->dst_x(), target);
  }

  // optional float dst_y = 12;
  if (has_dst_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->dst_y(), target);
  }

  // optional uint32 seniority = 13;
  if (has_seniority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->seniority(), target);
  }

  // optional uint32 map_id = 14;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->map_id(), target);
  }

  // optional int32 direction = 15;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->direction(), target);
  }

  // optional int32 role_id = 16;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->role_id(), target);
  }

  // optional uint32 prestige = 17;
  if (has_prestige()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->prestige(), target);
  }

  // optional uint32 rank = 18;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->rank(), target);
  }

  // optional uint64 guild = 19;
  if (has_guild()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->guild(), target);
  }

  // optional string guild_name = 20;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guild_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->guild_name(), target);
  }

  // optional uint32 member_slot = 21;
  if (has_member_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->member_slot(), target);
  }

  // repeated uint32 attributes = 22;
  for (int i = 0; i < this->attributes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(22, this->attributes(i), target);
  }

  // repeated uint64 roles = 23;
  for (int i = 0; i < this->roles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(23, this->roles(i), target);
  }

  // repeated uint64 bag = 24;
  for (int i = 0; i < this->bag_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(24, this->bag(i), target);
  }

  // repeated uint64 storehouse = 25;
  for (int i = 0; i < this->storehouse_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(25, this->storehouse(i), target);
  }

  // optional uint32 energy = 26;
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->energy(), target);
  }

  // optional uint32 is_addiction = 27;
  if (has_is_addiction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->is_addiction(), target);
  }

  // optional uint32 vip_level = 28;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->vip_level(), target);
  }

  // optional uint32 vip_exp = 29;
  if (has_vip_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->vip_exp(), target);
  }

  // optional uint32 reverence = 30;
  if (has_reverence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->reverence(), target);
  }

  // optional uint32 guild_icon = 31;
  if (has_guild_icon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->guild_icon(), target);
  }

  // optional uint32 follow_role_id = 32;
  if (has_follow_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->follow_role_id(), target);
  }

  // repeated uint32 current_title = 33;
  for (int i = 0; i < this->current_title_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(33, this->current_title(i), target);
  }

  // optional uint32 special_right = 34;
  if (has_special_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->special_right(), target);
  }

  // optional uint32 horse_id = 35;
  if (has_horse_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->horse_id(), target);
  }

  // optional uint32 wife_follow = 36;
  if (has_wife_follow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->wife_follow(), target);
  }

  // optional uint32 yellow_vip_level = 37;
  if (has_yellow_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->yellow_vip_level(), target);
  }

  // optional uint32 is_yellow_vip = 38;
  if (has_is_yellow_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->is_yellow_vip(), target);
  }

  // optional uint32 is_yellow_year_vip = 39;
  if (has_is_yellow_year_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->is_yellow_year_vip(), target);
  }

  // optional uint32 is_yellow_high_vip = 40;
  if (has_is_yellow_high_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->is_yellow_high_vip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_create_self)
  return target;
}

int smsg_create_self::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional int32 profession = 5;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }

    // optional int32 sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional uint32 money = 7;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money());
    }

    // optional uint32 coin = 8;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float src_x = 9;
    if (has_src_x()) {
      total_size += 1 + 4;
    }

    // optional float src_y = 10;
    if (has_src_y()) {
      total_size += 1 + 4;
    }

    // optional float dst_x = 11;
    if (has_dst_x()) {
      total_size += 1 + 4;
    }

    // optional float dst_y = 12;
    if (has_dst_y()) {
      total_size += 1 + 4;
    }

    // optional uint32 seniority = 13;
    if (has_seniority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seniority());
    }

    // optional uint32 map_id = 14;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }

    // optional int32 direction = 15;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->direction());
    }

    // optional int32 role_id = 16;
    if (has_role_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_id());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 prestige = 17;
    if (has_prestige()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prestige());
    }

    // optional uint32 rank = 18;
    if (has_rank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint64 guild = 19;
    if (has_guild()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guild());
    }

    // optional string guild_name = 20;
    if (has_guild_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }

    // optional uint32 member_slot = 21;
    if (has_member_slot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_slot());
    }

  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    // optional uint32 energy = 26;
    if (has_energy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->energy());
    }

    // optional uint32 is_addiction = 27;
    if (has_is_addiction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_addiction());
    }

    // optional uint32 vip_level = 28;
    if (has_vip_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_level());
    }

    // optional uint32 vip_exp = 29;
    if (has_vip_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_exp());
    }

    // optional uint32 reverence = 30;
    if (has_reverence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reverence());
    }

    // optional uint32 guild_icon = 31;
    if (has_guild_icon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_icon());
    }

    // optional uint32 follow_role_id = 32;
    if (has_follow_role_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->follow_role_id());
    }

  }
  if (_has_bits_[33 / 32] & (0xffu << (33 % 32))) {
    // optional uint32 special_right = 34;
    if (has_special_right()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->special_right());
    }

    // optional uint32 horse_id = 35;
    if (has_horse_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->horse_id());
    }

    // optional uint32 wife_follow = 36;
    if (has_wife_follow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wife_follow());
    }

    // optional uint32 yellow_vip_level = 37;
    if (has_yellow_vip_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yellow_vip_level());
    }

    // optional uint32 is_yellow_vip = 38;
    if (has_is_yellow_vip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_yellow_vip());
    }

    // optional uint32 is_yellow_year_vip = 39;
    if (has_is_yellow_year_vip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_yellow_year_vip());
    }

    // optional uint32 is_yellow_high_vip = 40;
    if (has_is_yellow_high_vip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_yellow_high_vip());
    }

  }
  // repeated uint32 attributes = 22;
  {
    int data_size = 0;
    for (int i = 0; i < this->attributes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->attributes(i));
    }
    total_size += 2 * this->attributes_size() + data_size;
  }

  // repeated uint64 roles = 23;
  {
    int data_size = 0;
    for (int i = 0; i < this->roles_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->roles(i));
    }
    total_size += 2 * this->roles_size() + data_size;
  }

  // repeated uint64 bag = 24;
  {
    int data_size = 0;
    for (int i = 0; i < this->bag_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->bag(i));
    }
    total_size += 2 * this->bag_size() + data_size;
  }

  // repeated uint64 storehouse = 25;
  {
    int data_size = 0;
    for (int i = 0; i < this->storehouse_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->storehouse(i));
    }
    total_size += 2 * this->storehouse_size() + data_size;
  }

  // repeated uint32 current_title = 33;
  {
    int data_size = 0;
    for (int i = 0; i < this->current_title_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->current_title(i));
    }
    total_size += 2 * this->current_title_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_create_self::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_create_self* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_create_self*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_create_self::MergeFrom(const smsg_create_self& from) {
  GOOGLE_CHECK_NE(&from, this);
  attributes_.MergeFrom(from.attributes_);
  roles_.MergeFrom(from.roles_);
  bag_.MergeFrom(from.bag_);
  storehouse_.MergeFrom(from.storehouse_);
  current_title_.MergeFrom(from.current_title_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_src_x()) {
      set_src_x(from.src_x());
    }
    if (from.has_src_y()) {
      set_src_y(from.src_y());
    }
    if (from.has_dst_x()) {
      set_dst_x(from.dst_x());
    }
    if (from.has_dst_y()) {
      set_dst_y(from.dst_y());
    }
    if (from.has_seniority()) {
      set_seniority(from.seniority());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_prestige()) {
      set_prestige(from.prestige());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_guild()) {
      set_guild(from.guild());
    }
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
    if (from.has_member_slot()) {
      set_member_slot(from.member_slot());
    }
  }
  if (from._has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (from.has_energy()) {
      set_energy(from.energy());
    }
    if (from.has_is_addiction()) {
      set_is_addiction(from.is_addiction());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_vip_exp()) {
      set_vip_exp(from.vip_exp());
    }
    if (from.has_reverence()) {
      set_reverence(from.reverence());
    }
    if (from.has_guild_icon()) {
      set_guild_icon(from.guild_icon());
    }
    if (from.has_follow_role_id()) {
      set_follow_role_id(from.follow_role_id());
    }
  }
  if (from._has_bits_[33 / 32] & (0xffu << (33 % 32))) {
    if (from.has_special_right()) {
      set_special_right(from.special_right());
    }
    if (from.has_horse_id()) {
      set_horse_id(from.horse_id());
    }
    if (from.has_wife_follow()) {
      set_wife_follow(from.wife_follow());
    }
    if (from.has_yellow_vip_level()) {
      set_yellow_vip_level(from.yellow_vip_level());
    }
    if (from.has_is_yellow_vip()) {
      set_is_yellow_vip(from.is_yellow_vip());
    }
    if (from.has_is_yellow_year_vip()) {
      set_is_yellow_year_vip(from.is_yellow_year_vip());
    }
    if (from.has_is_yellow_high_vip()) {
      set_is_yellow_high_vip(from.is_yellow_high_vip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_create_self::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_create_self::CopyFrom(const smsg_create_self& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_create_self::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void smsg_create_self::Swap(smsg_create_self* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(profession_, other->profession_);
    std::swap(sex_, other->sex_);
    std::swap(money_, other->money_);
    std::swap(coin_, other->coin_);
    std::swap(src_x_, other->src_x_);
    std::swap(src_y_, other->src_y_);
    std::swap(dst_x_, other->dst_x_);
    std::swap(dst_y_, other->dst_y_);
    std::swap(seniority_, other->seniority_);
    std::swap(map_id_, other->map_id_);
    std::swap(direction_, other->direction_);
    std::swap(role_id_, other->role_id_);
    std::swap(prestige_, other->prestige_);
    std::swap(rank_, other->rank_);
    std::swap(guild_, other->guild_);
    std::swap(guild_name_, other->guild_name_);
    std::swap(member_slot_, other->member_slot_);
    attributes_.Swap(&other->attributes_);
    roles_.Swap(&other->roles_);
    bag_.Swap(&other->bag_);
    storehouse_.Swap(&other->storehouse_);
    std::swap(energy_, other->energy_);
    std::swap(is_addiction_, other->is_addiction_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(vip_exp_, other->vip_exp_);
    std::swap(reverence_, other->reverence_);
    std::swap(guild_icon_, other->guild_icon_);
    std::swap(follow_role_id_, other->follow_role_id_);
    current_title_.Swap(&other->current_title_);
    std::swap(special_right_, other->special_right_);
    std::swap(horse_id_, other->horse_id_);
    std::swap(wife_follow_, other->wife_follow_);
    std::swap(yellow_vip_level_, other->yellow_vip_level_);
    std::swap(is_yellow_vip_, other->is_yellow_vip_);
    std::swap(is_yellow_year_vip_, other->is_yellow_year_vip_);
    std::swap(is_yellow_high_vip_, other->is_yellow_high_vip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_create_self::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_create_self_descriptor_;
  metadata.reflection = smsg_create_self_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_create_role::kGuidFieldNumber;
const int smsg_create_role::kPlayerFieldNumber;
const int smsg_create_role::kRoleIdFieldNumber;
const int smsg_create_role::kNameFieldNumber;
const int smsg_create_role::kSexFieldNumber;
const int smsg_create_role::kJobFieldNumber;
const int smsg_create_role::kFactionFieldNumber;
const int smsg_create_role::kLevelFieldNumber;
const int smsg_create_role::kExpFieldNumber;
const int smsg_create_role::kPostionFieldNumber;
const int smsg_create_role::kNormalSkillFieldNumber;
const int smsg_create_role::kExtremelySkillFieldNumber;
const int smsg_create_role::kCharAbilityFieldNumber;
const int smsg_create_role::kHireIdFieldNumber;
const int smsg_create_role::kAttributesFieldNumber;
const int smsg_create_role::kInheritToFieldNumber;
const int smsg_create_role::kInheritFromFieldNumber;
const int smsg_create_role::kAttrsRankFieldNumber;
#endif  // !_MSC_VER

smsg_create_role::smsg_create_role()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_create_role)
}

void smsg_create_role::InitAsDefaultInstance() {
}

smsg_create_role::smsg_create_role(const smsg_create_role& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_create_role)
}

void smsg_create_role::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  player_ = GOOGLE_ULONGLONG(0);
  role_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = 0u;
  job_ = 0u;
  faction_ = 0u;
  level_ = 0u;
  exp_ = 0u;
  postion_ = 0u;
  normal_skill_ = 0u;
  extremely_skill_ = 0u;
  char_ability_ = 0u;
  hire_id_ = 0u;
  inherit_to_ = GOOGLE_ULONGLONG(0);
  inherit_from_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_create_role::~smsg_create_role() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_create_role)
  SharedDtor();
}

void smsg_create_role::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void smsg_create_role::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_create_role::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_create_role_descriptor_;
}

const smsg_create_role& smsg_create_role::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_create_role* smsg_create_role::default_instance_ = NULL;

smsg_create_role* smsg_create_role::New() const {
  return new smsg_create_role;
}

void smsg_create_role::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<smsg_create_role*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(guid_, player_);
    ZR_(role_id_, level_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 48896) {
    ZR_(exp_, char_ability_);
    hire_id_ = 0u;
    inherit_to_ = GOOGLE_ULONGLONG(0);
  }
  inherit_from_ = GOOGLE_ULONGLONG(0);

#undef OFFSET_OF_FIELD_
#undef ZR_

  attributes_.Clear();
  attrs_rank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_create_role::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_create_role)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player;
        break;
      }

      // required uint64 player = 2;
      case 2: {
        if (tag == 16) {
         parse_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_)));
          set_has_player();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint32 role_id = 3;
      case 3: {
        if (tag == 24) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 5;
      case 5: {
        if (tag == 40) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_job;
        break;
      }

      // optional uint32 job = 6;
      case 6: {
        if (tag == 48) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_faction;
        break;
      }

      // optional uint32 faction = 7;
      case 7: {
        if (tag == 56) {
         parse_faction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_)));
          set_has_faction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_level;
        break;
      }

      // optional uint32 level = 8;
      case 8: {
        if (tag == 64) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 9;
      case 9: {
        if (tag == 72) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_postion;
        break;
      }

      // optional uint32 postion = 10;
      case 10: {
        if (tag == 80) {
         parse_postion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &postion_)));
          set_has_postion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_normal_skill;
        break;
      }

      // optional uint32 normal_skill = 11;
      case 11: {
        if (tag == 88) {
         parse_normal_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &normal_skill_)));
          set_has_normal_skill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_extremely_skill;
        break;
      }

      // optional uint32 extremely_skill = 12;
      case 12: {
        if (tag == 96) {
         parse_extremely_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extremely_skill_)));
          set_has_extremely_skill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_char_ability;
        break;
      }

      // optional uint32 char_ability = 13;
      case 13: {
        if (tag == 104) {
         parse_char_ability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_ability_)));
          set_has_char_ability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_hire_id;
        break;
      }

      // optional uint32 hire_id = 14;
      case 14: {
        if (tag == 112) {
         parse_hire_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hire_id_)));
          set_has_hire_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_attributes;
        break;
      }

      // repeated uint32 attributes = 15;
      case 15: {
        if (tag == 120) {
         parse_attributes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 120, input, this->mutable_attributes())));
        } else if (tag == 122) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_attributes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_attributes;
        if (input->ExpectTag(240)) goto parse_inherit_to;
        break;
      }

      // optional uint64 inherit_to = 30;
      case 30: {
        if (tag == 240) {
         parse_inherit_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &inherit_to_)));
          set_has_inherit_to();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_inherit_from;
        break;
      }

      // optional uint64 inherit_from = 31;
      case 31: {
        if (tag == 248) {
         parse_inherit_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &inherit_from_)));
          set_has_inherit_from();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_attrs_rank;
        break;
      }

      // repeated uint32 attrs_rank = 32;
      case 32: {
        if (tag == 256) {
         parse_attrs_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 256, input, this->mutable_attrs_rank())));
        } else if (tag == 258) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_attrs_rank())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_attrs_rank;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_create_role)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_create_role)
  return false;
#undef DO_
}

void smsg_create_role::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_create_role)
  // required uint64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // required uint64 player = 2;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->player(), output);
  }

  // optional uint32 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->role_id(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sex(), output);
  }

  // optional uint32 job = 6;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->job(), output);
  }

  // optional uint32 faction = 7;
  if (has_faction()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->faction(), output);
  }

  // optional uint32 level = 8;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->level(), output);
  }

  // optional uint32 exp = 9;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->exp(), output);
  }

  // optional uint32 postion = 10;
  if (has_postion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->postion(), output);
  }

  // optional uint32 normal_skill = 11;
  if (has_normal_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->normal_skill(), output);
  }

  // optional uint32 extremely_skill = 12;
  if (has_extremely_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->extremely_skill(), output);
  }

  // optional uint32 char_ability = 13;
  if (has_char_ability()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->char_ability(), output);
  }

  // optional uint32 hire_id = 14;
  if (has_hire_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->hire_id(), output);
  }

  // repeated uint32 attributes = 15;
  for (int i = 0; i < this->attributes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      15, this->attributes(i), output);
  }

  // optional uint64 inherit_to = 30;
  if (has_inherit_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->inherit_to(), output);
  }

  // optional uint64 inherit_from = 31;
  if (has_inherit_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(31, this->inherit_from(), output);
  }

  // repeated uint32 attrs_rank = 32;
  for (int i = 0; i < this->attrs_rank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      32, this->attrs_rank(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_create_role)
}

::google::protobuf::uint8* smsg_create_role::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_create_role)
  // required uint64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // required uint64 player = 2;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->player(), target);
  }

  // optional uint32 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->role_id(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sex(), target);
  }

  // optional uint32 job = 6;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->job(), target);
  }

  // optional uint32 faction = 7;
  if (has_faction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->faction(), target);
  }

  // optional uint32 level = 8;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->level(), target);
  }

  // optional uint32 exp = 9;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->exp(), target);
  }

  // optional uint32 postion = 10;
  if (has_postion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->postion(), target);
  }

  // optional uint32 normal_skill = 11;
  if (has_normal_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->normal_skill(), target);
  }

  // optional uint32 extremely_skill = 12;
  if (has_extremely_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->extremely_skill(), target);
  }

  // optional uint32 char_ability = 13;
  if (has_char_ability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->char_ability(), target);
  }

  // optional uint32 hire_id = 14;
  if (has_hire_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->hire_id(), target);
  }

  // repeated uint32 attributes = 15;
  for (int i = 0; i < this->attributes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(15, this->attributes(i), target);
  }

  // optional uint64 inherit_to = 30;
  if (has_inherit_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->inherit_to(), target);
  }

  // optional uint64 inherit_from = 31;
  if (has_inherit_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(31, this->inherit_from(), target);
  }

  // repeated uint32 attrs_rank = 32;
  for (int i = 0; i < this->attrs_rank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(32, this->attrs_rank(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_create_role)
  return target;
}

int smsg_create_role::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // required uint64 player = 2;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player());
    }

    // optional uint32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 job = 6;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 faction = 7;
    if (has_faction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction());
    }

    // optional uint32 level = 8;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 exp = 9;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 postion = 10;
    if (has_postion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->postion());
    }

    // optional uint32 normal_skill = 11;
    if (has_normal_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->normal_skill());
    }

    // optional uint32 extremely_skill = 12;
    if (has_extremely_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extremely_skill());
    }

    // optional uint32 char_ability = 13;
    if (has_char_ability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_ability());
    }

    // optional uint32 hire_id = 14;
    if (has_hire_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hire_id());
    }

    // optional uint64 inherit_to = 30;
    if (has_inherit_to()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->inherit_to());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 inherit_from = 31;
    if (has_inherit_from()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->inherit_from());
    }

  }
  // repeated uint32 attributes = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->attributes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->attributes(i));
    }
    total_size += 1 * this->attributes_size() + data_size;
  }

  // repeated uint32 attrs_rank = 32;
  {
    int data_size = 0;
    for (int i = 0; i < this->attrs_rank_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->attrs_rank(i));
    }
    total_size += 2 * this->attrs_rank_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_create_role::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_create_role* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_create_role*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_create_role::MergeFrom(const smsg_create_role& from) {
  GOOGLE_CHECK_NE(&from, this);
  attributes_.MergeFrom(from.attributes_);
  attrs_rank_.MergeFrom(from.attrs_rank_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_player()) {
      set_player(from.player());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_faction()) {
      set_faction(from.faction());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_postion()) {
      set_postion(from.postion());
    }
    if (from.has_normal_skill()) {
      set_normal_skill(from.normal_skill());
    }
    if (from.has_extremely_skill()) {
      set_extremely_skill(from.extremely_skill());
    }
    if (from.has_char_ability()) {
      set_char_ability(from.char_ability());
    }
    if (from.has_hire_id()) {
      set_hire_id(from.hire_id());
    }
    if (from.has_inherit_to()) {
      set_inherit_to(from.inherit_to());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_inherit_from()) {
      set_inherit_from(from.inherit_from());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_create_role::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_create_role::CopyFrom(const smsg_create_role& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_create_role::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void smsg_create_role::Swap(smsg_create_role* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(player_, other->player_);
    std::swap(role_id_, other->role_id_);
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(job_, other->job_);
    std::swap(faction_, other->faction_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(postion_, other->postion_);
    std::swap(normal_skill_, other->normal_skill_);
    std::swap(extremely_skill_, other->extremely_skill_);
    std::swap(char_ability_, other->char_ability_);
    std::swap(hire_id_, other->hire_id_);
    attributes_.Swap(&other->attributes_);
    std::swap(inherit_to_, other->inherit_to_);
    std::swap(inherit_from_, other->inherit_from_);
    attrs_rank_.Swap(&other->attrs_rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_create_role::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_create_role_descriptor_;
  metadata.reflection = smsg_create_role_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_update_flower_rank::kGuidFieldNumber;
const int smsg_update_flower_rank::kFlowerRankFieldNumber;
#endif  // !_MSC_VER

smsg_update_flower_rank::smsg_update_flower_rank()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_update_flower_rank)
}

void smsg_update_flower_rank::InitAsDefaultInstance() {
}

smsg_update_flower_rank::smsg_update_flower_rank(const smsg_update_flower_rank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_update_flower_rank)
}

void smsg_update_flower_rank::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  flower_rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_update_flower_rank::~smsg_update_flower_rank() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_update_flower_rank)
  SharedDtor();
}

void smsg_update_flower_rank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void smsg_update_flower_rank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_update_flower_rank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_update_flower_rank_descriptor_;
}

const smsg_update_flower_rank& smsg_update_flower_rank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_update_flower_rank* smsg_update_flower_rank::default_instance_ = NULL;

smsg_update_flower_rank* smsg_update_flower_rank::New() const {
  return new smsg_update_flower_rank;
}

void smsg_update_flower_rank::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<smsg_update_flower_rank*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(guid_, flower_rank_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_update_flower_rank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_update_flower_rank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flower_rank;
        break;
      }

      // required uint32 flower_rank = 2;
      case 2: {
        if (tag == 16) {
         parse_flower_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flower_rank_)));
          set_has_flower_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_update_flower_rank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_update_flower_rank)
  return false;
#undef DO_
}

void smsg_update_flower_rank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_update_flower_rank)
  // required uint64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // required uint32 flower_rank = 2;
  if (has_flower_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flower_rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_update_flower_rank)
}

::google::protobuf::uint8* smsg_update_flower_rank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_update_flower_rank)
  // required uint64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // required uint32 flower_rank = 2;
  if (has_flower_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flower_rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_update_flower_rank)
  return target;
}

int smsg_update_flower_rank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // required uint32 flower_rank = 2;
    if (has_flower_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flower_rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_update_flower_rank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_update_flower_rank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_update_flower_rank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_update_flower_rank::MergeFrom(const smsg_update_flower_rank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_flower_rank()) {
      set_flower_rank(from.flower_rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_update_flower_rank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_update_flower_rank::CopyFrom(const smsg_update_flower_rank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_update_flower_rank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void smsg_update_flower_rank::Swap(smsg_update_flower_rank* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(flower_rank_, other->flower_rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_update_flower_rank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_update_flower_rank_descriptor_;
  metadata.reflection = smsg_update_flower_rank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cmsg_lookup_player::kGuidFieldNumber;
#endif  // !_MSC_VER

cmsg_lookup_player::cmsg_lookup_player()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.cmsg_lookup_player)
}

void cmsg_lookup_player::InitAsDefaultInstance() {
}

cmsg_lookup_player::cmsg_lookup_player(const cmsg_lookup_player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.cmsg_lookup_player)
}

void cmsg_lookup_player::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cmsg_lookup_player::~cmsg_lookup_player() {
  // @@protoc_insertion_point(destructor:typed.protocol.cmsg_lookup_player)
  SharedDtor();
}

void cmsg_lookup_player::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cmsg_lookup_player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cmsg_lookup_player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cmsg_lookup_player_descriptor_;
}

const cmsg_lookup_player& cmsg_lookup_player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

cmsg_lookup_player* cmsg_lookup_player::default_instance_ = NULL;

cmsg_lookup_player* cmsg_lookup_player::New() const {
  return new cmsg_lookup_player;
}

void cmsg_lookup_player::Clear() {
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cmsg_lookup_player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.cmsg_lookup_player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.cmsg_lookup_player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.cmsg_lookup_player)
  return false;
#undef DO_
}

void cmsg_lookup_player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.cmsg_lookup_player)
  // required uint64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.cmsg_lookup_player)
}

::google::protobuf::uint8* cmsg_lookup_player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.cmsg_lookup_player)
  // required uint64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.cmsg_lookup_player)
  return target;
}

int cmsg_lookup_player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cmsg_lookup_player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cmsg_lookup_player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cmsg_lookup_player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cmsg_lookup_player::MergeFrom(const cmsg_lookup_player& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cmsg_lookup_player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmsg_lookup_player::CopyFrom(const cmsg_lookup_player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmsg_lookup_player::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void cmsg_lookup_player::Swap(cmsg_lookup_player* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cmsg_lookup_player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cmsg_lookup_player_descriptor_;
  metadata.reflection = cmsg_lookup_player_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_lookup_player::kGuidFieldNumber;
const int smsg_lookup_player::kNameFieldNumber;
const int smsg_lookup_player::kLevelFieldNumber;
const int smsg_lookup_player::kProfessionFieldNumber;
const int smsg_lookup_player::kSexFieldNumber;
const int smsg_lookup_player::kRoleIdFieldNumber;
const int smsg_lookup_player::kPrestigeFieldNumber;
const int smsg_lookup_player::kAttributesFieldNumber;
const int smsg_lookup_player::kRolesFieldNumber;
#endif  // !_MSC_VER

smsg_lookup_player::smsg_lookup_player()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_lookup_player)
}

void smsg_lookup_player::InitAsDefaultInstance() {
}

smsg_lookup_player::smsg_lookup_player(const smsg_lookup_player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_lookup_player)
}

void smsg_lookup_player::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0u;
  profession_ = 0;
  sex_ = 0;
  role_id_ = 0;
  prestige_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_lookup_player::~smsg_lookup_player() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_lookup_player)
  SharedDtor();
}

void smsg_lookup_player::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void smsg_lookup_player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_lookup_player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_lookup_player_descriptor_;
}

const smsg_lookup_player& smsg_lookup_player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_lookup_player* smsg_lookup_player::default_instance_ = NULL;

smsg_lookup_player* smsg_lookup_player::New() const {
  return new smsg_lookup_player;
}

void smsg_lookup_player::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<smsg_lookup_player*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(level_, role_id_);
    guid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    prestige_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  attributes_.Clear();
  roles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_lookup_player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_lookup_player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_profession;
        break;
      }

      // optional int32 profession = 5;
      case 5: {
        if (tag == 40) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }

      // optional int32 sex = 6;
      case 6: {
        if (tag == 48) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_role_id;
        break;
      }

      // optional int32 role_id = 16;
      case 16: {
        if (tag == 128) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_prestige;
        break;
      }

      // optional uint32 prestige = 17;
      case 17: {
        if (tag == 136) {
         parse_prestige:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prestige_)));
          set_has_prestige();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_attributes;
        break;
      }

      // repeated uint32 attributes = 22;
      case 22: {
        if (tag == 176) {
         parse_attributes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 176, input, this->mutable_attributes())));
        } else if (tag == 178) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_attributes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_attributes;
        if (input->ExpectTag(184)) goto parse_roles;
        break;
      }

      // repeated uint64 roles = 23;
      case 23: {
        if (tag == 184) {
         parse_roles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 184, input, this->mutable_roles())));
        } else if (tag == 186) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_roles())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_roles;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_lookup_player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_lookup_player)
  return false;
#undef DO_
}

void smsg_lookup_player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_lookup_player)
  // required uint64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional int32 profession = 5;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->profession(), output);
  }

  // optional int32 sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sex(), output);
  }

  // optional int32 role_id = 16;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->role_id(), output);
  }

  // optional uint32 prestige = 17;
  if (has_prestige()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->prestige(), output);
  }

  // repeated uint32 attributes = 22;
  for (int i = 0; i < this->attributes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      22, this->attributes(i), output);
  }

  // repeated uint64 roles = 23;
  for (int i = 0; i < this->roles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      23, this->roles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_lookup_player)
}

::google::protobuf::uint8* smsg_lookup_player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_lookup_player)
  // required uint64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // optional int32 profession = 5;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->profession(), target);
  }

  // optional int32 sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sex(), target);
  }

  // optional int32 role_id = 16;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->role_id(), target);
  }

  // optional uint32 prestige = 17;
  if (has_prestige()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->prestige(), target);
  }

  // repeated uint32 attributes = 22;
  for (int i = 0; i < this->attributes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(22, this->attributes(i), target);
  }

  // repeated uint64 roles = 23;
  for (int i = 0; i < this->roles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(23, this->roles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_lookup_player)
  return target;
}

int smsg_lookup_player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional int32 profession = 5;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }

    // optional int32 sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional int32 role_id = 16;
    if (has_role_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_id());
    }

    // optional uint32 prestige = 17;
    if (has_prestige()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prestige());
    }

  }
  // repeated uint32 attributes = 22;
  {
    int data_size = 0;
    for (int i = 0; i < this->attributes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->attributes(i));
    }
    total_size += 2 * this->attributes_size() + data_size;
  }

  // repeated uint64 roles = 23;
  {
    int data_size = 0;
    for (int i = 0; i < this->roles_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->roles(i));
    }
    total_size += 2 * this->roles_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_lookup_player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_lookup_player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_lookup_player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_lookup_player::MergeFrom(const smsg_lookup_player& from) {
  GOOGLE_CHECK_NE(&from, this);
  attributes_.MergeFrom(from.attributes_);
  roles_.MergeFrom(from.roles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_prestige()) {
      set_prestige(from.prestige());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_lookup_player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_lookup_player::CopyFrom(const smsg_lookup_player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_lookup_player::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void smsg_lookup_player::Swap(smsg_lookup_player* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(profession_, other->profession_);
    std::swap(sex_, other->sex_);
    std::swap(role_id_, other->role_id_);
    std::swap(prestige_, other->prestige_);
    attributes_.Swap(&other->attributes_);
    roles_.Swap(&other->roles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_lookup_player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_lookup_player_descriptor_;
  metadata.reflection = smsg_lookup_player_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_create_item::kGuidFieldNumber;
const int smsg_create_item::kPlayerFieldNumber;
const int smsg_create_item::kRoleFieldNumber;
const int smsg_create_item::kIdFieldNumber;
const int smsg_create_item::kNumFieldNumber;
const int smsg_create_item::kStrengthLevelFieldNumber;
const int smsg_create_item::kLocationFieldNumber;
const int smsg_create_item::kPosFieldNumber;
const int smsg_create_item::kPriceFieldNumber;
const int smsg_create_item::kAttributeIdFieldNumber;
const int smsg_create_item::kAttributeValueFieldNumber;
const int smsg_create_item::kColorFieldNumber;
const int smsg_create_item::kWifeFieldNumber;
const int smsg_create_item::kGemsFieldNumber;
#endif  // !_MSC_VER

smsg_create_item::smsg_create_item()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_create_item)
}

void smsg_create_item::InitAsDefaultInstance() {
}

smsg_create_item::smsg_create_item(const smsg_create_item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_create_item)
}

void smsg_create_item::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  player_ = GOOGLE_ULONGLONG(0);
  role_ = GOOGLE_ULONGLONG(0);
  id_ = 0u;
  num_ = 0u;
  strength_level_ = 0u;
  location_ = 0u;
  pos_ = 0u;
  price_ = 0u;
  color_ = 0u;
  wife_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_create_item::~smsg_create_item() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_create_item)
  SharedDtor();
}

void smsg_create_item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void smsg_create_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_create_item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_create_item_descriptor_;
}

const smsg_create_item& smsg_create_item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_create_item* smsg_create_item::default_instance_ = NULL;

smsg_create_item* smsg_create_item::New() const {
  return new smsg_create_item;
}

void smsg_create_item::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<smsg_create_item*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(guid_, pos_);
  }
  if (_has_bits_[8 / 32] & 6400) {
    price_ = 0u;
    color_ = 0u;
    wife_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  attribute_id_.Clear();
  attribute_value_.Clear();
  gems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_create_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_create_item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player;
        break;
      }

      // required uint64 player = 2;
      case 2: {
        if (tag == 16) {
         parse_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_)));
          set_has_player();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_role;
        break;
      }

      // required uint64 role = 3;
      case 3: {
        if (tag == 24) {
         parse_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_)));
          set_has_role();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // required uint32 id = 4;
      case 4: {
        if (tag == 32) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_num;
        break;
      }

      // optional uint32 num = 5;
      case 5: {
        if (tag == 40) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_strength_level;
        break;
      }

      // optional uint32 strength_level = 6;
      case 6: {
        if (tag == 48) {
         parse_strength_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strength_level_)));
          set_has_strength_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_location;
        break;
      }

      // optional uint32 location = 7;
      case 7: {
        if (tag == 56) {
         parse_location:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &location_)));
          set_has_location();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 8;
      case 8: {
        if (tag == 64) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_price;
        break;
      }

      // optional uint32 price = 9;
      case 9: {
        if (tag == 72) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_attribute_id;
        break;
      }

      // repeated uint32 attribute_id = 10;
      case 10: {
        if (tag == 80) {
         parse_attribute_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80, input, this->mutable_attribute_id())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_attribute_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_attribute_id;
        if (input->ExpectTag(88)) goto parse_attribute_value;
        break;
      }

      // repeated int32 attribute_value = 11;
      case 11: {
        if (tag == 88) {
         parse_attribute_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_attribute_value())));
        } else if (tag == 90) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_attribute_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_attribute_value;
        if (input->ExpectTag(96)) goto parse_color;
        break;
      }

      // optional uint32 color = 12;
      case 12: {
        if (tag == 96) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_wife;
        break;
      }

      // optional uint64 wife = 13;
      case 13: {
        if (tag == 104) {
         parse_wife:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &wife_)));
          set_has_wife();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_gems;
        break;
      }

      // repeated uint32 gems = 14;
      case 14: {
        if (tag == 112) {
         parse_gems:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 112, input, this->mutable_gems())));
        } else if (tag == 114) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_gems())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_gems;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_create_item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_create_item)
  return false;
#undef DO_
}

void smsg_create_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_create_item)
  // required uint64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // required uint64 player = 2;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->player(), output);
  }

  // required uint64 role = 3;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role(), output);
  }

  // required uint32 id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->id(), output);
  }

  // optional uint32 num = 5;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->num(), output);
  }

  // optional uint32 strength_level = 6;
  if (has_strength_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->strength_level(), output);
  }

  // optional uint32 location = 7;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->location(), output);
  }

  // optional uint32 pos = 8;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->pos(), output);
  }

  // optional uint32 price = 9;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->price(), output);
  }

  // repeated uint32 attribute_id = 10;
  for (int i = 0; i < this->attribute_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->attribute_id(i), output);
  }

  // repeated int32 attribute_value = 11;
  for (int i = 0; i < this->attribute_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->attribute_value(i), output);
  }

  // optional uint32 color = 12;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->color(), output);
  }

  // optional uint64 wife = 13;
  if (has_wife()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->wife(), output);
  }

  // repeated uint32 gems = 14;
  for (int i = 0; i < this->gems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      14, this->gems(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_create_item)
}

::google::protobuf::uint8* smsg_create_item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_create_item)
  // required uint64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // required uint64 player = 2;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->player(), target);
  }

  // required uint64 role = 3;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role(), target);
  }

  // required uint32 id = 4;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->id(), target);
  }

  // optional uint32 num = 5;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->num(), target);
  }

  // optional uint32 strength_level = 6;
  if (has_strength_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->strength_level(), target);
  }

  // optional uint32 location = 7;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->location(), target);
  }

  // optional uint32 pos = 8;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->pos(), target);
  }

  // optional uint32 price = 9;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->price(), target);
  }

  // repeated uint32 attribute_id = 10;
  for (int i = 0; i < this->attribute_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(10, this->attribute_id(i), target);
  }

  // repeated int32 attribute_value = 11;
  for (int i = 0; i < this->attribute_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->attribute_value(i), target);
  }

  // optional uint32 color = 12;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->color(), target);
  }

  // optional uint64 wife = 13;
  if (has_wife()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->wife(), target);
  }

  // repeated uint32 gems = 14;
  for (int i = 0; i < this->gems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(14, this->gems(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_create_item)
  return target;
}

int smsg_create_item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // required uint64 player = 2;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player());
    }

    // required uint64 role = 3;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role());
    }

    // required uint32 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 num = 5;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint32 strength_level = 6;
    if (has_strength_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strength_level());
    }

    // optional uint32 location = 7;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->location());
    }

    // optional uint32 pos = 8;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 price = 9;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

    // optional uint32 color = 12;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color());
    }

    // optional uint64 wife = 13;
    if (has_wife()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->wife());
    }

  }
  // repeated uint32 attribute_id = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->attribute_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->attribute_id(i));
    }
    total_size += 1 * this->attribute_id_size() + data_size;
  }

  // repeated int32 attribute_value = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->attribute_value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->attribute_value(i));
    }
    total_size += 1 * this->attribute_value_size() + data_size;
  }

  // repeated uint32 gems = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->gems_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->gems(i));
    }
    total_size += 1 * this->gems_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_create_item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_create_item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_create_item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_create_item::MergeFrom(const smsg_create_item& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_id_.MergeFrom(from.attribute_id_);
  attribute_value_.MergeFrom(from.attribute_value_);
  gems_.MergeFrom(from.gems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_player()) {
      set_player(from.player());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_strength_level()) {
      set_strength_level(from.strength_level());
    }
    if (from.has_location()) {
      set_location(from.location());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_wife()) {
      set_wife(from.wife());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_create_item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_create_item::CopyFrom(const smsg_create_item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_create_item::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void smsg_create_item::Swap(smsg_create_item* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(player_, other->player_);
    std::swap(role_, other->role_);
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(strength_level_, other->strength_level_);
    std::swap(location_, other->location_);
    std::swap(pos_, other->pos_);
    std::swap(price_, other->price_);
    attribute_id_.Swap(&other->attribute_id_);
    attribute_value_.Swap(&other->attribute_value_);
    std::swap(color_, other->color_);
    std::swap(wife_, other->wife_);
    gems_.Swap(&other->gems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_create_item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_create_item_descriptor_;
  metadata.reflection = smsg_create_item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_role_remove::kPlayerGuidFieldNumber;
const int smsg_role_remove::kRoleGuidFieldNumber;
#endif  // !_MSC_VER

smsg_role_remove::smsg_role_remove()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_role_remove)
}

void smsg_role_remove::InitAsDefaultInstance() {
}

smsg_role_remove::smsg_role_remove(const smsg_role_remove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_role_remove)
}

void smsg_role_remove::SharedCtor() {
  _cached_size_ = 0;
  player_guid_ = GOOGLE_ULONGLONG(0);
  role_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_role_remove::~smsg_role_remove() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_role_remove)
  SharedDtor();
}

void smsg_role_remove::SharedDtor() {
  if (this != default_instance_) {
  }
}

void smsg_role_remove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_role_remove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_role_remove_descriptor_;
}

const smsg_role_remove& smsg_role_remove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_role_remove* smsg_role_remove::default_instance_ = NULL;

smsg_role_remove* smsg_role_remove::New() const {
  return new smsg_role_remove;
}

void smsg_role_remove::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<smsg_role_remove*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(player_guid_, role_guid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_role_remove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_role_remove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 player_guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_guid_)));
          set_has_player_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_role_guid;
        break;
      }

      // required uint64 role_guid = 2;
      case 2: {
        if (tag == 16) {
         parse_role_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_guid_)));
          set_has_role_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_role_remove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_role_remove)
  return false;
#undef DO_
}

void smsg_role_remove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_role_remove)
  // required uint64 player_guid = 1;
  if (has_player_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_guid(), output);
  }

  // required uint64 role_guid = 2;
  if (has_role_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_role_remove)
}

::google::protobuf::uint8* smsg_role_remove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_role_remove)
  // required uint64 player_guid = 1;
  if (has_player_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_guid(), target);
  }

  // required uint64 role_guid = 2;
  if (has_role_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_role_remove)
  return target;
}

int smsg_role_remove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 player_guid = 1;
    if (has_player_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_guid());
    }

    // required uint64 role_guid = 2;
    if (has_role_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_role_remove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_role_remove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_role_remove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_role_remove::MergeFrom(const smsg_role_remove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_guid()) {
      set_player_guid(from.player_guid());
    }
    if (from.has_role_guid()) {
      set_role_guid(from.role_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_role_remove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_role_remove::CopyFrom(const smsg_role_remove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_role_remove::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void smsg_role_remove::Swap(smsg_role_remove* other) {
  if (other != this) {
    std::swap(player_guid_, other->player_guid_);
    std::swap(role_guid_, other->role_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_role_remove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_role_remove_descriptor_;
  metadata.reflection = smsg_role_remove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cmsg_player_move::kSrcXFieldNumber;
const int cmsg_player_move::kSrcYFieldNumber;
const int cmsg_player_move::kDstXFieldNumber;
const int cmsg_player_move::kDstYFieldNumber;
#endif  // !_MSC_VER

cmsg_player_move::cmsg_player_move()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.cmsg_player_move)
}

void cmsg_player_move::InitAsDefaultInstance() {
}

cmsg_player_move::cmsg_player_move(const cmsg_player_move& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.cmsg_player_move)
}

void cmsg_player_move::SharedCtor() {
  _cached_size_ = 0;
  src_x_ = 0;
  src_y_ = 0;
  dst_x_ = 0;
  dst_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cmsg_player_move::~cmsg_player_move() {
  // @@protoc_insertion_point(destructor:typed.protocol.cmsg_player_move)
  SharedDtor();
}

void cmsg_player_move::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cmsg_player_move::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cmsg_player_move::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cmsg_player_move_descriptor_;
}

const cmsg_player_move& cmsg_player_move::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

cmsg_player_move* cmsg_player_move::default_instance_ = NULL;

cmsg_player_move* cmsg_player_move::New() const {
  return new cmsg_player_move;
}

void cmsg_player_move::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<cmsg_player_move*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(src_x_, dst_y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cmsg_player_move::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.cmsg_player_move)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float src_x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &src_x_)));
          set_has_src_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_src_y;
        break;
      }

      // optional float src_y = 2;
      case 2: {
        if (tag == 21) {
         parse_src_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &src_y_)));
          set_has_src_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_dst_x;
        break;
      }

      // optional float dst_x = 3;
      case 3: {
        if (tag == 29) {
         parse_dst_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dst_x_)));
          set_has_dst_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_dst_y;
        break;
      }

      // optional float dst_y = 4;
      case 4: {
        if (tag == 37) {
         parse_dst_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dst_y_)));
          set_has_dst_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.cmsg_player_move)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.cmsg_player_move)
  return false;
#undef DO_
}

void cmsg_player_move::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.cmsg_player_move)
  // optional float src_x = 1;
  if (has_src_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->src_x(), output);
  }

  // optional float src_y = 2;
  if (has_src_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->src_y(), output);
  }

  // optional float dst_x = 3;
  if (has_dst_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dst_x(), output);
  }

  // optional float dst_y = 4;
  if (has_dst_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->dst_y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.cmsg_player_move)
}

::google::protobuf::uint8* cmsg_player_move::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.cmsg_player_move)
  // optional float src_x = 1;
  if (has_src_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->src_x(), target);
  }

  // optional float src_y = 2;
  if (has_src_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->src_y(), target);
  }

  // optional float dst_x = 3;
  if (has_dst_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dst_x(), target);
  }

  // optional float dst_y = 4;
  if (has_dst_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->dst_y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.cmsg_player_move)
  return target;
}

int cmsg_player_move::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float src_x = 1;
    if (has_src_x()) {
      total_size += 1 + 4;
    }

    // optional float src_y = 2;
    if (has_src_y()) {
      total_size += 1 + 4;
    }

    // optional float dst_x = 3;
    if (has_dst_x()) {
      total_size += 1 + 4;
    }

    // optional float dst_y = 4;
    if (has_dst_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cmsg_player_move::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cmsg_player_move* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cmsg_player_move*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cmsg_player_move::MergeFrom(const cmsg_player_move& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_x()) {
      set_src_x(from.src_x());
    }
    if (from.has_src_y()) {
      set_src_y(from.src_y());
    }
    if (from.has_dst_x()) {
      set_dst_x(from.dst_x());
    }
    if (from.has_dst_y()) {
      set_dst_y(from.dst_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cmsg_player_move::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmsg_player_move::CopyFrom(const cmsg_player_move& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmsg_player_move::IsInitialized() const {

  return true;
}

void cmsg_player_move::Swap(cmsg_player_move* other) {
  if (other != this) {
    std::swap(src_x_, other->src_x_);
    std::swap(src_y_, other->src_y_);
    std::swap(dst_x_, other->dst_x_);
    std::swap(dst_y_, other->dst_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cmsg_player_move::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cmsg_player_move_descriptor_;
  metadata.reflection = cmsg_player_move_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_player_move::kGuidFieldNumber;
const int smsg_player_move::kSrcXFieldNumber;
const int smsg_player_move::kSrcYFieldNumber;
const int smsg_player_move::kDstXFieldNumber;
const int smsg_player_move::kDstYFieldNumber;
#endif  // !_MSC_VER

smsg_player_move::smsg_player_move()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_player_move)
}

void smsg_player_move::InitAsDefaultInstance() {
}

smsg_player_move::smsg_player_move(const smsg_player_move& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_player_move)
}

void smsg_player_move::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  src_x_ = 0;
  src_y_ = 0;
  dst_x_ = 0;
  dst_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_player_move::~smsg_player_move() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_player_move)
  SharedDtor();
}

void smsg_player_move::SharedDtor() {
  if (this != default_instance_) {
  }
}

void smsg_player_move::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_player_move::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_player_move_descriptor_;
}

const smsg_player_move& smsg_player_move::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_player_move* smsg_player_move::default_instance_ = NULL;

smsg_player_move* smsg_player_move::New() const {
  return new smsg_player_move;
}

void smsg_player_move::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<smsg_player_move*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(guid_, dst_y_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_player_move::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_player_move)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_src_x;
        break;
      }

      // optional float src_x = 2;
      case 2: {
        if (tag == 21) {
         parse_src_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &src_x_)));
          set_has_src_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_src_y;
        break;
      }

      // optional float src_y = 3;
      case 3: {
        if (tag == 29) {
         parse_src_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &src_y_)));
          set_has_src_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_dst_x;
        break;
      }

      // optional float dst_x = 4;
      case 4: {
        if (tag == 37) {
         parse_dst_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dst_x_)));
          set_has_dst_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_dst_y;
        break;
      }

      // optional float dst_y = 5;
      case 5: {
        if (tag == 45) {
         parse_dst_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dst_y_)));
          set_has_dst_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_player_move)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_player_move)
  return false;
#undef DO_
}

void smsg_player_move::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_player_move)
  // required uint64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // optional float src_x = 2;
  if (has_src_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->src_x(), output);
  }

  // optional float src_y = 3;
  if (has_src_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->src_y(), output);
  }

  // optional float dst_x = 4;
  if (has_dst_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->dst_x(), output);
  }

  // optional float dst_y = 5;
  if (has_dst_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->dst_y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_player_move)
}

::google::protobuf::uint8* smsg_player_move::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_player_move)
  // required uint64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // optional float src_x = 2;
  if (has_src_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->src_x(), target);
  }

  // optional float src_y = 3;
  if (has_src_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->src_y(), target);
  }

  // optional float dst_x = 4;
  if (has_dst_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->dst_x(), target);
  }

  // optional float dst_y = 5;
  if (has_dst_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->dst_y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_player_move)
  return target;
}

int smsg_player_move::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional float src_x = 2;
    if (has_src_x()) {
      total_size += 1 + 4;
    }

    // optional float src_y = 3;
    if (has_src_y()) {
      total_size += 1 + 4;
    }

    // optional float dst_x = 4;
    if (has_dst_x()) {
      total_size += 1 + 4;
    }

    // optional float dst_y = 5;
    if (has_dst_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_player_move::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_player_move* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_player_move*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_player_move::MergeFrom(const smsg_player_move& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_src_x()) {
      set_src_x(from.src_x());
    }
    if (from.has_src_y()) {
      set_src_y(from.src_y());
    }
    if (from.has_dst_x()) {
      set_dst_x(from.dst_x());
    }
    if (from.has_dst_y()) {
      set_dst_y(from.dst_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_player_move::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_player_move::CopyFrom(const smsg_player_move& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_player_move::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void smsg_player_move::Swap(smsg_player_move* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(src_x_, other->src_x_);
    std::swap(src_y_, other->src_y_);
    std::swap(dst_x_, other->dst_x_);
    std::swap(dst_y_, other->dst_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_player_move::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_player_move_descriptor_;
  metadata.reflection = smsg_player_move_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cmsg_player_jump_map::kTargetMapIdFieldNumber;
#endif  // !_MSC_VER

cmsg_player_jump_map::cmsg_player_jump_map()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.cmsg_player_jump_map)
}

void cmsg_player_jump_map::InitAsDefaultInstance() {
}

cmsg_player_jump_map::cmsg_player_jump_map(const cmsg_player_jump_map& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.cmsg_player_jump_map)
}

void cmsg_player_jump_map::SharedCtor() {
  _cached_size_ = 0;
  target_map_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cmsg_player_jump_map::~cmsg_player_jump_map() {
  // @@protoc_insertion_point(destructor:typed.protocol.cmsg_player_jump_map)
  SharedDtor();
}

void cmsg_player_jump_map::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cmsg_player_jump_map::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cmsg_player_jump_map::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cmsg_player_jump_map_descriptor_;
}

const cmsg_player_jump_map& cmsg_player_jump_map::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

cmsg_player_jump_map* cmsg_player_jump_map::default_instance_ = NULL;

cmsg_player_jump_map* cmsg_player_jump_map::New() const {
  return new cmsg_player_jump_map;
}

void cmsg_player_jump_map::Clear() {
  target_map_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cmsg_player_jump_map::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.cmsg_player_jump_map)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 target_map_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_map_id_)));
          set_has_target_map_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.cmsg_player_jump_map)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.cmsg_player_jump_map)
  return false;
#undef DO_
}

void cmsg_player_jump_map::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.cmsg_player_jump_map)
  // required uint32 target_map_id = 1;
  if (has_target_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->target_map_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.cmsg_player_jump_map)
}

::google::protobuf::uint8* cmsg_player_jump_map::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.cmsg_player_jump_map)
  // required uint32 target_map_id = 1;
  if (has_target_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->target_map_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.cmsg_player_jump_map)
  return target;
}

int cmsg_player_jump_map::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 target_map_id = 1;
    if (has_target_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_map_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cmsg_player_jump_map::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cmsg_player_jump_map* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cmsg_player_jump_map*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cmsg_player_jump_map::MergeFrom(const cmsg_player_jump_map& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_map_id()) {
      set_target_map_id(from.target_map_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cmsg_player_jump_map::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmsg_player_jump_map::CopyFrom(const cmsg_player_jump_map& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmsg_player_jump_map::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void cmsg_player_jump_map::Swap(cmsg_player_jump_map* other) {
  if (other != this) {
    std::swap(target_map_id_, other->target_map_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cmsg_player_jump_map::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cmsg_player_jump_map_descriptor_;
  metadata.reflection = cmsg_player_jump_map_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_player_jump_map::kTargetMapIdFieldNumber;
const int smsg_player_jump_map::kSrcXFieldNumber;
const int smsg_player_jump_map::kSrcYFieldNumber;
const int smsg_player_jump_map::kLineNoFieldNumber;
#endif  // !_MSC_VER

smsg_player_jump_map::smsg_player_jump_map()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_player_jump_map)
}

void smsg_player_jump_map::InitAsDefaultInstance() {
}

smsg_player_jump_map::smsg_player_jump_map(const smsg_player_jump_map& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_player_jump_map)
}

void smsg_player_jump_map::SharedCtor() {
  _cached_size_ = 0;
  target_map_id_ = 0u;
  src_x_ = 0u;
  src_y_ = 0u;
  line_no_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_player_jump_map::~smsg_player_jump_map() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_player_jump_map)
  SharedDtor();
}

void smsg_player_jump_map::SharedDtor() {
  if (this != default_instance_) {
  }
}

void smsg_player_jump_map::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_player_jump_map::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_player_jump_map_descriptor_;
}

const smsg_player_jump_map& smsg_player_jump_map::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_player_jump_map* smsg_player_jump_map::default_instance_ = NULL;

smsg_player_jump_map* smsg_player_jump_map::New() const {
  return new smsg_player_jump_map;
}

void smsg_player_jump_map::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<smsg_player_jump_map*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(target_map_id_, line_no_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_player_jump_map::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_player_jump_map)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 target_map_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_map_id_)));
          set_has_target_map_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_src_x;
        break;
      }

      // optional uint32 src_x = 2;
      case 2: {
        if (tag == 16) {
         parse_src_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_x_)));
          set_has_src_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_src_y;
        break;
      }

      // optional uint32 src_y = 3;
      case 3: {
        if (tag == 24) {
         parse_src_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_y_)));
          set_has_src_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_line_no;
        break;
      }

      // optional uint32 line_no = 4;
      case 4: {
        if (tag == 32) {
         parse_line_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &line_no_)));
          set_has_line_no();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_player_jump_map)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_player_jump_map)
  return false;
#undef DO_
}

void smsg_player_jump_map::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_player_jump_map)
  // required uint32 target_map_id = 1;
  if (has_target_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->target_map_id(), output);
  }

  // optional uint32 src_x = 2;
  if (has_src_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->src_x(), output);
  }

  // optional uint32 src_y = 3;
  if (has_src_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->src_y(), output);
  }

  // optional uint32 line_no = 4;
  if (has_line_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->line_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_player_jump_map)
}

::google::protobuf::uint8* smsg_player_jump_map::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_player_jump_map)
  // required uint32 target_map_id = 1;
  if (has_target_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->target_map_id(), target);
  }

  // optional uint32 src_x = 2;
  if (has_src_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->src_x(), target);
  }

  // optional uint32 src_y = 3;
  if (has_src_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->src_y(), target);
  }

  // optional uint32 line_no = 4;
  if (has_line_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->line_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_player_jump_map)
  return target;
}

int smsg_player_jump_map::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 target_map_id = 1;
    if (has_target_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_map_id());
    }

    // optional uint32 src_x = 2;
    if (has_src_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_x());
    }

    // optional uint32 src_y = 3;
    if (has_src_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_y());
    }

    // optional uint32 line_no = 4;
    if (has_line_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->line_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_player_jump_map::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_player_jump_map* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_player_jump_map*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_player_jump_map::MergeFrom(const smsg_player_jump_map& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_map_id()) {
      set_target_map_id(from.target_map_id());
    }
    if (from.has_src_x()) {
      set_src_x(from.src_x());
    }
    if (from.has_src_y()) {
      set_src_y(from.src_y());
    }
    if (from.has_line_no()) {
      set_line_no(from.line_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_player_jump_map::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_player_jump_map::CopyFrom(const smsg_player_jump_map& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_player_jump_map::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void smsg_player_jump_map::Swap(smsg_player_jump_map* other) {
  if (other != this) {
    std::swap(target_map_id_, other->target_map_id_);
    std::swap(src_x_, other->src_x_);
    std::swap(src_y_, other->src_y_);
    std::swap(line_no_, other->line_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_player_jump_map::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_player_jump_map_descriptor_;
  metadata.reflection = smsg_player_jump_map_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_player_upgrade_level::kUpgradeLevelFieldNumber;
const int smsg_player_upgrade_level::kUpgradeExpFieldNumber;
#endif  // !_MSC_VER

smsg_player_upgrade_level::smsg_player_upgrade_level()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_player_upgrade_level)
}

void smsg_player_upgrade_level::InitAsDefaultInstance() {
}

smsg_player_upgrade_level::smsg_player_upgrade_level(const smsg_player_upgrade_level& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_player_upgrade_level)
}

void smsg_player_upgrade_level::SharedCtor() {
  _cached_size_ = 0;
  upgrade_level_ = 0u;
  upgrade_exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_player_upgrade_level::~smsg_player_upgrade_level() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_player_upgrade_level)
  SharedDtor();
}

void smsg_player_upgrade_level::SharedDtor() {
  if (this != default_instance_) {
  }
}

void smsg_player_upgrade_level::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_player_upgrade_level::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_player_upgrade_level_descriptor_;
}

const smsg_player_upgrade_level& smsg_player_upgrade_level::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_player_upgrade_level* smsg_player_upgrade_level::default_instance_ = NULL;

smsg_player_upgrade_level* smsg_player_upgrade_level::New() const {
  return new smsg_player_upgrade_level;
}

void smsg_player_upgrade_level::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<smsg_player_upgrade_level*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(upgrade_level_, upgrade_exp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_player_upgrade_level::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_player_upgrade_level)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 upgrade_level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upgrade_level_)));
          set_has_upgrade_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_upgrade_exp;
        break;
      }

      // required uint32 upgrade_exp = 2;
      case 2: {
        if (tag == 16) {
         parse_upgrade_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upgrade_exp_)));
          set_has_upgrade_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_player_upgrade_level)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_player_upgrade_level)
  return false;
#undef DO_
}

void smsg_player_upgrade_level::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_player_upgrade_level)
  // required uint32 upgrade_level = 1;
  if (has_upgrade_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->upgrade_level(), output);
  }

  // required uint32 upgrade_exp = 2;
  if (has_upgrade_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->upgrade_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_player_upgrade_level)
}

::google::protobuf::uint8* smsg_player_upgrade_level::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_player_upgrade_level)
  // required uint32 upgrade_level = 1;
  if (has_upgrade_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->upgrade_level(), target);
  }

  // required uint32 upgrade_exp = 2;
  if (has_upgrade_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->upgrade_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_player_upgrade_level)
  return target;
}

int smsg_player_upgrade_level::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 upgrade_level = 1;
    if (has_upgrade_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upgrade_level());
    }

    // required uint32 upgrade_exp = 2;
    if (has_upgrade_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upgrade_exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_player_upgrade_level::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_player_upgrade_level* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_player_upgrade_level*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_player_upgrade_level::MergeFrom(const smsg_player_upgrade_level& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_upgrade_level()) {
      set_upgrade_level(from.upgrade_level());
    }
    if (from.has_upgrade_exp()) {
      set_upgrade_exp(from.upgrade_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_player_upgrade_level::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_player_upgrade_level::CopyFrom(const smsg_player_upgrade_level& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_player_upgrade_level::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void smsg_player_upgrade_level::Swap(smsg_player_upgrade_level* other) {
  if (other != this) {
    std::swap(upgrade_level_, other->upgrade_level_);
    std::swap(upgrade_exp_, other->upgrade_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_player_upgrade_level::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_player_upgrade_level_descriptor_;
  metadata.reflection = smsg_player_upgrade_level_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_role_upgrade_level::kRoleGuidFieldNumber;
const int smsg_role_upgrade_level::kUpgradeLevelFieldNumber;
const int smsg_role_upgrade_level::kUpgradeExpFieldNumber;
const int smsg_role_upgrade_level::kUpgradeHpFieldNumber;
#endif  // !_MSC_VER

smsg_role_upgrade_level::smsg_role_upgrade_level()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_role_upgrade_level)
}

void smsg_role_upgrade_level::InitAsDefaultInstance() {
}

smsg_role_upgrade_level::smsg_role_upgrade_level(const smsg_role_upgrade_level& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_role_upgrade_level)
}

void smsg_role_upgrade_level::SharedCtor() {
  _cached_size_ = 0;
  role_guid_ = GOOGLE_ULONGLONG(0);
  upgrade_level_ = 0u;
  upgrade_exp_ = 0u;
  upgrade_hp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_role_upgrade_level::~smsg_role_upgrade_level() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_role_upgrade_level)
  SharedDtor();
}

void smsg_role_upgrade_level::SharedDtor() {
  if (this != default_instance_) {
  }
}

void smsg_role_upgrade_level::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_role_upgrade_level::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_role_upgrade_level_descriptor_;
}

const smsg_role_upgrade_level& smsg_role_upgrade_level::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_role_upgrade_level* smsg_role_upgrade_level::default_instance_ = NULL;

smsg_role_upgrade_level* smsg_role_upgrade_level::New() const {
  return new smsg_role_upgrade_level;
}

void smsg_role_upgrade_level::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<smsg_role_upgrade_level*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(role_guid_, upgrade_hp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_role_upgrade_level::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_role_upgrade_level)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 role_guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_guid_)));
          set_has_role_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_upgrade_level;
        break;
      }

      // required uint32 upgrade_level = 2;
      case 2: {
        if (tag == 16) {
         parse_upgrade_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upgrade_level_)));
          set_has_upgrade_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_upgrade_exp;
        break;
      }

      // required uint32 upgrade_exp = 3;
      case 3: {
        if (tag == 24) {
         parse_upgrade_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upgrade_exp_)));
          set_has_upgrade_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_upgrade_hp;
        break;
      }

      // required uint32 upgrade_hp = 4;
      case 4: {
        if (tag == 32) {
         parse_upgrade_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upgrade_hp_)));
          set_has_upgrade_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_role_upgrade_level)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_role_upgrade_level)
  return false;
#undef DO_
}

void smsg_role_upgrade_level::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_role_upgrade_level)
  // required uint64 role_guid = 1;
  if (has_role_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_guid(), output);
  }

  // required uint32 upgrade_level = 2;
  if (has_upgrade_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->upgrade_level(), output);
  }

  // required uint32 upgrade_exp = 3;
  if (has_upgrade_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->upgrade_exp(), output);
  }

  // required uint32 upgrade_hp = 4;
  if (has_upgrade_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->upgrade_hp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_role_upgrade_level)
}

::google::protobuf::uint8* smsg_role_upgrade_level::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_role_upgrade_level)
  // required uint64 role_guid = 1;
  if (has_role_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_guid(), target);
  }

  // required uint32 upgrade_level = 2;
  if (has_upgrade_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->upgrade_level(), target);
  }

  // required uint32 upgrade_exp = 3;
  if (has_upgrade_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->upgrade_exp(), target);
  }

  // required uint32 upgrade_hp = 4;
  if (has_upgrade_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->upgrade_hp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_role_upgrade_level)
  return target;
}

int smsg_role_upgrade_level::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 role_guid = 1;
    if (has_role_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_guid());
    }

    // required uint32 upgrade_level = 2;
    if (has_upgrade_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upgrade_level());
    }

    // required uint32 upgrade_exp = 3;
    if (has_upgrade_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upgrade_exp());
    }

    // required uint32 upgrade_hp = 4;
    if (has_upgrade_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upgrade_hp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_role_upgrade_level::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_role_upgrade_level* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_role_upgrade_level*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_role_upgrade_level::MergeFrom(const smsg_role_upgrade_level& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_guid()) {
      set_role_guid(from.role_guid());
    }
    if (from.has_upgrade_level()) {
      set_upgrade_level(from.upgrade_level());
    }
    if (from.has_upgrade_exp()) {
      set_upgrade_exp(from.upgrade_exp());
    }
    if (from.has_upgrade_hp()) {
      set_upgrade_hp(from.upgrade_hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_role_upgrade_level::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_role_upgrade_level::CopyFrom(const smsg_role_upgrade_level& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_role_upgrade_level::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void smsg_role_upgrade_level::Swap(smsg_role_upgrade_level* other) {
  if (other != this) {
    std::swap(role_guid_, other->role_guid_);
    std::swap(upgrade_level_, other->upgrade_level_);
    std::swap(upgrade_exp_, other->upgrade_exp_);
    std::swap(upgrade_hp_, other->upgrade_hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_role_upgrade_level::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_role_upgrade_level_descriptor_;
  metadata.reflection = smsg_role_upgrade_level_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cmsg_loopback::kSendtimeFieldNumber;
const int cmsg_loopback::kLogicRunElapseFieldNumber;
const int cmsg_loopback::kGsRunElapseFieldNumber;
#endif  // !_MSC_VER

cmsg_loopback::cmsg_loopback()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.cmsg_loopback)
}

void cmsg_loopback::InitAsDefaultInstance() {
}

cmsg_loopback::cmsg_loopback(const cmsg_loopback& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.cmsg_loopback)
}

void cmsg_loopback::SharedCtor() {
  _cached_size_ = 0;
  sendtime_ = GOOGLE_ULONGLONG(0);
  logic_run_elapse_ = GOOGLE_ULONGLONG(0);
  gs_run_elapse_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cmsg_loopback::~cmsg_loopback() {
  // @@protoc_insertion_point(destructor:typed.protocol.cmsg_loopback)
  SharedDtor();
}

void cmsg_loopback::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cmsg_loopback::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cmsg_loopback::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cmsg_loopback_descriptor_;
}

const cmsg_loopback& cmsg_loopback::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

cmsg_loopback* cmsg_loopback::default_instance_ = NULL;

cmsg_loopback* cmsg_loopback::New() const {
  return new cmsg_loopback;
}

void cmsg_loopback::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<cmsg_loopback*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(sendtime_, gs_run_elapse_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cmsg_loopback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.cmsg_loopback)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 sendtime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sendtime_)));
          set_has_sendtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_logic_run_elapse;
        break;
      }

      // optional uint64 logic_run_elapse = 2;
      case 2: {
        if (tag == 16) {
         parse_logic_run_elapse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logic_run_elapse_)));
          set_has_logic_run_elapse();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gs_run_elapse;
        break;
      }

      // optional uint64 gs_run_elapse = 3;
      case 3: {
        if (tag == 24) {
         parse_gs_run_elapse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gs_run_elapse_)));
          set_has_gs_run_elapse();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.cmsg_loopback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.cmsg_loopback)
  return false;
#undef DO_
}

void cmsg_loopback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.cmsg_loopback)
  // required uint64 sendtime = 1;
  if (has_sendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sendtime(), output);
  }

  // optional uint64 logic_run_elapse = 2;
  if (has_logic_run_elapse()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->logic_run_elapse(), output);
  }

  // optional uint64 gs_run_elapse = 3;
  if (has_gs_run_elapse()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->gs_run_elapse(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.cmsg_loopback)
}

::google::protobuf::uint8* cmsg_loopback::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.cmsg_loopback)
  // required uint64 sendtime = 1;
  if (has_sendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sendtime(), target);
  }

  // optional uint64 logic_run_elapse = 2;
  if (has_logic_run_elapse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->logic_run_elapse(), target);
  }

  // optional uint64 gs_run_elapse = 3;
  if (has_gs_run_elapse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->gs_run_elapse(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.cmsg_loopback)
  return target;
}

int cmsg_loopback::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 sendtime = 1;
    if (has_sendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sendtime());
    }

    // optional uint64 logic_run_elapse = 2;
    if (has_logic_run_elapse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logic_run_elapse());
    }

    // optional uint64 gs_run_elapse = 3;
    if (has_gs_run_elapse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gs_run_elapse());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cmsg_loopback::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cmsg_loopback* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cmsg_loopback*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cmsg_loopback::MergeFrom(const cmsg_loopback& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sendtime()) {
      set_sendtime(from.sendtime());
    }
    if (from.has_logic_run_elapse()) {
      set_logic_run_elapse(from.logic_run_elapse());
    }
    if (from.has_gs_run_elapse()) {
      set_gs_run_elapse(from.gs_run_elapse());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cmsg_loopback::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmsg_loopback::CopyFrom(const cmsg_loopback& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmsg_loopback::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void cmsg_loopback::Swap(cmsg_loopback* other) {
  if (other != this) {
    std::swap(sendtime_, other->sendtime_);
    std::swap(logic_run_elapse_, other->logic_run_elapse_);
    std::swap(gs_run_elapse_, other->gs_run_elapse_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cmsg_loopback::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cmsg_loopback_descriptor_;
  metadata.reflection = cmsg_loopback_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_money_update::kCurrMoneyFieldNumber;
const int smsg_money_update::kCurrCoinFieldNumber;
const int smsg_money_update::kCurrSeniorityFieldNumber;
#endif  // !_MSC_VER

smsg_money_update::smsg_money_update()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_money_update)
}

void smsg_money_update::InitAsDefaultInstance() {
}

smsg_money_update::smsg_money_update(const smsg_money_update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_money_update)
}

void smsg_money_update::SharedCtor() {
  _cached_size_ = 0;
  curr_money_ = 0;
  curr_coin_ = 0;
  curr_seniority_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_money_update::~smsg_money_update() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_money_update)
  SharedDtor();
}

void smsg_money_update::SharedDtor() {
  if (this != default_instance_) {
  }
}

void smsg_money_update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_money_update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_money_update_descriptor_;
}

const smsg_money_update& smsg_money_update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_money_update* smsg_money_update::default_instance_ = NULL;

smsg_money_update* smsg_money_update::New() const {
  return new smsg_money_update;
}

void smsg_money_update::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<smsg_money_update*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(curr_money_, curr_seniority_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_money_update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_money_update)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 curr_money = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curr_money_)));
          set_has_curr_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_curr_coin;
        break;
      }

      // optional int32 curr_coin = 2;
      case 2: {
        if (tag == 16) {
         parse_curr_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curr_coin_)));
          set_has_curr_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curr_seniority;
        break;
      }

      // optional int32 curr_seniority = 3;
      case 3: {
        if (tag == 24) {
         parse_curr_seniority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curr_seniority_)));
          set_has_curr_seniority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_money_update)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_money_update)
  return false;
#undef DO_
}

void smsg_money_update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_money_update)
  // optional int32 curr_money = 1;
  if (has_curr_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->curr_money(), output);
  }

  // optional int32 curr_coin = 2;
  if (has_curr_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->curr_coin(), output);
  }

  // optional int32 curr_seniority = 3;
  if (has_curr_seniority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->curr_seniority(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_money_update)
}

::google::protobuf::uint8* smsg_money_update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_money_update)
  // optional int32 curr_money = 1;
  if (has_curr_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->curr_money(), target);
  }

  // optional int32 curr_coin = 2;
  if (has_curr_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->curr_coin(), target);
  }

  // optional int32 curr_seniority = 3;
  if (has_curr_seniority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->curr_seniority(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_money_update)
  return target;
}

int smsg_money_update::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 curr_money = 1;
    if (has_curr_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curr_money());
    }

    // optional int32 curr_coin = 2;
    if (has_curr_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curr_coin());
    }

    // optional int32 curr_seniority = 3;
    if (has_curr_seniority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curr_seniority());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_money_update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_money_update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_money_update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_money_update::MergeFrom(const smsg_money_update& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curr_money()) {
      set_curr_money(from.curr_money());
    }
    if (from.has_curr_coin()) {
      set_curr_coin(from.curr_coin());
    }
    if (from.has_curr_seniority()) {
      set_curr_seniority(from.curr_seniority());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_money_update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_money_update::CopyFrom(const smsg_money_update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_money_update::IsInitialized() const {

  return true;
}

void smsg_money_update::Swap(smsg_money_update* other) {
  if (other != this) {
    std::swap(curr_money_, other->curr_money_);
    std::swap(curr_coin_, other->curr_coin_);
    std::swap(curr_seniority_, other->curr_seniority_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_money_update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_money_update_descriptor_;
  metadata.reflection = smsg_money_update_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_update_role_attr::kRoleGuidFieldNumber;
const int smsg_update_role_attr::kAttrIndexFieldNumber;
const int smsg_update_role_attr::kAttrValueFieldNumber;
#endif  // !_MSC_VER

smsg_update_role_attr::smsg_update_role_attr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_update_role_attr)
}

void smsg_update_role_attr::InitAsDefaultInstance() {
}

smsg_update_role_attr::smsg_update_role_attr(const smsg_update_role_attr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_update_role_attr)
}

void smsg_update_role_attr::SharedCtor() {
  _cached_size_ = 0;
  role_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_update_role_attr::~smsg_update_role_attr() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_update_role_attr)
  SharedDtor();
}

void smsg_update_role_attr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void smsg_update_role_attr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_update_role_attr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_update_role_attr_descriptor_;
}

const smsg_update_role_attr& smsg_update_role_attr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_update_role_attr* smsg_update_role_attr::default_instance_ = NULL;

smsg_update_role_attr* smsg_update_role_attr::New() const {
  return new smsg_update_role_attr;
}

void smsg_update_role_attr::Clear() {
  role_guid_ = GOOGLE_ULONGLONG(0);
  attr_index_.Clear();
  attr_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_update_role_attr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_update_role_attr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 role_guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_guid_)));
          set_has_role_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_attr_index;
        break;
      }

      // repeated uint32 attr_index = 2;
      case 2: {
        if (tag == 16) {
         parse_attr_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_attr_index())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_attr_index())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_attr_index;
        if (input->ExpectTag(24)) goto parse_attr_value;
        break;
      }

      // repeated uint32 attr_value = 3;
      case 3: {
        if (tag == 24) {
         parse_attr_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_attr_value())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_attr_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_attr_value;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_update_role_attr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_update_role_attr)
  return false;
#undef DO_
}

void smsg_update_role_attr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_update_role_attr)
  // required uint64 role_guid = 1;
  if (has_role_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_guid(), output);
  }

  // repeated uint32 attr_index = 2;
  for (int i = 0; i < this->attr_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->attr_index(i), output);
  }

  // repeated uint32 attr_value = 3;
  for (int i = 0; i < this->attr_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->attr_value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_update_role_attr)
}

::google::protobuf::uint8* smsg_update_role_attr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_update_role_attr)
  // required uint64 role_guid = 1;
  if (has_role_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_guid(), target);
  }

  // repeated uint32 attr_index = 2;
  for (int i = 0; i < this->attr_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->attr_index(i), target);
  }

  // repeated uint32 attr_value = 3;
  for (int i = 0; i < this->attr_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->attr_value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_update_role_attr)
  return target;
}

int smsg_update_role_attr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 role_guid = 1;
    if (has_role_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_guid());
    }

  }
  // repeated uint32 attr_index = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->attr_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->attr_index(i));
    }
    total_size += 1 * this->attr_index_size() + data_size;
  }

  // repeated uint32 attr_value = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->attr_value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->attr_value(i));
    }
    total_size += 1 * this->attr_value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_update_role_attr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_update_role_attr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_update_role_attr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_update_role_attr::MergeFrom(const smsg_update_role_attr& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_index_.MergeFrom(from.attr_index_);
  attr_value_.MergeFrom(from.attr_value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_guid()) {
      set_role_guid(from.role_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_update_role_attr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_update_role_attr::CopyFrom(const smsg_update_role_attr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_update_role_attr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void smsg_update_role_attr::Swap(smsg_update_role_attr* other) {
  if (other != this) {
    std::swap(role_guid_, other->role_guid_);
    attr_index_.Swap(&other->attr_index_);
    attr_value_.Swap(&other->attr_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_update_role_attr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_update_role_attr_descriptor_;
  metadata.reflection = smsg_update_role_attr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_update_energy::kCurrEnergyFieldNumber;
#endif  // !_MSC_VER

smsg_update_energy::smsg_update_energy()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_update_energy)
}

void smsg_update_energy::InitAsDefaultInstance() {
}

smsg_update_energy::smsg_update_energy(const smsg_update_energy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_update_energy)
}

void smsg_update_energy::SharedCtor() {
  _cached_size_ = 0;
  curr_energy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_update_energy::~smsg_update_energy() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_update_energy)
  SharedDtor();
}

void smsg_update_energy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void smsg_update_energy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_update_energy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_update_energy_descriptor_;
}

const smsg_update_energy& smsg_update_energy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_update_energy* smsg_update_energy::default_instance_ = NULL;

smsg_update_energy* smsg_update_energy::New() const {
  return new smsg_update_energy;
}

void smsg_update_energy::Clear() {
  curr_energy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_update_energy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_update_energy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 curr_energy = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curr_energy_)));
          set_has_curr_energy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_update_energy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_update_energy)
  return false;
#undef DO_
}

void smsg_update_energy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_update_energy)
  // required int32 curr_energy = 1;
  if (has_curr_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->curr_energy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_update_energy)
}

::google::protobuf::uint8* smsg_update_energy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_update_energy)
  // required int32 curr_energy = 1;
  if (has_curr_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->curr_energy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_update_energy)
  return target;
}

int smsg_update_energy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 curr_energy = 1;
    if (has_curr_energy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curr_energy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_update_energy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_update_energy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_update_energy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_update_energy::MergeFrom(const smsg_update_energy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curr_energy()) {
      set_curr_energy(from.curr_energy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_update_energy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_update_energy::CopyFrom(const smsg_update_energy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_update_energy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void smsg_update_energy::Swap(smsg_update_energy* other) {
  if (other != this) {
    std::swap(curr_energy_, other->curr_energy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_update_energy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_update_energy_descriptor_;
  metadata.reflection = smsg_update_energy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cmsg_request_role_attr_rank::kRoleGuidFieldNumber;
#endif  // !_MSC_VER

cmsg_request_role_attr_rank::cmsg_request_role_attr_rank()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.cmsg_request_role_attr_rank)
}

void cmsg_request_role_attr_rank::InitAsDefaultInstance() {
}

cmsg_request_role_attr_rank::cmsg_request_role_attr_rank(const cmsg_request_role_attr_rank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.cmsg_request_role_attr_rank)
}

void cmsg_request_role_attr_rank::SharedCtor() {
  _cached_size_ = 0;
  role_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cmsg_request_role_attr_rank::~cmsg_request_role_attr_rank() {
  // @@protoc_insertion_point(destructor:typed.protocol.cmsg_request_role_attr_rank)
  SharedDtor();
}

void cmsg_request_role_attr_rank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cmsg_request_role_attr_rank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cmsg_request_role_attr_rank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cmsg_request_role_attr_rank_descriptor_;
}

const cmsg_request_role_attr_rank& cmsg_request_role_attr_rank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

cmsg_request_role_attr_rank* cmsg_request_role_attr_rank::default_instance_ = NULL;

cmsg_request_role_attr_rank* cmsg_request_role_attr_rank::New() const {
  return new cmsg_request_role_attr_rank;
}

void cmsg_request_role_attr_rank::Clear() {
  role_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cmsg_request_role_attr_rank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.cmsg_request_role_attr_rank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 role_guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_guid_)));
          set_has_role_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.cmsg_request_role_attr_rank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.cmsg_request_role_attr_rank)
  return false;
#undef DO_
}

void cmsg_request_role_attr_rank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.cmsg_request_role_attr_rank)
  // required uint64 role_guid = 1;
  if (has_role_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.cmsg_request_role_attr_rank)
}

::google::protobuf::uint8* cmsg_request_role_attr_rank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.cmsg_request_role_attr_rank)
  // required uint64 role_guid = 1;
  if (has_role_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.cmsg_request_role_attr_rank)
  return target;
}

int cmsg_request_role_attr_rank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 role_guid = 1;
    if (has_role_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cmsg_request_role_attr_rank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cmsg_request_role_attr_rank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cmsg_request_role_attr_rank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cmsg_request_role_attr_rank::MergeFrom(const cmsg_request_role_attr_rank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_guid()) {
      set_role_guid(from.role_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cmsg_request_role_attr_rank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmsg_request_role_attr_rank::CopyFrom(const cmsg_request_role_attr_rank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmsg_request_role_attr_rank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void cmsg_request_role_attr_rank::Swap(cmsg_request_role_attr_rank* other) {
  if (other != this) {
    std::swap(role_guid_, other->role_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cmsg_request_role_attr_rank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cmsg_request_role_attr_rank_descriptor_;
  metadata.reflection = cmsg_request_role_attr_rank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_request_role_attr_rank::kRoleGuidFieldNumber;
const int smsg_request_role_attr_rank::kRoleAttrFieldNumber;
#endif  // !_MSC_VER

smsg_request_role_attr_rank::smsg_request_role_attr_rank()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_request_role_attr_rank)
}

void smsg_request_role_attr_rank::InitAsDefaultInstance() {
}

smsg_request_role_attr_rank::smsg_request_role_attr_rank(const smsg_request_role_attr_rank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_request_role_attr_rank)
}

void smsg_request_role_attr_rank::SharedCtor() {
  _cached_size_ = 0;
  role_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_request_role_attr_rank::~smsg_request_role_attr_rank() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_request_role_attr_rank)
  SharedDtor();
}

void smsg_request_role_attr_rank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void smsg_request_role_attr_rank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_request_role_attr_rank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_request_role_attr_rank_descriptor_;
}

const smsg_request_role_attr_rank& smsg_request_role_attr_rank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_request_role_attr_rank* smsg_request_role_attr_rank::default_instance_ = NULL;

smsg_request_role_attr_rank* smsg_request_role_attr_rank::New() const {
  return new smsg_request_role_attr_rank;
}

void smsg_request_role_attr_rank::Clear() {
  role_guid_ = GOOGLE_ULONGLONG(0);
  role_attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_request_role_attr_rank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_request_role_attr_rank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 role_guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_guid_)));
          set_has_role_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_role_attr;
        break;
      }

      // repeated uint32 role_attr = 2;
      case 2: {
        if (tag == 16) {
         parse_role_attr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_role_attr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_role_attr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_role_attr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_request_role_attr_rank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_request_role_attr_rank)
  return false;
#undef DO_
}

void smsg_request_role_attr_rank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_request_role_attr_rank)
  // required uint64 role_guid = 1;
  if (has_role_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_guid(), output);
  }

  // repeated uint32 role_attr = 2;
  for (int i = 0; i < this->role_attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->role_attr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_request_role_attr_rank)
}

::google::protobuf::uint8* smsg_request_role_attr_rank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_request_role_attr_rank)
  // required uint64 role_guid = 1;
  if (has_role_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_guid(), target);
  }

  // repeated uint32 role_attr = 2;
  for (int i = 0; i < this->role_attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->role_attr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_request_role_attr_rank)
  return target;
}

int smsg_request_role_attr_rank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 role_guid = 1;
    if (has_role_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_guid());
    }

  }
  // repeated uint32 role_attr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->role_attr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->role_attr(i));
    }
    total_size += 1 * this->role_attr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_request_role_attr_rank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_request_role_attr_rank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_request_role_attr_rank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_request_role_attr_rank::MergeFrom(const smsg_request_role_attr_rank& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_attr_.MergeFrom(from.role_attr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_guid()) {
      set_role_guid(from.role_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_request_role_attr_rank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_request_role_attr_rank::CopyFrom(const smsg_request_role_attr_rank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_request_role_attr_rank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void smsg_request_role_attr_rank::Swap(smsg_request_role_attr_rank* other) {
  if (other != this) {
    std::swap(role_guid_, other->role_guid_);
    role_attr_.Swap(&other->role_attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_request_role_attr_rank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_request_role_attr_rank_descriptor_;
  metadata.reflection = smsg_request_role_attr_rank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cmsg_request_role_attr::kRoleGuidFieldNumber;
#endif  // !_MSC_VER

cmsg_request_role_attr::cmsg_request_role_attr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.cmsg_request_role_attr)
}

void cmsg_request_role_attr::InitAsDefaultInstance() {
}

cmsg_request_role_attr::cmsg_request_role_attr(const cmsg_request_role_attr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.cmsg_request_role_attr)
}

void cmsg_request_role_attr::SharedCtor() {
  _cached_size_ = 0;
  role_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cmsg_request_role_attr::~cmsg_request_role_attr() {
  // @@protoc_insertion_point(destructor:typed.protocol.cmsg_request_role_attr)
  SharedDtor();
}

void cmsg_request_role_attr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cmsg_request_role_attr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cmsg_request_role_attr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cmsg_request_role_attr_descriptor_;
}

const cmsg_request_role_attr& cmsg_request_role_attr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

cmsg_request_role_attr* cmsg_request_role_attr::default_instance_ = NULL;

cmsg_request_role_attr* cmsg_request_role_attr::New() const {
  return new cmsg_request_role_attr;
}

void cmsg_request_role_attr::Clear() {
  role_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cmsg_request_role_attr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.cmsg_request_role_attr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 role_guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_guid_)));
          set_has_role_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.cmsg_request_role_attr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.cmsg_request_role_attr)
  return false;
#undef DO_
}

void cmsg_request_role_attr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.cmsg_request_role_attr)
  // required uint64 role_guid = 1;
  if (has_role_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.cmsg_request_role_attr)
}

::google::protobuf::uint8* cmsg_request_role_attr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.cmsg_request_role_attr)
  // required uint64 role_guid = 1;
  if (has_role_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.cmsg_request_role_attr)
  return target;
}

int cmsg_request_role_attr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 role_guid = 1;
    if (has_role_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cmsg_request_role_attr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cmsg_request_role_attr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cmsg_request_role_attr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cmsg_request_role_attr::MergeFrom(const cmsg_request_role_attr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_guid()) {
      set_role_guid(from.role_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cmsg_request_role_attr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmsg_request_role_attr::CopyFrom(const cmsg_request_role_attr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmsg_request_role_attr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void cmsg_request_role_attr::Swap(cmsg_request_role_attr* other) {
  if (other != this) {
    std::swap(role_guid_, other->role_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cmsg_request_role_attr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cmsg_request_role_attr_descriptor_;
  metadata.reflection = cmsg_request_role_attr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_request_role_attr::kRoleGuidFieldNumber;
const int smsg_request_role_attr::kRoleAttrFieldNumber;
#endif  // !_MSC_VER

smsg_request_role_attr::smsg_request_role_attr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_request_role_attr)
}

void smsg_request_role_attr::InitAsDefaultInstance() {
}

smsg_request_role_attr::smsg_request_role_attr(const smsg_request_role_attr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_request_role_attr)
}

void smsg_request_role_attr::SharedCtor() {
  _cached_size_ = 0;
  role_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_request_role_attr::~smsg_request_role_attr() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_request_role_attr)
  SharedDtor();
}

void smsg_request_role_attr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void smsg_request_role_attr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_request_role_attr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_request_role_attr_descriptor_;
}

const smsg_request_role_attr& smsg_request_role_attr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_request_role_attr* smsg_request_role_attr::default_instance_ = NULL;

smsg_request_role_attr* smsg_request_role_attr::New() const {
  return new smsg_request_role_attr;
}

void smsg_request_role_attr::Clear() {
  role_guid_ = GOOGLE_ULONGLONG(0);
  role_attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_request_role_attr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_request_role_attr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 role_guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_guid_)));
          set_has_role_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_role_attr;
        break;
      }

      // repeated uint32 role_attr = 2;
      case 2: {
        if (tag == 16) {
         parse_role_attr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_role_attr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_role_attr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_role_attr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_request_role_attr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_request_role_attr)
  return false;
#undef DO_
}

void smsg_request_role_attr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_request_role_attr)
  // required uint64 role_guid = 1;
  if (has_role_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_guid(), output);
  }

  // repeated uint32 role_attr = 2;
  for (int i = 0; i < this->role_attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->role_attr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_request_role_attr)
}

::google::protobuf::uint8* smsg_request_role_attr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_request_role_attr)
  // required uint64 role_guid = 1;
  if (has_role_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_guid(), target);
  }

  // repeated uint32 role_attr = 2;
  for (int i = 0; i < this->role_attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->role_attr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_request_role_attr)
  return target;
}

int smsg_request_role_attr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 role_guid = 1;
    if (has_role_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_guid());
    }

  }
  // repeated uint32 role_attr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->role_attr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->role_attr(i));
    }
    total_size += 1 * this->role_attr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_request_role_attr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_request_role_attr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_request_role_attr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_request_role_attr::MergeFrom(const smsg_request_role_attr& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_attr_.MergeFrom(from.role_attr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_guid()) {
      set_role_guid(from.role_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_request_role_attr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_request_role_attr::CopyFrom(const smsg_request_role_attr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_request_role_attr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void smsg_request_role_attr::Swap(smsg_request_role_attr* other) {
  if (other != this) {
    std::swap(role_guid_, other->role_guid_);
    role_attr_.Swap(&other->role_attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_request_role_attr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_request_role_attr_descriptor_;
  metadata.reflection = smsg_request_role_attr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_update_prestige::kPrestigeValueFieldNumber;
#endif  // !_MSC_VER

smsg_update_prestige::smsg_update_prestige()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_update_prestige)
}

void smsg_update_prestige::InitAsDefaultInstance() {
}

smsg_update_prestige::smsg_update_prestige(const smsg_update_prestige& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_update_prestige)
}

void smsg_update_prestige::SharedCtor() {
  _cached_size_ = 0;
  prestige_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_update_prestige::~smsg_update_prestige() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_update_prestige)
  SharedDtor();
}

void smsg_update_prestige::SharedDtor() {
  if (this != default_instance_) {
  }
}

void smsg_update_prestige::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_update_prestige::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_update_prestige_descriptor_;
}

const smsg_update_prestige& smsg_update_prestige::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_update_prestige* smsg_update_prestige::default_instance_ = NULL;

smsg_update_prestige* smsg_update_prestige::New() const {
  return new smsg_update_prestige;
}

void smsg_update_prestige::Clear() {
  prestige_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_update_prestige::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_update_prestige)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 prestige_value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prestige_value_)));
          set_has_prestige_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_update_prestige)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_update_prestige)
  return false;
#undef DO_
}

void smsg_update_prestige::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_update_prestige)
  // required int32 prestige_value = 1;
  if (has_prestige_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->prestige_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_update_prestige)
}

::google::protobuf::uint8* smsg_update_prestige::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_update_prestige)
  // required int32 prestige_value = 1;
  if (has_prestige_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->prestige_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_update_prestige)
  return target;
}

int smsg_update_prestige::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 prestige_value = 1;
    if (has_prestige_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prestige_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_update_prestige::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_update_prestige* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_update_prestige*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_update_prestige::MergeFrom(const smsg_update_prestige& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prestige_value()) {
      set_prestige_value(from.prestige_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_update_prestige::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_update_prestige::CopyFrom(const smsg_update_prestige& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_update_prestige::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void smsg_update_prestige::Swap(smsg_update_prestige* other) {
  if (other != this) {
    std::swap(prestige_value_, other->prestige_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_update_prestige::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_update_prestige_descriptor_;
  metadata.reflection = smsg_update_prestige_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_update_reverence::kReverenceValueFieldNumber;
#endif  // !_MSC_VER

smsg_update_reverence::smsg_update_reverence()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_update_reverence)
}

void smsg_update_reverence::InitAsDefaultInstance() {
}

smsg_update_reverence::smsg_update_reverence(const smsg_update_reverence& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_update_reverence)
}

void smsg_update_reverence::SharedCtor() {
  _cached_size_ = 0;
  reverence_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_update_reverence::~smsg_update_reverence() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_update_reverence)
  SharedDtor();
}

void smsg_update_reverence::SharedDtor() {
  if (this != default_instance_) {
  }
}

void smsg_update_reverence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_update_reverence::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_update_reverence_descriptor_;
}

const smsg_update_reverence& smsg_update_reverence::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_update_reverence* smsg_update_reverence::default_instance_ = NULL;

smsg_update_reverence* smsg_update_reverence::New() const {
  return new smsg_update_reverence;
}

void smsg_update_reverence::Clear() {
  reverence_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_update_reverence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_update_reverence)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 reverence_value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reverence_value_)));
          set_has_reverence_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_update_reverence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_update_reverence)
  return false;
#undef DO_
}

void smsg_update_reverence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_update_reverence)
  // required int32 reverence_value = 1;
  if (has_reverence_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reverence_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_update_reverence)
}

::google::protobuf::uint8* smsg_update_reverence::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_update_reverence)
  // required int32 reverence_value = 1;
  if (has_reverence_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reverence_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_update_reverence)
  return target;
}

int smsg_update_reverence::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 reverence_value = 1;
    if (has_reverence_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reverence_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_update_reverence::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_update_reverence* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_update_reverence*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_update_reverence::MergeFrom(const smsg_update_reverence& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reverence_value()) {
      set_reverence_value(from.reverence_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_update_reverence::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_update_reverence::CopyFrom(const smsg_update_reverence& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_update_reverence::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void smsg_update_reverence::Swap(smsg_update_reverence* other) {
  if (other != this) {
    std::swap(reverence_value_, other->reverence_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_update_reverence::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_update_reverence_descriptor_;
  metadata.reflection = smsg_update_reverence_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_unlock_function::kFunctionIdFieldNumber;
#endif  // !_MSC_VER

smsg_unlock_function::smsg_unlock_function()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_unlock_function)
}

void smsg_unlock_function::InitAsDefaultInstance() {
}

smsg_unlock_function::smsg_unlock_function(const smsg_unlock_function& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_unlock_function)
}

void smsg_unlock_function::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_unlock_function::~smsg_unlock_function() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_unlock_function)
  SharedDtor();
}

void smsg_unlock_function::SharedDtor() {
  if (this != default_instance_) {
  }
}

void smsg_unlock_function::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_unlock_function::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_unlock_function_descriptor_;
}

const smsg_unlock_function& smsg_unlock_function::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_unlock_function* smsg_unlock_function::default_instance_ = NULL;

smsg_unlock_function* smsg_unlock_function::New() const {
  return new smsg_unlock_function;
}

void smsg_unlock_function::Clear() {
  function_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_unlock_function::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_unlock_function)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 function_id = 1;
      case 1: {
        if (tag == 8) {
         parse_function_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_function_id())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_function_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_function_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_unlock_function)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_unlock_function)
  return false;
#undef DO_
}

void smsg_unlock_function::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_unlock_function)
  // repeated uint32 function_id = 1;
  for (int i = 0; i < this->function_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->function_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_unlock_function)
}

::google::protobuf::uint8* smsg_unlock_function::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_unlock_function)
  // repeated uint32 function_id = 1;
  for (int i = 0; i < this->function_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->function_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_unlock_function)
  return target;
}

int smsg_unlock_function::ByteSize() const {
  int total_size = 0;

  // repeated uint32 function_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->function_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->function_id(i));
    }
    total_size += 1 * this->function_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_unlock_function::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_unlock_function* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_unlock_function*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_unlock_function::MergeFrom(const smsg_unlock_function& from) {
  GOOGLE_CHECK_NE(&from, this);
  function_id_.MergeFrom(from.function_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_unlock_function::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_unlock_function::CopyFrom(const smsg_unlock_function& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_unlock_function::IsInitialized() const {

  return true;
}

void smsg_unlock_function::Swap(smsg_unlock_function* other) {
  if (other != this) {
    function_id_.Swap(&other->function_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_unlock_function::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_unlock_function_descriptor_;
  metadata.reflection = smsg_unlock_function_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_update_unlock_function::kFunctionIdFieldNumber;
#endif  // !_MSC_VER

smsg_update_unlock_function::smsg_update_unlock_function()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_update_unlock_function)
}

void smsg_update_unlock_function::InitAsDefaultInstance() {
}

smsg_update_unlock_function::smsg_update_unlock_function(const smsg_update_unlock_function& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_update_unlock_function)
}

void smsg_update_unlock_function::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_update_unlock_function::~smsg_update_unlock_function() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_update_unlock_function)
  SharedDtor();
}

void smsg_update_unlock_function::SharedDtor() {
  if (this != default_instance_) {
  }
}

void smsg_update_unlock_function::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_update_unlock_function::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_update_unlock_function_descriptor_;
}

const smsg_update_unlock_function& smsg_update_unlock_function::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_update_unlock_function* smsg_update_unlock_function::default_instance_ = NULL;

smsg_update_unlock_function* smsg_update_unlock_function::New() const {
  return new smsg_update_unlock_function;
}

void smsg_update_unlock_function::Clear() {
  function_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_update_unlock_function::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_update_unlock_function)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 function_id = 1;
      case 1: {
        if (tag == 8) {
         parse_function_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_function_id())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_function_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_function_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_update_unlock_function)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_update_unlock_function)
  return false;
#undef DO_
}

void smsg_update_unlock_function::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_update_unlock_function)
  // repeated uint32 function_id = 1;
  for (int i = 0; i < this->function_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->function_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_update_unlock_function)
}

::google::protobuf::uint8* smsg_update_unlock_function::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_update_unlock_function)
  // repeated uint32 function_id = 1;
  for (int i = 0; i < this->function_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->function_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_update_unlock_function)
  return target;
}

int smsg_update_unlock_function::ByteSize() const {
  int total_size = 0;

  // repeated uint32 function_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->function_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->function_id(i));
    }
    total_size += 1 * this->function_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_update_unlock_function::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_update_unlock_function* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_update_unlock_function*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_update_unlock_function::MergeFrom(const smsg_update_unlock_function& from) {
  GOOGLE_CHECK_NE(&from, this);
  function_id_.MergeFrom(from.function_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_update_unlock_function::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_update_unlock_function::CopyFrom(const smsg_update_unlock_function& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_update_unlock_function::IsInitialized() const {

  return true;
}

void smsg_update_unlock_function::Swap(smsg_update_unlock_function* other) {
  if (other != this) {
    function_id_.Swap(&other->function_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_update_unlock_function::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_update_unlock_function_descriptor_;
  metadata.reflection = smsg_update_unlock_function_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_update_char_ability::kRoleGuidFieldNumber;
const int smsg_update_char_ability::kCharAbilityFieldNumber;
#endif  // !_MSC_VER

smsg_update_char_ability::smsg_update_char_ability()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_update_char_ability)
}

void smsg_update_char_ability::InitAsDefaultInstance() {
}

smsg_update_char_ability::smsg_update_char_ability(const smsg_update_char_ability& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_update_char_ability)
}

void smsg_update_char_ability::SharedCtor() {
  _cached_size_ = 0;
  role_guid_ = GOOGLE_ULONGLONG(0);
  char_ability_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_update_char_ability::~smsg_update_char_ability() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_update_char_ability)
  SharedDtor();
}

void smsg_update_char_ability::SharedDtor() {
  if (this != default_instance_) {
  }
}

void smsg_update_char_ability::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_update_char_ability::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_update_char_ability_descriptor_;
}

const smsg_update_char_ability& smsg_update_char_ability::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_update_char_ability* smsg_update_char_ability::default_instance_ = NULL;

smsg_update_char_ability* smsg_update_char_ability::New() const {
  return new smsg_update_char_ability;
}

void smsg_update_char_ability::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<smsg_update_char_ability*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(role_guid_, char_ability_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_update_char_ability::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_update_char_ability)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_guid_)));
          set_has_role_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_char_ability;
        break;
      }

      // optional uint32 char_ability = 2;
      case 2: {
        if (tag == 16) {
         parse_char_ability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_ability_)));
          set_has_char_ability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_update_char_ability)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_update_char_ability)
  return false;
#undef DO_
}

void smsg_update_char_ability::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_update_char_ability)
  // optional uint64 role_guid = 1;
  if (has_role_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_guid(), output);
  }

  // optional uint32 char_ability = 2;
  if (has_char_ability()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->char_ability(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_update_char_ability)
}

::google::protobuf::uint8* smsg_update_char_ability::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_update_char_ability)
  // optional uint64 role_guid = 1;
  if (has_role_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_guid(), target);
  }

  // optional uint32 char_ability = 2;
  if (has_char_ability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->char_ability(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_update_char_ability)
  return target;
}

int smsg_update_char_ability::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_guid = 1;
    if (has_role_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_guid());
    }

    // optional uint32 char_ability = 2;
    if (has_char_ability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_ability());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_update_char_ability::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_update_char_ability* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_update_char_ability*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_update_char_ability::MergeFrom(const smsg_update_char_ability& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_guid()) {
      set_role_guid(from.role_guid());
    }
    if (from.has_char_ability()) {
      set_char_ability(from.char_ability());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_update_char_ability::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_update_char_ability::CopyFrom(const smsg_update_char_ability& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_update_char_ability::IsInitialized() const {

  return true;
}

void smsg_update_char_ability::Swap(smsg_update_char_ability* other) {
  if (other != this) {
    std::swap(role_guid_, other->role_guid_);
    std::swap(char_ability_, other->char_ability_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_update_char_ability::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_update_char_ability_descriptor_;
  metadata.reflection = smsg_update_char_ability_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_get_server_time::kServerTimeFieldNumber;
#endif  // !_MSC_VER

smsg_get_server_time::smsg_get_server_time()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_get_server_time)
}

void smsg_get_server_time::InitAsDefaultInstance() {
}

smsg_get_server_time::smsg_get_server_time(const smsg_get_server_time& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_get_server_time)
}

void smsg_get_server_time::SharedCtor() {
  _cached_size_ = 0;
  server_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_get_server_time::~smsg_get_server_time() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_get_server_time)
  SharedDtor();
}

void smsg_get_server_time::SharedDtor() {
  if (this != default_instance_) {
  }
}

void smsg_get_server_time::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_get_server_time::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_get_server_time_descriptor_;
}

const smsg_get_server_time& smsg_get_server_time::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_get_server_time* smsg_get_server_time::default_instance_ = NULL;

smsg_get_server_time* smsg_get_server_time::New() const {
  return new smsg_get_server_time;
}

void smsg_get_server_time::Clear() {
  server_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_get_server_time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_get_server_time)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 server_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_time_)));
          set_has_server_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_get_server_time)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_get_server_time)
  return false;
#undef DO_
}

void smsg_get_server_time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_get_server_time)
  // required uint32 server_time = 1;
  if (has_server_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_get_server_time)
}

::google::protobuf::uint8* smsg_get_server_time::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_get_server_time)
  // required uint32 server_time = 1;
  if (has_server_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_get_server_time)
  return target;
}

int smsg_get_server_time::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 server_time = 1;
    if (has_server_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_get_server_time::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_get_server_time* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_get_server_time*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_get_server_time::MergeFrom(const smsg_get_server_time& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_time()) {
      set_server_time(from.server_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_get_server_time::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_get_server_time::CopyFrom(const smsg_get_server_time& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_get_server_time::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void smsg_get_server_time::Swap(smsg_get_server_time* other) {
  if (other != this) {
    std::swap(server_time_, other->server_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_get_server_time::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_get_server_time_descriptor_;
  metadata.reflection = smsg_get_server_time_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cmsg_special_action::kActionTypeFieldNumber;
const int cmsg_special_action::kParamFieldNumber;
#endif  // !_MSC_VER

cmsg_special_action::cmsg_special_action()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.cmsg_special_action)
}

void cmsg_special_action::InitAsDefaultInstance() {
}

cmsg_special_action::cmsg_special_action(const cmsg_special_action& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.cmsg_special_action)
}

void cmsg_special_action::SharedCtor() {
  _cached_size_ = 0;
  action_type_ = 0u;
  param_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cmsg_special_action::~cmsg_special_action() {
  // @@protoc_insertion_point(destructor:typed.protocol.cmsg_special_action)
  SharedDtor();
}

void cmsg_special_action::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cmsg_special_action::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cmsg_special_action::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cmsg_special_action_descriptor_;
}

const cmsg_special_action& cmsg_special_action::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

cmsg_special_action* cmsg_special_action::default_instance_ = NULL;

cmsg_special_action* cmsg_special_action::New() const {
  return new cmsg_special_action;
}

void cmsg_special_action::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<cmsg_special_action*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(param_, action_type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cmsg_special_action::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.cmsg_special_action)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 action_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_type_)));
          set_has_action_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional uint64 param = 2;
      case 2: {
        if (tag == 16) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.cmsg_special_action)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.cmsg_special_action)
  return false;
#undef DO_
}

void cmsg_special_action::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.cmsg_special_action)
  // optional uint32 action_type = 1;
  if (has_action_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->action_type(), output);
  }

  // optional uint64 param = 2;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.cmsg_special_action)
}

::google::protobuf::uint8* cmsg_special_action::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.cmsg_special_action)
  // optional uint32 action_type = 1;
  if (has_action_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->action_type(), target);
  }

  // optional uint64 param = 2;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.cmsg_special_action)
  return target;
}

int cmsg_special_action::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 action_type = 1;
    if (has_action_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_type());
    }

    // optional uint64 param = 2;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cmsg_special_action::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cmsg_special_action* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cmsg_special_action*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cmsg_special_action::MergeFrom(const cmsg_special_action& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action_type()) {
      set_action_type(from.action_type());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cmsg_special_action::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmsg_special_action::CopyFrom(const cmsg_special_action& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmsg_special_action::IsInitialized() const {

  return true;
}

void cmsg_special_action::Swap(cmsg_special_action* other) {
  if (other != this) {
    std::swap(action_type_, other->action_type_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cmsg_special_action::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cmsg_special_action_descriptor_;
  metadata.reflection = cmsg_special_action_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_special_action::kPlayerGuidFieldNumber;
const int smsg_special_action::kActionTypeFieldNumber;
const int smsg_special_action::kParamFieldNumber;
#endif  // !_MSC_VER

smsg_special_action::smsg_special_action()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_special_action)
}

void smsg_special_action::InitAsDefaultInstance() {
}

smsg_special_action::smsg_special_action(const smsg_special_action& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_special_action)
}

void smsg_special_action::SharedCtor() {
  _cached_size_ = 0;
  player_guid_ = GOOGLE_ULONGLONG(0);
  action_type_ = 0u;
  param_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_special_action::~smsg_special_action() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_special_action)
  SharedDtor();
}

void smsg_special_action::SharedDtor() {
  if (this != default_instance_) {
  }
}

void smsg_special_action::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_special_action::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_special_action_descriptor_;
}

const smsg_special_action& smsg_special_action::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_special_action* smsg_special_action::default_instance_ = NULL;

smsg_special_action* smsg_special_action::New() const {
  return new smsg_special_action;
}

void smsg_special_action::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<smsg_special_action*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(player_guid_, action_type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_special_action::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_special_action)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 player_guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_guid_)));
          set_has_player_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_action_type;
        break;
      }

      // optional uint32 action_type = 2;
      case 2: {
        if (tag == 16) {
         parse_action_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_type_)));
          set_has_action_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_param;
        break;
      }

      // optional uint64 param = 3;
      case 3: {
        if (tag == 24) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_special_action)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_special_action)
  return false;
#undef DO_
}

void smsg_special_action::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_special_action)
  // required uint64 player_guid = 1;
  if (has_player_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_guid(), output);
  }

  // optional uint32 action_type = 2;
  if (has_action_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->action_type(), output);
  }

  // optional uint64 param = 3;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_special_action)
}

::google::protobuf::uint8* smsg_special_action::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_special_action)
  // required uint64 player_guid = 1;
  if (has_player_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_guid(), target);
  }

  // optional uint32 action_type = 2;
  if (has_action_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->action_type(), target);
  }

  // optional uint64 param = 3;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_special_action)
  return target;
}

int smsg_special_action::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 player_guid = 1;
    if (has_player_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_guid());
    }

    // optional uint32 action_type = 2;
    if (has_action_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_type());
    }

    // optional uint64 param = 3;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_special_action::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_special_action* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_special_action*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_special_action::MergeFrom(const smsg_special_action& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_guid()) {
      set_player_guid(from.player_guid());
    }
    if (from.has_action_type()) {
      set_action_type(from.action_type());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_special_action::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_special_action::CopyFrom(const smsg_special_action& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_special_action::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void smsg_special_action::Swap(smsg_special_action* other) {
  if (other != this) {
    std::swap(player_guid_, other->player_guid_);
    std::swap(action_type_, other->action_type_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_special_action::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_special_action_descriptor_;
  metadata.reflection = smsg_special_action_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cmsg_special_action_person::kPlayerGuidFieldNumber;
const int cmsg_special_action_person::kActionTypeFieldNumber;
const int cmsg_special_action_person::kParamFieldNumber;
#endif  // !_MSC_VER

cmsg_special_action_person::cmsg_special_action_person()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.cmsg_special_action_person)
}

void cmsg_special_action_person::InitAsDefaultInstance() {
}

cmsg_special_action_person::cmsg_special_action_person(const cmsg_special_action_person& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.cmsg_special_action_person)
}

void cmsg_special_action_person::SharedCtor() {
  _cached_size_ = 0;
  action_type_ = 0u;
  param_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cmsg_special_action_person::~cmsg_special_action_person() {
  // @@protoc_insertion_point(destructor:typed.protocol.cmsg_special_action_person)
  SharedDtor();
}

void cmsg_special_action_person::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cmsg_special_action_person::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cmsg_special_action_person::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cmsg_special_action_person_descriptor_;
}

const cmsg_special_action_person& cmsg_special_action_person::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

cmsg_special_action_person* cmsg_special_action_person::default_instance_ = NULL;

cmsg_special_action_person* cmsg_special_action_person::New() const {
  return new cmsg_special_action_person;
}

void cmsg_special_action_person::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<cmsg_special_action_person*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(param_, action_type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  player_guid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cmsg_special_action_person::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.cmsg_special_action_person)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 player_guid = 1;
      case 1: {
        if (tag == 8) {
         parse_player_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_player_guid())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_player_guid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_player_guid;
        if (input->ExpectTag(16)) goto parse_action_type;
        break;
      }

      // optional uint32 action_type = 2;
      case 2: {
        if (tag == 16) {
         parse_action_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_type_)));
          set_has_action_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_param;
        break;
      }

      // optional uint64 param = 3;
      case 3: {
        if (tag == 24) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.cmsg_special_action_person)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.cmsg_special_action_person)
  return false;
#undef DO_
}

void cmsg_special_action_person::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.cmsg_special_action_person)
  // repeated uint64 player_guid = 1;
  for (int i = 0; i < this->player_guid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->player_guid(i), output);
  }

  // optional uint32 action_type = 2;
  if (has_action_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->action_type(), output);
  }

  // optional uint64 param = 3;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.cmsg_special_action_person)
}

::google::protobuf::uint8* cmsg_special_action_person::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.cmsg_special_action_person)
  // repeated uint64 player_guid = 1;
  for (int i = 0; i < this->player_guid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->player_guid(i), target);
  }

  // optional uint32 action_type = 2;
  if (has_action_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->action_type(), target);
  }

  // optional uint64 param = 3;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.cmsg_special_action_person)
  return target;
}

int cmsg_special_action_person::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 action_type = 2;
    if (has_action_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_type());
    }

    // optional uint64 param = 3;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->param());
    }

  }
  // repeated uint64 player_guid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->player_guid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->player_guid(i));
    }
    total_size += 1 * this->player_guid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cmsg_special_action_person::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cmsg_special_action_person* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cmsg_special_action_person*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cmsg_special_action_person::MergeFrom(const cmsg_special_action_person& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_guid_.MergeFrom(from.player_guid_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_action_type()) {
      set_action_type(from.action_type());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cmsg_special_action_person::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmsg_special_action_person::CopyFrom(const cmsg_special_action_person& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmsg_special_action_person::IsInitialized() const {

  return true;
}

void cmsg_special_action_person::Swap(cmsg_special_action_person* other) {
  if (other != this) {
    player_guid_.Swap(&other->player_guid_);
    std::swap(action_type_, other->action_type_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cmsg_special_action_person::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cmsg_special_action_person_descriptor_;
  metadata.reflection = cmsg_special_action_person_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_special_action_person::kPlayerGuidFieldNumber;
const int smsg_special_action_person::kActionTypeFieldNumber;
const int smsg_special_action_person::kParamFieldNumber;
#endif  // !_MSC_VER

smsg_special_action_person::smsg_special_action_person()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_special_action_person)
}

void smsg_special_action_person::InitAsDefaultInstance() {
}

smsg_special_action_person::smsg_special_action_person(const smsg_special_action_person& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_special_action_person)
}

void smsg_special_action_person::SharedCtor() {
  _cached_size_ = 0;
  player_guid_ = GOOGLE_ULONGLONG(0);
  action_type_ = 0u;
  param_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_special_action_person::~smsg_special_action_person() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_special_action_person)
  SharedDtor();
}

void smsg_special_action_person::SharedDtor() {
  if (this != default_instance_) {
  }
}

void smsg_special_action_person::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_special_action_person::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_special_action_person_descriptor_;
}

const smsg_special_action_person& smsg_special_action_person::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_special_action_person* smsg_special_action_person::default_instance_ = NULL;

smsg_special_action_person* smsg_special_action_person::New() const {
  return new smsg_special_action_person;
}

void smsg_special_action_person::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<smsg_special_action_person*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(player_guid_, action_type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_special_action_person::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_special_action_person)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 player_guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_guid_)));
          set_has_player_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_action_type;
        break;
      }

      // optional uint32 action_type = 2;
      case 2: {
        if (tag == 16) {
         parse_action_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_type_)));
          set_has_action_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_param;
        break;
      }

      // optional uint64 param = 3;
      case 3: {
        if (tag == 24) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_special_action_person)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_special_action_person)
  return false;
#undef DO_
}

void smsg_special_action_person::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_special_action_person)
  // required uint64 player_guid = 1;
  if (has_player_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_guid(), output);
  }

  // optional uint32 action_type = 2;
  if (has_action_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->action_type(), output);
  }

  // optional uint64 param = 3;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_special_action_person)
}

::google::protobuf::uint8* smsg_special_action_person::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_special_action_person)
  // required uint64 player_guid = 1;
  if (has_player_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_guid(), target);
  }

  // optional uint32 action_type = 2;
  if (has_action_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->action_type(), target);
  }

  // optional uint64 param = 3;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_special_action_person)
  return target;
}

int smsg_special_action_person::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 player_guid = 1;
    if (has_player_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_guid());
    }

    // optional uint32 action_type = 2;
    if (has_action_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_type());
    }

    // optional uint64 param = 3;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_special_action_person::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_special_action_person* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_special_action_person*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_special_action_person::MergeFrom(const smsg_special_action_person& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_guid()) {
      set_player_guid(from.player_guid());
    }
    if (from.has_action_type()) {
      set_action_type(from.action_type());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_special_action_person::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_special_action_person::CopyFrom(const smsg_special_action_person& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_special_action_person::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void smsg_special_action_person::Swap(smsg_special_action_person* other) {
  if (other != this) {
    std::swap(player_guid_, other->player_guid_);
    std::swap(action_type_, other->action_type_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_special_action_person::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_special_action_person_descriptor_;
  metadata.reflection = smsg_special_action_person_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_update_plentiful_energy::kEnergyValueFieldNumber;
#endif  // !_MSC_VER

smsg_update_plentiful_energy::smsg_update_plentiful_energy()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_update_plentiful_energy)
}

void smsg_update_plentiful_energy::InitAsDefaultInstance() {
}

smsg_update_plentiful_energy::smsg_update_plentiful_energy(const smsg_update_plentiful_energy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_update_plentiful_energy)
}

void smsg_update_plentiful_energy::SharedCtor() {
  _cached_size_ = 0;
  energy_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_update_plentiful_energy::~smsg_update_plentiful_energy() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_update_plentiful_energy)
  SharedDtor();
}

void smsg_update_plentiful_energy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void smsg_update_plentiful_energy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_update_plentiful_energy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_update_plentiful_energy_descriptor_;
}

const smsg_update_plentiful_energy& smsg_update_plentiful_energy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_update_plentiful_energy* smsg_update_plentiful_energy::default_instance_ = NULL;

smsg_update_plentiful_energy* smsg_update_plentiful_energy::New() const {
  return new smsg_update_plentiful_energy;
}

void smsg_update_plentiful_energy::Clear() {
  energy_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_update_plentiful_energy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_update_plentiful_energy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 energy_value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &energy_value_)));
          set_has_energy_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_update_plentiful_energy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_update_plentiful_energy)
  return false;
#undef DO_
}

void smsg_update_plentiful_energy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_update_plentiful_energy)
  // required uint32 energy_value = 1;
  if (has_energy_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->energy_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_update_plentiful_energy)
}

::google::protobuf::uint8* smsg_update_plentiful_energy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_update_plentiful_energy)
  // required uint32 energy_value = 1;
  if (has_energy_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->energy_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_update_plentiful_energy)
  return target;
}

int smsg_update_plentiful_energy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 energy_value = 1;
    if (has_energy_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->energy_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_update_plentiful_energy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_update_plentiful_energy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_update_plentiful_energy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_update_plentiful_energy::MergeFrom(const smsg_update_plentiful_energy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_energy_value()) {
      set_energy_value(from.energy_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_update_plentiful_energy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_update_plentiful_energy::CopyFrom(const smsg_update_plentiful_energy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_update_plentiful_energy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void smsg_update_plentiful_energy::Swap(smsg_update_plentiful_energy* other) {
  if (other != this) {
    std::swap(energy_value_, other->energy_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_update_plentiful_energy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_update_plentiful_energy_descriptor_;
  metadata.reflection = smsg_update_plentiful_energy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_update_module_free_time_ModuleFreeTime::kModuleIdFieldNumber;
const int smsg_update_module_free_time_ModuleFreeTime::kLeftFreeTimeFieldNumber;
#endif  // !_MSC_VER

smsg_update_module_free_time_ModuleFreeTime::smsg_update_module_free_time_ModuleFreeTime()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_update_module_free_time.ModuleFreeTime)
}

void smsg_update_module_free_time_ModuleFreeTime::InitAsDefaultInstance() {
}

smsg_update_module_free_time_ModuleFreeTime::smsg_update_module_free_time_ModuleFreeTime(const smsg_update_module_free_time_ModuleFreeTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_update_module_free_time.ModuleFreeTime)
}

void smsg_update_module_free_time_ModuleFreeTime::SharedCtor() {
  _cached_size_ = 0;
  module_id_ = 0u;
  left_free_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_update_module_free_time_ModuleFreeTime::~smsg_update_module_free_time_ModuleFreeTime() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_update_module_free_time.ModuleFreeTime)
  SharedDtor();
}

void smsg_update_module_free_time_ModuleFreeTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void smsg_update_module_free_time_ModuleFreeTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_update_module_free_time_ModuleFreeTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_update_module_free_time_ModuleFreeTime_descriptor_;
}

const smsg_update_module_free_time_ModuleFreeTime& smsg_update_module_free_time_ModuleFreeTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_update_module_free_time_ModuleFreeTime* smsg_update_module_free_time_ModuleFreeTime::default_instance_ = NULL;

smsg_update_module_free_time_ModuleFreeTime* smsg_update_module_free_time_ModuleFreeTime::New() const {
  return new smsg_update_module_free_time_ModuleFreeTime;
}

void smsg_update_module_free_time_ModuleFreeTime::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<smsg_update_module_free_time_ModuleFreeTime*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(module_id_, left_free_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_update_module_free_time_ModuleFreeTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_update_module_free_time.ModuleFreeTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 module_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &module_id_)));
          set_has_module_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_left_free_time;
        break;
      }

      // required uint32 left_free_time = 2;
      case 2: {
        if (tag == 16) {
         parse_left_free_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_free_time_)));
          set_has_left_free_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_update_module_free_time.ModuleFreeTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_update_module_free_time.ModuleFreeTime)
  return false;
#undef DO_
}

void smsg_update_module_free_time_ModuleFreeTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_update_module_free_time.ModuleFreeTime)
  // required uint32 module_id = 1;
  if (has_module_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->module_id(), output);
  }

  // required uint32 left_free_time = 2;
  if (has_left_free_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->left_free_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_update_module_free_time.ModuleFreeTime)
}

::google::protobuf::uint8* smsg_update_module_free_time_ModuleFreeTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_update_module_free_time.ModuleFreeTime)
  // required uint32 module_id = 1;
  if (has_module_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->module_id(), target);
  }

  // required uint32 left_free_time = 2;
  if (has_left_free_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->left_free_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_update_module_free_time.ModuleFreeTime)
  return target;
}

int smsg_update_module_free_time_ModuleFreeTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 module_id = 1;
    if (has_module_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->module_id());
    }

    // required uint32 left_free_time = 2;
    if (has_left_free_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left_free_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_update_module_free_time_ModuleFreeTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_update_module_free_time_ModuleFreeTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_update_module_free_time_ModuleFreeTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_update_module_free_time_ModuleFreeTime::MergeFrom(const smsg_update_module_free_time_ModuleFreeTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_module_id()) {
      set_module_id(from.module_id());
    }
    if (from.has_left_free_time()) {
      set_left_free_time(from.left_free_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_update_module_free_time_ModuleFreeTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_update_module_free_time_ModuleFreeTime::CopyFrom(const smsg_update_module_free_time_ModuleFreeTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_update_module_free_time_ModuleFreeTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void smsg_update_module_free_time_ModuleFreeTime::Swap(smsg_update_module_free_time_ModuleFreeTime* other) {
  if (other != this) {
    std::swap(module_id_, other->module_id_);
    std::swap(left_free_time_, other->left_free_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_update_module_free_time_ModuleFreeTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_update_module_free_time_ModuleFreeTime_descriptor_;
  metadata.reflection = smsg_update_module_free_time_ModuleFreeTime_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int smsg_update_module_free_time::kModuleLeftFreeTimeFieldNumber;
#endif  // !_MSC_VER

smsg_update_module_free_time::smsg_update_module_free_time()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_update_module_free_time)
}

void smsg_update_module_free_time::InitAsDefaultInstance() {
}

smsg_update_module_free_time::smsg_update_module_free_time(const smsg_update_module_free_time& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_update_module_free_time)
}

void smsg_update_module_free_time::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_update_module_free_time::~smsg_update_module_free_time() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_update_module_free_time)
  SharedDtor();
}

void smsg_update_module_free_time::SharedDtor() {
  if (this != default_instance_) {
  }
}

void smsg_update_module_free_time::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_update_module_free_time::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_update_module_free_time_descriptor_;
}

const smsg_update_module_free_time& smsg_update_module_free_time::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_update_module_free_time* smsg_update_module_free_time::default_instance_ = NULL;

smsg_update_module_free_time* smsg_update_module_free_time::New() const {
  return new smsg_update_module_free_time;
}

void smsg_update_module_free_time::Clear() {
  module_left_free_time_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_update_module_free_time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_update_module_free_time)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .typed.protocol.smsg_update_module_free_time.ModuleFreeTime module_left_free_time = 1;
      case 1: {
        if (tag == 10) {
         parse_module_left_free_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_module_left_free_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_module_left_free_time;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_update_module_free_time)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_update_module_free_time)
  return false;
#undef DO_
}

void smsg_update_module_free_time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_update_module_free_time)
  // repeated .typed.protocol.smsg_update_module_free_time.ModuleFreeTime module_left_free_time = 1;
  for (int i = 0; i < this->module_left_free_time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->module_left_free_time(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_update_module_free_time)
}

::google::protobuf::uint8* smsg_update_module_free_time::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_update_module_free_time)
  // repeated .typed.protocol.smsg_update_module_free_time.ModuleFreeTime module_left_free_time = 1;
  for (int i = 0; i < this->module_left_free_time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->module_left_free_time(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_update_module_free_time)
  return target;
}

int smsg_update_module_free_time::ByteSize() const {
  int total_size = 0;

  // repeated .typed.protocol.smsg_update_module_free_time.ModuleFreeTime module_left_free_time = 1;
  total_size += 1 * this->module_left_free_time_size();
  for (int i = 0; i < this->module_left_free_time_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->module_left_free_time(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_update_module_free_time::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_update_module_free_time* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_update_module_free_time*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_update_module_free_time::MergeFrom(const smsg_update_module_free_time& from) {
  GOOGLE_CHECK_NE(&from, this);
  module_left_free_time_.MergeFrom(from.module_left_free_time_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_update_module_free_time::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_update_module_free_time::CopyFrom(const smsg_update_module_free_time& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_update_module_free_time::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->module_left_free_time())) return false;
  return true;
}

void smsg_update_module_free_time::Swap(smsg_update_module_free_time* other) {
  if (other != this) {
    module_left_free_time_.Swap(&other->module_left_free_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_update_module_free_time::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_update_module_free_time_descriptor_;
  metadata.reflection = smsg_update_module_free_time_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cmsg_set_follow_role::kRoleGuidFieldNumber;
#endif  // !_MSC_VER

cmsg_set_follow_role::cmsg_set_follow_role()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.cmsg_set_follow_role)
}

void cmsg_set_follow_role::InitAsDefaultInstance() {
}

cmsg_set_follow_role::cmsg_set_follow_role(const cmsg_set_follow_role& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.cmsg_set_follow_role)
}

void cmsg_set_follow_role::SharedCtor() {
  _cached_size_ = 0;
  role_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cmsg_set_follow_role::~cmsg_set_follow_role() {
  // @@protoc_insertion_point(destructor:typed.protocol.cmsg_set_follow_role)
  SharedDtor();
}

void cmsg_set_follow_role::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cmsg_set_follow_role::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cmsg_set_follow_role::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cmsg_set_follow_role_descriptor_;
}

const cmsg_set_follow_role& cmsg_set_follow_role::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

cmsg_set_follow_role* cmsg_set_follow_role::default_instance_ = NULL;

cmsg_set_follow_role* cmsg_set_follow_role::New() const {
  return new cmsg_set_follow_role;
}

void cmsg_set_follow_role::Clear() {
  role_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cmsg_set_follow_role::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.cmsg_set_follow_role)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 role_guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_guid_)));
          set_has_role_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.cmsg_set_follow_role)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.cmsg_set_follow_role)
  return false;
#undef DO_
}

void cmsg_set_follow_role::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.cmsg_set_follow_role)
  // required uint64 role_guid = 1;
  if (has_role_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.cmsg_set_follow_role)
}

::google::protobuf::uint8* cmsg_set_follow_role::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.cmsg_set_follow_role)
  // required uint64 role_guid = 1;
  if (has_role_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.cmsg_set_follow_role)
  return target;
}

int cmsg_set_follow_role::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 role_guid = 1;
    if (has_role_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cmsg_set_follow_role::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cmsg_set_follow_role* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cmsg_set_follow_role*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cmsg_set_follow_role::MergeFrom(const cmsg_set_follow_role& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_guid()) {
      set_role_guid(from.role_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cmsg_set_follow_role::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmsg_set_follow_role::CopyFrom(const cmsg_set_follow_role& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmsg_set_follow_role::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void cmsg_set_follow_role::Swap(cmsg_set_follow_role* other) {
  if (other != this) {
    std::swap(role_guid_, other->role_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cmsg_set_follow_role::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cmsg_set_follow_role_descriptor_;
  metadata.reflection = cmsg_set_follow_role_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_set_follow_role::kRoleGuidFieldNumber;
const int smsg_set_follow_role::kResultFieldNumber;
#endif  // !_MSC_VER

smsg_set_follow_role::smsg_set_follow_role()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_set_follow_role)
}

void smsg_set_follow_role::InitAsDefaultInstance() {
}

smsg_set_follow_role::smsg_set_follow_role(const smsg_set_follow_role& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_set_follow_role)
}

void smsg_set_follow_role::SharedCtor() {
  _cached_size_ = 0;
  role_guid_ = GOOGLE_ULONGLONG(0);
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_set_follow_role::~smsg_set_follow_role() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_set_follow_role)
  SharedDtor();
}

void smsg_set_follow_role::SharedDtor() {
  if (this != default_instance_) {
  }
}

void smsg_set_follow_role::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_set_follow_role::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_set_follow_role_descriptor_;
}

const smsg_set_follow_role& smsg_set_follow_role::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_set_follow_role* smsg_set_follow_role::default_instance_ = NULL;

smsg_set_follow_role* smsg_set_follow_role::New() const {
  return new smsg_set_follow_role;
}

void smsg_set_follow_role::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<smsg_set_follow_role*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(role_guid_, result_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_set_follow_role::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_set_follow_role)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 role_guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_guid_)));
          set_has_role_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional uint32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_set_follow_role)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_set_follow_role)
  return false;
#undef DO_
}

void smsg_set_follow_role::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_set_follow_role)
  // required uint64 role_guid = 1;
  if (has_role_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_guid(), output);
  }

  // optional uint32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_set_follow_role)
}

::google::protobuf::uint8* smsg_set_follow_role::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_set_follow_role)
  // required uint64 role_guid = 1;
  if (has_role_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_guid(), target);
  }

  // optional uint32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_set_follow_role)
  return target;
}

int smsg_set_follow_role::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 role_guid = 1;
    if (has_role_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_guid());
    }

    // optional uint32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_set_follow_role::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_set_follow_role* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_set_follow_role*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_set_follow_role::MergeFrom(const smsg_set_follow_role& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_guid()) {
      set_role_guid(from.role_guid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_set_follow_role::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_set_follow_role::CopyFrom(const smsg_set_follow_role& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_set_follow_role::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void smsg_set_follow_role::Swap(smsg_set_follow_role* other) {
  if (other != this) {
    std::swap(role_guid_, other->role_guid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_set_follow_role::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_set_follow_role_descriptor_;
  metadata.reflection = smsg_set_follow_role_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_update_follow_role::kPlayerGuidFieldNumber;
const int smsg_update_follow_role::kFollowRoleIdFieldNumber;
#endif  // !_MSC_VER

smsg_update_follow_role::smsg_update_follow_role()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_update_follow_role)
}

void smsg_update_follow_role::InitAsDefaultInstance() {
}

smsg_update_follow_role::smsg_update_follow_role(const smsg_update_follow_role& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_update_follow_role)
}

void smsg_update_follow_role::SharedCtor() {
  _cached_size_ = 0;
  player_guid_ = GOOGLE_ULONGLONG(0);
  follow_role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_update_follow_role::~smsg_update_follow_role() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_update_follow_role)
  SharedDtor();
}

void smsg_update_follow_role::SharedDtor() {
  if (this != default_instance_) {
  }
}

void smsg_update_follow_role::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_update_follow_role::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_update_follow_role_descriptor_;
}

const smsg_update_follow_role& smsg_update_follow_role::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_update_follow_role* smsg_update_follow_role::default_instance_ = NULL;

smsg_update_follow_role* smsg_update_follow_role::New() const {
  return new smsg_update_follow_role;
}

void smsg_update_follow_role::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<smsg_update_follow_role*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(player_guid_, follow_role_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_update_follow_role::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_update_follow_role)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 player_guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_guid_)));
          set_has_player_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_follow_role_id;
        break;
      }

      // required uint32 follow_role_id = 2;
      case 2: {
        if (tag == 16) {
         parse_follow_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &follow_role_id_)));
          set_has_follow_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_update_follow_role)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_update_follow_role)
  return false;
#undef DO_
}

void smsg_update_follow_role::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_update_follow_role)
  // required uint64 player_guid = 1;
  if (has_player_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_guid(), output);
  }

  // required uint32 follow_role_id = 2;
  if (has_follow_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->follow_role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_update_follow_role)
}

::google::protobuf::uint8* smsg_update_follow_role::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_update_follow_role)
  // required uint64 player_guid = 1;
  if (has_player_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_guid(), target);
  }

  // required uint32 follow_role_id = 2;
  if (has_follow_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->follow_role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_update_follow_role)
  return target;
}

int smsg_update_follow_role::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 player_guid = 1;
    if (has_player_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_guid());
    }

    // required uint32 follow_role_id = 2;
    if (has_follow_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->follow_role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_update_follow_role::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_update_follow_role* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_update_follow_role*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_update_follow_role::MergeFrom(const smsg_update_follow_role& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_guid()) {
      set_player_guid(from.player_guid());
    }
    if (from.has_follow_role_id()) {
      set_follow_role_id(from.follow_role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_update_follow_role::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_update_follow_role::CopyFrom(const smsg_update_follow_role& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_update_follow_role::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void smsg_update_follow_role::Swap(smsg_update_follow_role* other) {
  if (other != this) {
    std::swap(player_guid_, other->player_guid_);
    std::swap(follow_role_id_, other->follow_role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_update_follow_role::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_update_follow_role_descriptor_;
  metadata.reflection = smsg_update_follow_role_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_update_current_title::kPlayerFieldNumber;
const int smsg_update_current_title::kCurrentTitleFieldNumber;
#endif  // !_MSC_VER

smsg_update_current_title::smsg_update_current_title()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_update_current_title)
}

void smsg_update_current_title::InitAsDefaultInstance() {
}

smsg_update_current_title::smsg_update_current_title(const smsg_update_current_title& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_update_current_title)
}

void smsg_update_current_title::SharedCtor() {
  _cached_size_ = 0;
  player_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_update_current_title::~smsg_update_current_title() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_update_current_title)
  SharedDtor();
}

void smsg_update_current_title::SharedDtor() {
  if (this != default_instance_) {
  }
}

void smsg_update_current_title::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_update_current_title::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_update_current_title_descriptor_;
}

const smsg_update_current_title& smsg_update_current_title::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_update_current_title* smsg_update_current_title::default_instance_ = NULL;

smsg_update_current_title* smsg_update_current_title::New() const {
  return new smsg_update_current_title;
}

void smsg_update_current_title::Clear() {
  player_ = GOOGLE_ULONGLONG(0);
  current_title_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_update_current_title::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_update_current_title)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 player = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_)));
          set_has_player();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_current_title;
        break;
      }

      // repeated uint32 current_title = 2;
      case 2: {
        if (tag == 16) {
         parse_current_title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_current_title())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_current_title())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_current_title;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_update_current_title)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_update_current_title)
  return false;
#undef DO_
}

void smsg_update_current_title::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_update_current_title)
  // required uint64 player = 1;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player(), output);
  }

  // repeated uint32 current_title = 2;
  for (int i = 0; i < this->current_title_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->current_title(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_update_current_title)
}

::google::protobuf::uint8* smsg_update_current_title::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_update_current_title)
  // required uint64 player = 1;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player(), target);
  }

  // repeated uint32 current_title = 2;
  for (int i = 0; i < this->current_title_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->current_title(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_update_current_title)
  return target;
}

int smsg_update_current_title::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 player = 1;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player());
    }

  }
  // repeated uint32 current_title = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->current_title_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->current_title(i));
    }
    total_size += 1 * this->current_title_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_update_current_title::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_update_current_title* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_update_current_title*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_update_current_title::MergeFrom(const smsg_update_current_title& from) {
  GOOGLE_CHECK_NE(&from, this);
  current_title_.MergeFrom(from.current_title_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player()) {
      set_player(from.player());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_update_current_title::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_update_current_title::CopyFrom(const smsg_update_current_title& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_update_current_title::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void smsg_update_current_title::Swap(smsg_update_current_title* other) {
  if (other != this) {
    std::swap(player_, other->player_);
    current_title_.Swap(&other->current_title_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_update_current_title::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_update_current_title_descriptor_;
  metadata.reflection = smsg_update_current_title_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_update_special_right::kPlayerFieldNumber;
const int smsg_update_special_right::kSpecialRightFieldNumber;
#endif  // !_MSC_VER

smsg_update_special_right::smsg_update_special_right()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_update_special_right)
}

void smsg_update_special_right::InitAsDefaultInstance() {
}

smsg_update_special_right::smsg_update_special_right(const smsg_update_special_right& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_update_special_right)
}

void smsg_update_special_right::SharedCtor() {
  _cached_size_ = 0;
  player_ = GOOGLE_ULONGLONG(0);
  special_right_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_update_special_right::~smsg_update_special_right() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_update_special_right)
  SharedDtor();
}

void smsg_update_special_right::SharedDtor() {
  if (this != default_instance_) {
  }
}

void smsg_update_special_right::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_update_special_right::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_update_special_right_descriptor_;
}

const smsg_update_special_right& smsg_update_special_right::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_update_special_right* smsg_update_special_right::default_instance_ = NULL;

smsg_update_special_right* smsg_update_special_right::New() const {
  return new smsg_update_special_right;
}

void smsg_update_special_right::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<smsg_update_special_right*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(player_, special_right_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_update_special_right::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_update_special_right)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 player = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_)));
          set_has_player();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_special_right;
        break;
      }

      // required uint32 special_right = 2;
      case 2: {
        if (tag == 16) {
         parse_special_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &special_right_)));
          set_has_special_right();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_update_special_right)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_update_special_right)
  return false;
#undef DO_
}

void smsg_update_special_right::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_update_special_right)
  // required uint64 player = 1;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player(), output);
  }

  // required uint32 special_right = 2;
  if (has_special_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->special_right(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_update_special_right)
}

::google::protobuf::uint8* smsg_update_special_right::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_update_special_right)
  // required uint64 player = 1;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player(), target);
  }

  // required uint32 special_right = 2;
  if (has_special_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->special_right(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_update_special_right)
  return target;
}

int smsg_update_special_right::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 player = 1;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player());
    }

    // required uint32 special_right = 2;
    if (has_special_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->special_right());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_update_special_right::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_update_special_right* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_update_special_right*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_update_special_right::MergeFrom(const smsg_update_special_right& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player()) {
      set_player(from.player());
    }
    if (from.has_special_right()) {
      set_special_right(from.special_right());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_update_special_right::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_update_special_right::CopyFrom(const smsg_update_special_right& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_update_special_right::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void smsg_update_special_right::Swap(smsg_update_special_right* other) {
  if (other != this) {
    std::swap(player_, other->player_);
    std::swap(special_right_, other->special_right_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_update_special_right::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_update_special_right_descriptor_;
  metadata.reflection = smsg_update_special_right_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_wife_update_follow::kPlayerFieldNumber;
const int smsg_wife_update_follow::kWifeFollowFieldNumber;
#endif  // !_MSC_VER

smsg_wife_update_follow::smsg_wife_update_follow()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_wife_update_follow)
}

void smsg_wife_update_follow::InitAsDefaultInstance() {
}

smsg_wife_update_follow::smsg_wife_update_follow(const smsg_wife_update_follow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_wife_update_follow)
}

void smsg_wife_update_follow::SharedCtor() {
  _cached_size_ = 0;
  player_ = GOOGLE_ULONGLONG(0);
  wife_follow_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_wife_update_follow::~smsg_wife_update_follow() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_wife_update_follow)
  SharedDtor();
}

void smsg_wife_update_follow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void smsg_wife_update_follow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_wife_update_follow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_wife_update_follow_descriptor_;
}

const smsg_wife_update_follow& smsg_wife_update_follow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_wife_update_follow* smsg_wife_update_follow::default_instance_ = NULL;

smsg_wife_update_follow* smsg_wife_update_follow::New() const {
  return new smsg_wife_update_follow;
}

void smsg_wife_update_follow::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<smsg_wife_update_follow*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(player_, wife_follow_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_wife_update_follow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_wife_update_follow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 player = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_)));
          set_has_player();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_wife_follow;
        break;
      }

      // required uint32 wife_follow = 2;
      case 2: {
        if (tag == 16) {
         parse_wife_follow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wife_follow_)));
          set_has_wife_follow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_wife_update_follow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_wife_update_follow)
  return false;
#undef DO_
}

void smsg_wife_update_follow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_wife_update_follow)
  // required uint64 player = 1;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player(), output);
  }

  // required uint32 wife_follow = 2;
  if (has_wife_follow()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->wife_follow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_wife_update_follow)
}

::google::protobuf::uint8* smsg_wife_update_follow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_wife_update_follow)
  // required uint64 player = 1;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player(), target);
  }

  // required uint32 wife_follow = 2;
  if (has_wife_follow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->wife_follow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_wife_update_follow)
  return target;
}

int smsg_wife_update_follow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 player = 1;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player());
    }

    // required uint32 wife_follow = 2;
    if (has_wife_follow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wife_follow());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_wife_update_follow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_wife_update_follow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_wife_update_follow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_wife_update_follow::MergeFrom(const smsg_wife_update_follow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player()) {
      set_player(from.player());
    }
    if (from.has_wife_follow()) {
      set_wife_follow(from.wife_follow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_wife_update_follow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_wife_update_follow::CopyFrom(const smsg_wife_update_follow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_wife_update_follow::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void smsg_wife_update_follow::Swap(smsg_wife_update_follow* other) {
  if (other != this) {
    std::swap(player_, other->player_);
    std::swap(wife_follow_, other->wife_follow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_wife_update_follow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_wife_update_follow_descriptor_;
  metadata.reflection = smsg_wife_update_follow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_update_doubleexp_info::kIdFieldNumber;
const int smsg_update_doubleexp_info::kLeftNumFieldNumber;
const int smsg_update_doubleexp_info::kMutilValueFieldNumber;
#endif  // !_MSC_VER

smsg_update_doubleexp_info::smsg_update_doubleexp_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_update_doubleexp_info)
}

void smsg_update_doubleexp_info::InitAsDefaultInstance() {
}

smsg_update_doubleexp_info::smsg_update_doubleexp_info(const smsg_update_doubleexp_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_update_doubleexp_info)
}

void smsg_update_doubleexp_info::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  left_num_ = 0u;
  mutil_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_update_doubleexp_info::~smsg_update_doubleexp_info() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_update_doubleexp_info)
  SharedDtor();
}

void smsg_update_doubleexp_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void smsg_update_doubleexp_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_update_doubleexp_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_update_doubleexp_info_descriptor_;
}

const smsg_update_doubleexp_info& smsg_update_doubleexp_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_update_doubleexp_info* smsg_update_doubleexp_info::default_instance_ = NULL;

smsg_update_doubleexp_info* smsg_update_doubleexp_info::New() const {
  return new smsg_update_doubleexp_info;
}

void smsg_update_doubleexp_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<smsg_update_doubleexp_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, mutil_value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_update_doubleexp_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_update_doubleexp_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_left_num;
        break;
      }

      // optional uint32 left_num = 2;
      case 2: {
        if (tag == 16) {
         parse_left_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_num_)));
          set_has_left_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mutil_value;
        break;
      }

      // optional uint32 mutil_value = 3;
      case 3: {
        if (tag == 24) {
         parse_mutil_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mutil_value_)));
          set_has_mutil_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_update_doubleexp_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_update_doubleexp_info)
  return false;
#undef DO_
}

void smsg_update_doubleexp_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_update_doubleexp_info)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 left_num = 2;
  if (has_left_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->left_num(), output);
  }

  // optional uint32 mutil_value = 3;
  if (has_mutil_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mutil_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_update_doubleexp_info)
}

::google::protobuf::uint8* smsg_update_doubleexp_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_update_doubleexp_info)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 left_num = 2;
  if (has_left_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->left_num(), target);
  }

  // optional uint32 mutil_value = 3;
  if (has_mutil_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mutil_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_update_doubleexp_info)
  return target;
}

int smsg_update_doubleexp_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 left_num = 2;
    if (has_left_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left_num());
    }

    // optional uint32 mutil_value = 3;
    if (has_mutil_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mutil_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_update_doubleexp_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_update_doubleexp_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_update_doubleexp_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_update_doubleexp_info::MergeFrom(const smsg_update_doubleexp_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_left_num()) {
      set_left_num(from.left_num());
    }
    if (from.has_mutil_value()) {
      set_mutil_value(from.mutil_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_update_doubleexp_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_update_doubleexp_info::CopyFrom(const smsg_update_doubleexp_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_update_doubleexp_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void smsg_update_doubleexp_info::Swap(smsg_update_doubleexp_info* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(left_num_, other->left_num_);
    std::swap(mutil_value_, other->mutil_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_update_doubleexp_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_update_doubleexp_info_descriptor_;
  metadata.reflection = smsg_update_doubleexp_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_lookup_guild_name::kPlayerGuidFieldNumber;
const int smsg_lookup_guild_name::kGuildNameFieldNumber;
#endif  // !_MSC_VER

smsg_lookup_guild_name::smsg_lookup_guild_name()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_lookup_guild_name)
}

void smsg_lookup_guild_name::InitAsDefaultInstance() {
}

smsg_lookup_guild_name::smsg_lookup_guild_name(const smsg_lookup_guild_name& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_lookup_guild_name)
}

void smsg_lookup_guild_name::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  player_guid_ = GOOGLE_ULONGLONG(0);
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_lookup_guild_name::~smsg_lookup_guild_name() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_lookup_guild_name)
  SharedDtor();
}

void smsg_lookup_guild_name::SharedDtor() {
  if (guild_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guild_name_;
  }
  if (this != default_instance_) {
  }
}

void smsg_lookup_guild_name::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_lookup_guild_name::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_lookup_guild_name_descriptor_;
}

const smsg_lookup_guild_name& smsg_lookup_guild_name::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_lookup_guild_name* smsg_lookup_guild_name::default_instance_ = NULL;

smsg_lookup_guild_name* smsg_lookup_guild_name::New() const {
  return new smsg_lookup_guild_name;
}

void smsg_lookup_guild_name::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    player_guid_ = GOOGLE_ULONGLONG(0);
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guild_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_lookup_guild_name::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_lookup_guild_name)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 player_guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_guid_)));
          set_has_player_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_guild_name;
        break;
      }

      // optional string guild_name = 2;
      case 2: {
        if (tag == 18) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guild_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_lookup_guild_name)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_lookup_guild_name)
  return false;
#undef DO_
}

void smsg_lookup_guild_name::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_lookup_guild_name)
  // required uint64 player_guid = 1;
  if (has_player_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_guid(), output);
  }

  // optional string guild_name = 2;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guild_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->guild_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_lookup_guild_name)
}

::google::protobuf::uint8* smsg_lookup_guild_name::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_lookup_guild_name)
  // required uint64 player_guid = 1;
  if (has_player_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_guid(), target);
  }

  // optional string guild_name = 2;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guild_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guild_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_lookup_guild_name)
  return target;
}

int smsg_lookup_guild_name::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 player_guid = 1;
    if (has_player_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_guid());
    }

    // optional string guild_name = 2;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_lookup_guild_name::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_lookup_guild_name* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_lookup_guild_name*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_lookup_guild_name::MergeFrom(const smsg_lookup_guild_name& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_guid()) {
      set_player_guid(from.player_guid());
    }
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_lookup_guild_name::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_lookup_guild_name::CopyFrom(const smsg_lookup_guild_name& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_lookup_guild_name::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void smsg_lookup_guild_name::Swap(smsg_lookup_guild_name* other) {
  if (other != this) {
    std::swap(player_guid_, other->player_guid_);
    std::swap(guild_name_, other->guild_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_lookup_guild_name::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_lookup_guild_name_descriptor_;
  metadata.reflection = smsg_lookup_guild_name_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_lookup_dodge::kPlayerGuidFieldNumber;
const int smsg_lookup_dodge::kDodgeIdFieldNumber;
#endif  // !_MSC_VER

smsg_lookup_dodge::smsg_lookup_dodge()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_lookup_dodge)
}

void smsg_lookup_dodge::InitAsDefaultInstance() {
}

smsg_lookup_dodge::smsg_lookup_dodge(const smsg_lookup_dodge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_lookup_dodge)
}

void smsg_lookup_dodge::SharedCtor() {
  _cached_size_ = 0;
  player_guid_ = GOOGLE_ULONGLONG(0);
  dodge_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_lookup_dodge::~smsg_lookup_dodge() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_lookup_dodge)
  SharedDtor();
}

void smsg_lookup_dodge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void smsg_lookup_dodge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_lookup_dodge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_lookup_dodge_descriptor_;
}

const smsg_lookup_dodge& smsg_lookup_dodge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_lookup_dodge* smsg_lookup_dodge::default_instance_ = NULL;

smsg_lookup_dodge* smsg_lookup_dodge::New() const {
  return new smsg_lookup_dodge;
}

void smsg_lookup_dodge::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<smsg_lookup_dodge*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(player_guid_, dodge_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_lookup_dodge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_lookup_dodge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 player_guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_guid_)));
          set_has_player_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dodge_id;
        break;
      }

      // optional uint32 dodge_id = 2;
      case 2: {
        if (tag == 16) {
         parse_dodge_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dodge_id_)));
          set_has_dodge_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_lookup_dodge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_lookup_dodge)
  return false;
#undef DO_
}

void smsg_lookup_dodge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_lookup_dodge)
  // required uint64 player_guid = 1;
  if (has_player_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_guid(), output);
  }

  // optional uint32 dodge_id = 2;
  if (has_dodge_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dodge_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_lookup_dodge)
}

::google::protobuf::uint8* smsg_lookup_dodge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_lookup_dodge)
  // required uint64 player_guid = 1;
  if (has_player_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_guid(), target);
  }

  // optional uint32 dodge_id = 2;
  if (has_dodge_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dodge_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_lookup_dodge)
  return target;
}

int smsg_lookup_dodge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 player_guid = 1;
    if (has_player_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_guid());
    }

    // optional uint32 dodge_id = 2;
    if (has_dodge_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dodge_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_lookup_dodge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_lookup_dodge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_lookup_dodge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_lookup_dodge::MergeFrom(const smsg_lookup_dodge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_guid()) {
      set_player_guid(from.player_guid());
    }
    if (from.has_dodge_id()) {
      set_dodge_id(from.dodge_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_lookup_dodge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_lookup_dodge::CopyFrom(const smsg_lookup_dodge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_lookup_dodge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void smsg_lookup_dodge::Swap(smsg_lookup_dodge* other) {
  if (other != this) {
    std::swap(player_guid_, other->player_guid_);
    std::swap(dodge_id_, other->dodge_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_lookup_dodge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_lookup_dodge_descriptor_;
  metadata.reflection = smsg_lookup_dodge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_hire_zslw::kHiredFieldNumber;
#endif  // !_MSC_VER

smsg_hire_zslw::smsg_hire_zslw()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_hire_zslw)
}

void smsg_hire_zslw::InitAsDefaultInstance() {
}

smsg_hire_zslw::smsg_hire_zslw(const smsg_hire_zslw& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_hire_zslw)
}

void smsg_hire_zslw::SharedCtor() {
  _cached_size_ = 0;
  hired_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_hire_zslw::~smsg_hire_zslw() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_hire_zslw)
  SharedDtor();
}

void smsg_hire_zslw::SharedDtor() {
  if (this != default_instance_) {
  }
}

void smsg_hire_zslw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_hire_zslw::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_hire_zslw_descriptor_;
}

const smsg_hire_zslw& smsg_hire_zslw::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_hire_zslw* smsg_hire_zslw::default_instance_ = NULL;

smsg_hire_zslw* smsg_hire_zslw::New() const {
  return new smsg_hire_zslw;
}

void smsg_hire_zslw::Clear() {
  hired_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_hire_zslw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_hire_zslw)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hired = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hired_)));
          set_has_hired();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_hire_zslw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_hire_zslw)
  return false;
#undef DO_
}

void smsg_hire_zslw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_hire_zslw)
  // required uint32 hired = 1;
  if (has_hired()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hired(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_hire_zslw)
}

::google::protobuf::uint8* smsg_hire_zslw::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_hire_zslw)
  // required uint32 hired = 1;
  if (has_hired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hired(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_hire_zslw)
  return target;
}

int smsg_hire_zslw::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hired = 1;
    if (has_hired()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hired());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_hire_zslw::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_hire_zslw* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_hire_zslw*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_hire_zslw::MergeFrom(const smsg_hire_zslw& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hired()) {
      set_hired(from.hired());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_hire_zslw::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_hire_zslw::CopyFrom(const smsg_hire_zslw& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_hire_zslw::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void smsg_hire_zslw::Swap(smsg_hire_zslw* other) {
  if (other != this) {
    std::swap(hired_, other->hired_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_hire_zslw::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_hire_zslw_descriptor_;
  metadata.reflection = smsg_hire_zslw_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_server_open_time::kOpenTimeFieldNumber;
#endif  // !_MSC_VER

smsg_server_open_time::smsg_server_open_time()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_server_open_time)
}

void smsg_server_open_time::InitAsDefaultInstance() {
}

smsg_server_open_time::smsg_server_open_time(const smsg_server_open_time& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_server_open_time)
}

void smsg_server_open_time::SharedCtor() {
  _cached_size_ = 0;
  open_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_server_open_time::~smsg_server_open_time() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_server_open_time)
  SharedDtor();
}

void smsg_server_open_time::SharedDtor() {
  if (this != default_instance_) {
  }
}

void smsg_server_open_time::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_server_open_time::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_server_open_time_descriptor_;
}

const smsg_server_open_time& smsg_server_open_time::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_server_open_time* smsg_server_open_time::default_instance_ = NULL;

smsg_server_open_time* smsg_server_open_time::New() const {
  return new smsg_server_open_time;
}

void smsg_server_open_time::Clear() {
  open_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_server_open_time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_server_open_time)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 open_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &open_time_)));
          set_has_open_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_server_open_time)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_server_open_time)
  return false;
#undef DO_
}

void smsg_server_open_time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_server_open_time)
  // optional uint64 open_time = 1;
  if (has_open_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->open_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_server_open_time)
}

::google::protobuf::uint8* smsg_server_open_time::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_server_open_time)
  // optional uint64 open_time = 1;
  if (has_open_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->open_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_server_open_time)
  return target;
}

int smsg_server_open_time::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 open_time = 1;
    if (has_open_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->open_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_server_open_time::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_server_open_time* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_server_open_time*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_server_open_time::MergeFrom(const smsg_server_open_time& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_open_time()) {
      set_open_time(from.open_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_server_open_time::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_server_open_time::CopyFrom(const smsg_server_open_time& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_server_open_time::IsInitialized() const {

  return true;
}

void smsg_server_open_time::Swap(smsg_server_open_time* other) {
  if (other != this) {
    std::swap(open_time_, other->open_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_server_open_time::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_server_open_time_descriptor_;
  metadata.reflection = smsg_server_open_time_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_client_config::kConfigStrFieldNumber;
#endif  // !_MSC_VER

smsg_client_config::smsg_client_config()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_client_config)
}

void smsg_client_config::InitAsDefaultInstance() {
}

smsg_client_config::smsg_client_config(const smsg_client_config& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_client_config)
}

void smsg_client_config::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  config_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_client_config::~smsg_client_config() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_client_config)
  SharedDtor();
}

void smsg_client_config::SharedDtor() {
  if (config_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete config_str_;
  }
  if (this != default_instance_) {
  }
}

void smsg_client_config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_client_config::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_client_config_descriptor_;
}

const smsg_client_config& smsg_client_config::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_client_config* smsg_client_config::default_instance_ = NULL;

smsg_client_config* smsg_client_config::New() const {
  return new smsg_client_config;
}

void smsg_client_config::Clear() {
  if (has_config_str()) {
    if (config_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      config_str_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_client_config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_client_config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string config_str = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->config_str().data(), this->config_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config_str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_client_config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_client_config)
  return false;
#undef DO_
}

void smsg_client_config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_client_config)
  // optional string config_str = 1;
  if (has_config_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->config_str().data(), this->config_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->config_str(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_client_config)
}

::google::protobuf::uint8* smsg_client_config::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_client_config)
  // optional string config_str = 1;
  if (has_config_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->config_str().data(), this->config_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->config_str(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_client_config)
  return target;
}

int smsg_client_config::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string config_str = 1;
    if (has_config_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->config_str());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_client_config::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_client_config* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_client_config*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_client_config::MergeFrom(const smsg_client_config& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_config_str()) {
      set_config_str(from.config_str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_client_config::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_client_config::CopyFrom(const smsg_client_config& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_client_config::IsInitialized() const {

  return true;
}

void smsg_client_config::Swap(smsg_client_config* other) {
  if (other != this) {
    std::swap(config_str_, other->config_str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_client_config::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_client_config_descriptor_;
  metadata.reflection = smsg_client_config_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_update_yellow_vip_level::kPlayerFieldNumber;
const int smsg_update_yellow_vip_level::kYellowVipLevelFieldNumber;
const int smsg_update_yellow_vip_level::kIsYellowVipFieldNumber;
const int smsg_update_yellow_vip_level::kIsYellowYearVipFieldNumber;
const int smsg_update_yellow_vip_level::kIsYellowHighVipFieldNumber;
#endif  // !_MSC_VER

smsg_update_yellow_vip_level::smsg_update_yellow_vip_level()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.protocol.smsg_update_yellow_vip_level)
}

void smsg_update_yellow_vip_level::InitAsDefaultInstance() {
}

smsg_update_yellow_vip_level::smsg_update_yellow_vip_level(const smsg_update_yellow_vip_level& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.protocol.smsg_update_yellow_vip_level)
}

void smsg_update_yellow_vip_level::SharedCtor() {
  _cached_size_ = 0;
  player_ = GOOGLE_ULONGLONG(0);
  yellow_vip_level_ = 0u;
  is_yellow_vip_ = 0u;
  is_yellow_year_vip_ = 0u;
  is_yellow_high_vip_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_update_yellow_vip_level::~smsg_update_yellow_vip_level() {
  // @@protoc_insertion_point(destructor:typed.protocol.smsg_update_yellow_vip_level)
  SharedDtor();
}

void smsg_update_yellow_vip_level::SharedDtor() {
  if (this != default_instance_) {
  }
}

void smsg_update_yellow_vip_level::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_update_yellow_vip_level::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_update_yellow_vip_level_descriptor_;
}

const smsg_update_yellow_vip_level& smsg_update_yellow_vip_level::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fplayer_2eproto();
  return *default_instance_;
}

smsg_update_yellow_vip_level* smsg_update_yellow_vip_level::default_instance_ = NULL;

smsg_update_yellow_vip_level* smsg_update_yellow_vip_level::New() const {
  return new smsg_update_yellow_vip_level;
}

void smsg_update_yellow_vip_level::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<smsg_update_yellow_vip_level*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(player_, is_yellow_high_vip_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_update_yellow_vip_level::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.protocol.smsg_update_yellow_vip_level)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 player = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_)));
          set_has_player();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_yellow_vip_level;
        break;
      }

      // required uint32 yellow_vip_level = 2;
      case 2: {
        if (tag == 16) {
         parse_yellow_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yellow_vip_level_)));
          set_has_yellow_vip_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_yellow_vip;
        break;
      }

      // optional uint32 is_yellow_vip = 3;
      case 3: {
        if (tag == 24) {
         parse_is_yellow_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_yellow_vip_)));
          set_has_is_yellow_vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_yellow_year_vip;
        break;
      }

      // optional uint32 is_yellow_year_vip = 4;
      case 4: {
        if (tag == 32) {
         parse_is_yellow_year_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_yellow_year_vip_)));
          set_has_is_yellow_year_vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_yellow_high_vip;
        break;
      }

      // optional uint32 is_yellow_high_vip = 5;
      case 5: {
        if (tag == 40) {
         parse_is_yellow_high_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_yellow_high_vip_)));
          set_has_is_yellow_high_vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.protocol.smsg_update_yellow_vip_level)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.protocol.smsg_update_yellow_vip_level)
  return false;
#undef DO_
}

void smsg_update_yellow_vip_level::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.protocol.smsg_update_yellow_vip_level)
  // required uint64 player = 1;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player(), output);
  }

  // required uint32 yellow_vip_level = 2;
  if (has_yellow_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->yellow_vip_level(), output);
  }

  // optional uint32 is_yellow_vip = 3;
  if (has_is_yellow_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->is_yellow_vip(), output);
  }

  // optional uint32 is_yellow_year_vip = 4;
  if (has_is_yellow_year_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->is_yellow_year_vip(), output);
  }

  // optional uint32 is_yellow_high_vip = 5;
  if (has_is_yellow_high_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->is_yellow_high_vip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.protocol.smsg_update_yellow_vip_level)
}

::google::protobuf::uint8* smsg_update_yellow_vip_level::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.protocol.smsg_update_yellow_vip_level)
  // required uint64 player = 1;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player(), target);
  }

  // required uint32 yellow_vip_level = 2;
  if (has_yellow_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->yellow_vip_level(), target);
  }

  // optional uint32 is_yellow_vip = 3;
  if (has_is_yellow_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->is_yellow_vip(), target);
  }

  // optional uint32 is_yellow_year_vip = 4;
  if (has_is_yellow_year_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->is_yellow_year_vip(), target);
  }

  // optional uint32 is_yellow_high_vip = 5;
  if (has_is_yellow_high_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->is_yellow_high_vip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.protocol.smsg_update_yellow_vip_level)
  return target;
}

int smsg_update_yellow_vip_level::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 player = 1;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player());
    }

    // required uint32 yellow_vip_level = 2;
    if (has_yellow_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yellow_vip_level());
    }

    // optional uint32 is_yellow_vip = 3;
    if (has_is_yellow_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_yellow_vip());
    }

    // optional uint32 is_yellow_year_vip = 4;
    if (has_is_yellow_year_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_yellow_year_vip());
    }

    // optional uint32 is_yellow_high_vip = 5;
    if (has_is_yellow_high_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_yellow_high_vip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_update_yellow_vip_level::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_update_yellow_vip_level* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_update_yellow_vip_level*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_update_yellow_vip_level::MergeFrom(const smsg_update_yellow_vip_level& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player()) {
      set_player(from.player());
    }
    if (from.has_yellow_vip_level()) {
      set_yellow_vip_level(from.yellow_vip_level());
    }
    if (from.has_is_yellow_vip()) {
      set_is_yellow_vip(from.is_yellow_vip());
    }
    if (from.has_is_yellow_year_vip()) {
      set_is_yellow_year_vip(from.is_yellow_year_vip());
    }
    if (from.has_is_yellow_high_vip()) {
      set_is_yellow_high_vip(from.is_yellow_high_vip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_update_yellow_vip_level::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_update_yellow_vip_level::CopyFrom(const smsg_update_yellow_vip_level& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_update_yellow_vip_level::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void smsg_update_yellow_vip_level::Swap(smsg_update_yellow_vip_level* other) {
  if (other != this) {
    std::swap(player_, other->player_);
    std::swap(yellow_vip_level_, other->yellow_vip_level_);
    std::swap(is_yellow_vip_, other->is_yellow_vip_);
    std::swap(is_yellow_year_vip_, other->is_yellow_year_vip_);
    std::swap(is_yellow_high_vip_, other->is_yellow_high_vip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_update_yellow_vip_level::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_update_yellow_vip_level_descriptor_;
  metadata.reflection = smsg_update_yellow_vip_level_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace typed

// @@protoc_insertion_point(global_scope)
