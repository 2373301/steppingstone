// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/msg_scene.proto

#ifndef PROTOBUF_protocol_2fmsg_5fscene_2eproto__INCLUDED
#define PROTOBUF_protocol_2fmsg_5fscene_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protocol_2fmsg_5fscene_2eproto();
void protobuf_AssignDesc_protocol_2fmsg_5fscene_2eproto();
void protobuf_ShutdownFile_protocol_2fmsg_5fscene_2eproto();

class scene_xs2ns_req_online_scenes;
class scene_ns2xs_ack_online_scenes;
class scene_ns2xs_ntf_new_scenes;
class scene_xs2xs_req_connection;
class scene_xs2xs_ack_connection;

// ===================================================================

class scene_xs2ns_req_online_scenes : public ::google::protobuf::Message {
 public:
  scene_xs2ns_req_online_scenes();
  virtual ~scene_xs2ns_req_online_scenes();

  scene_xs2ns_req_online_scenes(const scene_xs2ns_req_online_scenes& from);

  inline scene_xs2ns_req_online_scenes& operator=(const scene_xs2ns_req_online_scenes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const scene_xs2ns_req_online_scenes& default_instance();

  void Swap(scene_xs2ns_req_online_scenes* other);

  // implements Message ----------------------------------------------

  scene_xs2ns_req_online_scenes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const scene_xs2ns_req_online_scenes& from);
  void MergeFrom(const scene_xs2ns_req_online_scenes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string srv_type = 1;
  inline bool has_srv_type() const;
  inline void clear_srv_type();
  static const int kSrvTypeFieldNumber = 1;
  inline const ::std::string& srv_type() const;
  inline void set_srv_type(const ::std::string& value);
  inline void set_srv_type(const char* value);
  inline void set_srv_type(const char* value, size_t size);
  inline ::std::string* mutable_srv_type();
  inline ::std::string* release_srv_type();
  inline void set_allocated_srv_type(::std::string* srv_type);

  // optional string srv_id = 2;
  inline bool has_srv_id() const;
  inline void clear_srv_id();
  static const int kSrvIdFieldNumber = 2;
  inline const ::std::string& srv_id() const;
  inline void set_srv_id(const ::std::string& value);
  inline void set_srv_id(const char* value);
  inline void set_srv_id(const char* value, size_t size);
  inline ::std::string* mutable_srv_id();
  inline ::std::string* release_srv_id();
  inline void set_allocated_srv_id(::std::string* srv_id);

  // optional string srv_addr = 3;
  inline bool has_srv_addr() const;
  inline void clear_srv_addr();
  static const int kSrvAddrFieldNumber = 3;
  inline const ::std::string& srv_addr() const;
  inline void set_srv_addr(const ::std::string& value);
  inline void set_srv_addr(const char* value);
  inline void set_srv_addr(const char* value, size_t size);
  inline ::std::string* mutable_srv_addr();
  inline ::std::string* release_srv_addr();
  inline void set_allocated_srv_addr(::std::string* srv_addr);

  // @@protoc_insertion_point(class_scope:scene_xs2ns_req_online_scenes)
 private:
  inline void set_has_srv_type();
  inline void clear_has_srv_type();
  inline void set_has_srv_id();
  inline void clear_has_srv_id();
  inline void set_has_srv_addr();
  inline void clear_has_srv_addr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* srv_type_;
  ::std::string* srv_id_;
  ::std::string* srv_addr_;
  friend void  protobuf_AddDesc_protocol_2fmsg_5fscene_2eproto();
  friend void protobuf_AssignDesc_protocol_2fmsg_5fscene_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fmsg_5fscene_2eproto();

  void InitAsDefaultInstance();
  static scene_xs2ns_req_online_scenes* default_instance_;
};
// -------------------------------------------------------------------

class scene_ns2xs_ack_online_scenes : public ::google::protobuf::Message {
 public:
  scene_ns2xs_ack_online_scenes();
  virtual ~scene_ns2xs_ack_online_scenes();

  scene_ns2xs_ack_online_scenes(const scene_ns2xs_ack_online_scenes& from);

  inline scene_ns2xs_ack_online_scenes& operator=(const scene_ns2xs_ack_online_scenes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const scene_ns2xs_ack_online_scenes& default_instance();

  void Swap(scene_ns2xs_ack_online_scenes* other);

  // implements Message ----------------------------------------------

  scene_ns2xs_ack_online_scenes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const scene_ns2xs_ack_online_scenes& from);
  void MergeFrom(const scene_ns2xs_ack_online_scenes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string srv_types = 1;
  inline int srv_types_size() const;
  inline void clear_srv_types();
  static const int kSrvTypesFieldNumber = 1;
  inline const ::std::string& srv_types(int index) const;
  inline ::std::string* mutable_srv_types(int index);
  inline void set_srv_types(int index, const ::std::string& value);
  inline void set_srv_types(int index, const char* value);
  inline void set_srv_types(int index, const char* value, size_t size);
  inline ::std::string* add_srv_types();
  inline void add_srv_types(const ::std::string& value);
  inline void add_srv_types(const char* value);
  inline void add_srv_types(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& srv_types() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_srv_types();

  // repeated string srv_ids = 2;
  inline int srv_ids_size() const;
  inline void clear_srv_ids();
  static const int kSrvIdsFieldNumber = 2;
  inline const ::std::string& srv_ids(int index) const;
  inline ::std::string* mutable_srv_ids(int index);
  inline void set_srv_ids(int index, const ::std::string& value);
  inline void set_srv_ids(int index, const char* value);
  inline void set_srv_ids(int index, const char* value, size_t size);
  inline ::std::string* add_srv_ids();
  inline void add_srv_ids(const ::std::string& value);
  inline void add_srv_ids(const char* value);
  inline void add_srv_ids(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& srv_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_srv_ids();

  // repeated string srv_addrs = 3;
  inline int srv_addrs_size() const;
  inline void clear_srv_addrs();
  static const int kSrvAddrsFieldNumber = 3;
  inline const ::std::string& srv_addrs(int index) const;
  inline ::std::string* mutable_srv_addrs(int index);
  inline void set_srv_addrs(int index, const ::std::string& value);
  inline void set_srv_addrs(int index, const char* value);
  inline void set_srv_addrs(int index, const char* value, size_t size);
  inline ::std::string* add_srv_addrs();
  inline void add_srv_addrs(const ::std::string& value);
  inline void add_srv_addrs(const char* value);
  inline void add_srv_addrs(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& srv_addrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_srv_addrs();

  // @@protoc_insertion_point(class_scope:scene_ns2xs_ack_online_scenes)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> srv_types_;
  ::google::protobuf::RepeatedPtrField< ::std::string> srv_ids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> srv_addrs_;
  friend void  protobuf_AddDesc_protocol_2fmsg_5fscene_2eproto();
  friend void protobuf_AssignDesc_protocol_2fmsg_5fscene_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fmsg_5fscene_2eproto();

  void InitAsDefaultInstance();
  static scene_ns2xs_ack_online_scenes* default_instance_;
};
// -------------------------------------------------------------------

class scene_ns2xs_ntf_new_scenes : public ::google::protobuf::Message {
 public:
  scene_ns2xs_ntf_new_scenes();
  virtual ~scene_ns2xs_ntf_new_scenes();

  scene_ns2xs_ntf_new_scenes(const scene_ns2xs_ntf_new_scenes& from);

  inline scene_ns2xs_ntf_new_scenes& operator=(const scene_ns2xs_ntf_new_scenes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const scene_ns2xs_ntf_new_scenes& default_instance();

  void Swap(scene_ns2xs_ntf_new_scenes* other);

  // implements Message ----------------------------------------------

  scene_ns2xs_ntf_new_scenes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const scene_ns2xs_ntf_new_scenes& from);
  void MergeFrom(const scene_ns2xs_ntf_new_scenes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string srv_types = 1;
  inline int srv_types_size() const;
  inline void clear_srv_types();
  static const int kSrvTypesFieldNumber = 1;
  inline const ::std::string& srv_types(int index) const;
  inline ::std::string* mutable_srv_types(int index);
  inline void set_srv_types(int index, const ::std::string& value);
  inline void set_srv_types(int index, const char* value);
  inline void set_srv_types(int index, const char* value, size_t size);
  inline ::std::string* add_srv_types();
  inline void add_srv_types(const ::std::string& value);
  inline void add_srv_types(const char* value);
  inline void add_srv_types(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& srv_types() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_srv_types();

  // repeated string srv_ids = 2;
  inline int srv_ids_size() const;
  inline void clear_srv_ids();
  static const int kSrvIdsFieldNumber = 2;
  inline const ::std::string& srv_ids(int index) const;
  inline ::std::string* mutable_srv_ids(int index);
  inline void set_srv_ids(int index, const ::std::string& value);
  inline void set_srv_ids(int index, const char* value);
  inline void set_srv_ids(int index, const char* value, size_t size);
  inline ::std::string* add_srv_ids();
  inline void add_srv_ids(const ::std::string& value);
  inline void add_srv_ids(const char* value);
  inline void add_srv_ids(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& srv_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_srv_ids();

  // repeated string srv_addrs = 3;
  inline int srv_addrs_size() const;
  inline void clear_srv_addrs();
  static const int kSrvAddrsFieldNumber = 3;
  inline const ::std::string& srv_addrs(int index) const;
  inline ::std::string* mutable_srv_addrs(int index);
  inline void set_srv_addrs(int index, const ::std::string& value);
  inline void set_srv_addrs(int index, const char* value);
  inline void set_srv_addrs(int index, const char* value, size_t size);
  inline ::std::string* add_srv_addrs();
  inline void add_srv_addrs(const ::std::string& value);
  inline void add_srv_addrs(const char* value);
  inline void add_srv_addrs(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& srv_addrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_srv_addrs();

  // @@protoc_insertion_point(class_scope:scene_ns2xs_ntf_new_scenes)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> srv_types_;
  ::google::protobuf::RepeatedPtrField< ::std::string> srv_ids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> srv_addrs_;
  friend void  protobuf_AddDesc_protocol_2fmsg_5fscene_2eproto();
  friend void protobuf_AssignDesc_protocol_2fmsg_5fscene_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fmsg_5fscene_2eproto();

  void InitAsDefaultInstance();
  static scene_ns2xs_ntf_new_scenes* default_instance_;
};
// -------------------------------------------------------------------

class scene_xs2xs_req_connection : public ::google::protobuf::Message {
 public:
  scene_xs2xs_req_connection();
  virtual ~scene_xs2xs_req_connection();

  scene_xs2xs_req_connection(const scene_xs2xs_req_connection& from);

  inline scene_xs2xs_req_connection& operator=(const scene_xs2xs_req_connection& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const scene_xs2xs_req_connection& default_instance();

  void Swap(scene_xs2xs_req_connection* other);

  // implements Message ----------------------------------------------

  scene_xs2xs_req_connection* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const scene_xs2xs_req_connection& from);
  void MergeFrom(const scene_xs2xs_req_connection& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string srv_type = 1;
  inline bool has_srv_type() const;
  inline void clear_srv_type();
  static const int kSrvTypeFieldNumber = 1;
  inline const ::std::string& srv_type() const;
  inline void set_srv_type(const ::std::string& value);
  inline void set_srv_type(const char* value);
  inline void set_srv_type(const char* value, size_t size);
  inline ::std::string* mutable_srv_type();
  inline ::std::string* release_srv_type();
  inline void set_allocated_srv_type(::std::string* srv_type);

  // optional string srv_id = 2;
  inline bool has_srv_id() const;
  inline void clear_srv_id();
  static const int kSrvIdFieldNumber = 2;
  inline const ::std::string& srv_id() const;
  inline void set_srv_id(const ::std::string& value);
  inline void set_srv_id(const char* value);
  inline void set_srv_id(const char* value, size_t size);
  inline ::std::string* mutable_srv_id();
  inline ::std::string* release_srv_id();
  inline void set_allocated_srv_id(::std::string* srv_id);

  // optional string srv_addr = 3;
  inline bool has_srv_addr() const;
  inline void clear_srv_addr();
  static const int kSrvAddrFieldNumber = 3;
  inline const ::std::string& srv_addr() const;
  inline void set_srv_addr(const ::std::string& value);
  inline void set_srv_addr(const char* value);
  inline void set_srv_addr(const char* value, size_t size);
  inline ::std::string* mutable_srv_addr();
  inline ::std::string* release_srv_addr();
  inline void set_allocated_srv_addr(::std::string* srv_addr);

  // @@protoc_insertion_point(class_scope:scene_xs2xs_req_connection)
 private:
  inline void set_has_srv_type();
  inline void clear_has_srv_type();
  inline void set_has_srv_id();
  inline void clear_has_srv_id();
  inline void set_has_srv_addr();
  inline void clear_has_srv_addr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* srv_type_;
  ::std::string* srv_id_;
  ::std::string* srv_addr_;
  friend void  protobuf_AddDesc_protocol_2fmsg_5fscene_2eproto();
  friend void protobuf_AssignDesc_protocol_2fmsg_5fscene_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fmsg_5fscene_2eproto();

  void InitAsDefaultInstance();
  static scene_xs2xs_req_connection* default_instance_;
};
// -------------------------------------------------------------------

class scene_xs2xs_ack_connection : public ::google::protobuf::Message {
 public:
  scene_xs2xs_ack_connection();
  virtual ~scene_xs2xs_ack_connection();

  scene_xs2xs_ack_connection(const scene_xs2xs_ack_connection& from);

  inline scene_xs2xs_ack_connection& operator=(const scene_xs2xs_ack_connection& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const scene_xs2xs_ack_connection& default_instance();

  void Swap(scene_xs2xs_ack_connection* other);

  // implements Message ----------------------------------------------

  scene_xs2xs_ack_connection* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const scene_xs2xs_ack_connection& from);
  void MergeFrom(const scene_xs2xs_ack_connection& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string srv_type = 1;
  inline bool has_srv_type() const;
  inline void clear_srv_type();
  static const int kSrvTypeFieldNumber = 1;
  inline const ::std::string& srv_type() const;
  inline void set_srv_type(const ::std::string& value);
  inline void set_srv_type(const char* value);
  inline void set_srv_type(const char* value, size_t size);
  inline ::std::string* mutable_srv_type();
  inline ::std::string* release_srv_type();
  inline void set_allocated_srv_type(::std::string* srv_type);

  // optional string srv_id = 2;
  inline bool has_srv_id() const;
  inline void clear_srv_id();
  static const int kSrvIdFieldNumber = 2;
  inline const ::std::string& srv_id() const;
  inline void set_srv_id(const ::std::string& value);
  inline void set_srv_id(const char* value);
  inline void set_srv_id(const char* value, size_t size);
  inline ::std::string* mutable_srv_id();
  inline ::std::string* release_srv_id();
  inline void set_allocated_srv_id(::std::string* srv_id);

  // optional string srv_addr = 3;
  inline bool has_srv_addr() const;
  inline void clear_srv_addr();
  static const int kSrvAddrFieldNumber = 3;
  inline const ::std::string& srv_addr() const;
  inline void set_srv_addr(const ::std::string& value);
  inline void set_srv_addr(const char* value);
  inline void set_srv_addr(const char* value, size_t size);
  inline ::std::string* mutable_srv_addr();
  inline ::std::string* release_srv_addr();
  inline void set_allocated_srv_addr(::std::string* srv_addr);

  // @@protoc_insertion_point(class_scope:scene_xs2xs_ack_connection)
 private:
  inline void set_has_srv_type();
  inline void clear_has_srv_type();
  inline void set_has_srv_id();
  inline void clear_has_srv_id();
  inline void set_has_srv_addr();
  inline void clear_has_srv_addr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* srv_type_;
  ::std::string* srv_id_;
  ::std::string* srv_addr_;
  friend void  protobuf_AddDesc_protocol_2fmsg_5fscene_2eproto();
  friend void protobuf_AssignDesc_protocol_2fmsg_5fscene_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fmsg_5fscene_2eproto();

  void InitAsDefaultInstance();
  static scene_xs2xs_ack_connection* default_instance_;
};
// ===================================================================


// ===================================================================

// scene_xs2ns_req_online_scenes

// optional string srv_type = 1;
inline bool scene_xs2ns_req_online_scenes::has_srv_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void scene_xs2ns_req_online_scenes::set_has_srv_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void scene_xs2ns_req_online_scenes::clear_has_srv_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void scene_xs2ns_req_online_scenes::clear_srv_type() {
  if (srv_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_type_->clear();
  }
  clear_has_srv_type();
}
inline const ::std::string& scene_xs2ns_req_online_scenes::srv_type() const {
  // @@protoc_insertion_point(field_get:scene_xs2ns_req_online_scenes.srv_type)
  return *srv_type_;
}
inline void scene_xs2ns_req_online_scenes::set_srv_type(const ::std::string& value) {
  set_has_srv_type();
  if (srv_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_type_ = new ::std::string;
  }
  srv_type_->assign(value);
  // @@protoc_insertion_point(field_set:scene_xs2ns_req_online_scenes.srv_type)
}
inline void scene_xs2ns_req_online_scenes::set_srv_type(const char* value) {
  set_has_srv_type();
  if (srv_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_type_ = new ::std::string;
  }
  srv_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:scene_xs2ns_req_online_scenes.srv_type)
}
inline void scene_xs2ns_req_online_scenes::set_srv_type(const char* value, size_t size) {
  set_has_srv_type();
  if (srv_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_type_ = new ::std::string;
  }
  srv_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:scene_xs2ns_req_online_scenes.srv_type)
}
inline ::std::string* scene_xs2ns_req_online_scenes::mutable_srv_type() {
  set_has_srv_type();
  if (srv_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:scene_xs2ns_req_online_scenes.srv_type)
  return srv_type_;
}
inline ::std::string* scene_xs2ns_req_online_scenes::release_srv_type() {
  clear_has_srv_type();
  if (srv_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = srv_type_;
    srv_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void scene_xs2ns_req_online_scenes::set_allocated_srv_type(::std::string* srv_type) {
  if (srv_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete srv_type_;
  }
  if (srv_type) {
    set_has_srv_type();
    srv_type_ = srv_type;
  } else {
    clear_has_srv_type();
    srv_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:scene_xs2ns_req_online_scenes.srv_type)
}

// optional string srv_id = 2;
inline bool scene_xs2ns_req_online_scenes::has_srv_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void scene_xs2ns_req_online_scenes::set_has_srv_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void scene_xs2ns_req_online_scenes::clear_has_srv_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void scene_xs2ns_req_online_scenes::clear_srv_id() {
  if (srv_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_id_->clear();
  }
  clear_has_srv_id();
}
inline const ::std::string& scene_xs2ns_req_online_scenes::srv_id() const {
  // @@protoc_insertion_point(field_get:scene_xs2ns_req_online_scenes.srv_id)
  return *srv_id_;
}
inline void scene_xs2ns_req_online_scenes::set_srv_id(const ::std::string& value) {
  set_has_srv_id();
  if (srv_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_id_ = new ::std::string;
  }
  srv_id_->assign(value);
  // @@protoc_insertion_point(field_set:scene_xs2ns_req_online_scenes.srv_id)
}
inline void scene_xs2ns_req_online_scenes::set_srv_id(const char* value) {
  set_has_srv_id();
  if (srv_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_id_ = new ::std::string;
  }
  srv_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:scene_xs2ns_req_online_scenes.srv_id)
}
inline void scene_xs2ns_req_online_scenes::set_srv_id(const char* value, size_t size) {
  set_has_srv_id();
  if (srv_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_id_ = new ::std::string;
  }
  srv_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:scene_xs2ns_req_online_scenes.srv_id)
}
inline ::std::string* scene_xs2ns_req_online_scenes::mutable_srv_id() {
  set_has_srv_id();
  if (srv_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:scene_xs2ns_req_online_scenes.srv_id)
  return srv_id_;
}
inline ::std::string* scene_xs2ns_req_online_scenes::release_srv_id() {
  clear_has_srv_id();
  if (srv_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = srv_id_;
    srv_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void scene_xs2ns_req_online_scenes::set_allocated_srv_id(::std::string* srv_id) {
  if (srv_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete srv_id_;
  }
  if (srv_id) {
    set_has_srv_id();
    srv_id_ = srv_id;
  } else {
    clear_has_srv_id();
    srv_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:scene_xs2ns_req_online_scenes.srv_id)
}

// optional string srv_addr = 3;
inline bool scene_xs2ns_req_online_scenes::has_srv_addr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void scene_xs2ns_req_online_scenes::set_has_srv_addr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void scene_xs2ns_req_online_scenes::clear_has_srv_addr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void scene_xs2ns_req_online_scenes::clear_srv_addr() {
  if (srv_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_addr_->clear();
  }
  clear_has_srv_addr();
}
inline const ::std::string& scene_xs2ns_req_online_scenes::srv_addr() const {
  // @@protoc_insertion_point(field_get:scene_xs2ns_req_online_scenes.srv_addr)
  return *srv_addr_;
}
inline void scene_xs2ns_req_online_scenes::set_srv_addr(const ::std::string& value) {
  set_has_srv_addr();
  if (srv_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_addr_ = new ::std::string;
  }
  srv_addr_->assign(value);
  // @@protoc_insertion_point(field_set:scene_xs2ns_req_online_scenes.srv_addr)
}
inline void scene_xs2ns_req_online_scenes::set_srv_addr(const char* value) {
  set_has_srv_addr();
  if (srv_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_addr_ = new ::std::string;
  }
  srv_addr_->assign(value);
  // @@protoc_insertion_point(field_set_char:scene_xs2ns_req_online_scenes.srv_addr)
}
inline void scene_xs2ns_req_online_scenes::set_srv_addr(const char* value, size_t size) {
  set_has_srv_addr();
  if (srv_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_addr_ = new ::std::string;
  }
  srv_addr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:scene_xs2ns_req_online_scenes.srv_addr)
}
inline ::std::string* scene_xs2ns_req_online_scenes::mutable_srv_addr() {
  set_has_srv_addr();
  if (srv_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_addr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:scene_xs2ns_req_online_scenes.srv_addr)
  return srv_addr_;
}
inline ::std::string* scene_xs2ns_req_online_scenes::release_srv_addr() {
  clear_has_srv_addr();
  if (srv_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = srv_addr_;
    srv_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void scene_xs2ns_req_online_scenes::set_allocated_srv_addr(::std::string* srv_addr) {
  if (srv_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete srv_addr_;
  }
  if (srv_addr) {
    set_has_srv_addr();
    srv_addr_ = srv_addr;
  } else {
    clear_has_srv_addr();
    srv_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:scene_xs2ns_req_online_scenes.srv_addr)
}

// -------------------------------------------------------------------

// scene_ns2xs_ack_online_scenes

// repeated string srv_types = 1;
inline int scene_ns2xs_ack_online_scenes::srv_types_size() const {
  return srv_types_.size();
}
inline void scene_ns2xs_ack_online_scenes::clear_srv_types() {
  srv_types_.Clear();
}
inline const ::std::string& scene_ns2xs_ack_online_scenes::srv_types(int index) const {
  // @@protoc_insertion_point(field_get:scene_ns2xs_ack_online_scenes.srv_types)
  return srv_types_.Get(index);
}
inline ::std::string* scene_ns2xs_ack_online_scenes::mutable_srv_types(int index) {
  // @@protoc_insertion_point(field_mutable:scene_ns2xs_ack_online_scenes.srv_types)
  return srv_types_.Mutable(index);
}
inline void scene_ns2xs_ack_online_scenes::set_srv_types(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:scene_ns2xs_ack_online_scenes.srv_types)
  srv_types_.Mutable(index)->assign(value);
}
inline void scene_ns2xs_ack_online_scenes::set_srv_types(int index, const char* value) {
  srv_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:scene_ns2xs_ack_online_scenes.srv_types)
}
inline void scene_ns2xs_ack_online_scenes::set_srv_types(int index, const char* value, size_t size) {
  srv_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:scene_ns2xs_ack_online_scenes.srv_types)
}
inline ::std::string* scene_ns2xs_ack_online_scenes::add_srv_types() {
  return srv_types_.Add();
}
inline void scene_ns2xs_ack_online_scenes::add_srv_types(const ::std::string& value) {
  srv_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:scene_ns2xs_ack_online_scenes.srv_types)
}
inline void scene_ns2xs_ack_online_scenes::add_srv_types(const char* value) {
  srv_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:scene_ns2xs_ack_online_scenes.srv_types)
}
inline void scene_ns2xs_ack_online_scenes::add_srv_types(const char* value, size_t size) {
  srv_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:scene_ns2xs_ack_online_scenes.srv_types)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
scene_ns2xs_ack_online_scenes::srv_types() const {
  // @@protoc_insertion_point(field_list:scene_ns2xs_ack_online_scenes.srv_types)
  return srv_types_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
scene_ns2xs_ack_online_scenes::mutable_srv_types() {
  // @@protoc_insertion_point(field_mutable_list:scene_ns2xs_ack_online_scenes.srv_types)
  return &srv_types_;
}

// repeated string srv_ids = 2;
inline int scene_ns2xs_ack_online_scenes::srv_ids_size() const {
  return srv_ids_.size();
}
inline void scene_ns2xs_ack_online_scenes::clear_srv_ids() {
  srv_ids_.Clear();
}
inline const ::std::string& scene_ns2xs_ack_online_scenes::srv_ids(int index) const {
  // @@protoc_insertion_point(field_get:scene_ns2xs_ack_online_scenes.srv_ids)
  return srv_ids_.Get(index);
}
inline ::std::string* scene_ns2xs_ack_online_scenes::mutable_srv_ids(int index) {
  // @@protoc_insertion_point(field_mutable:scene_ns2xs_ack_online_scenes.srv_ids)
  return srv_ids_.Mutable(index);
}
inline void scene_ns2xs_ack_online_scenes::set_srv_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:scene_ns2xs_ack_online_scenes.srv_ids)
  srv_ids_.Mutable(index)->assign(value);
}
inline void scene_ns2xs_ack_online_scenes::set_srv_ids(int index, const char* value) {
  srv_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:scene_ns2xs_ack_online_scenes.srv_ids)
}
inline void scene_ns2xs_ack_online_scenes::set_srv_ids(int index, const char* value, size_t size) {
  srv_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:scene_ns2xs_ack_online_scenes.srv_ids)
}
inline ::std::string* scene_ns2xs_ack_online_scenes::add_srv_ids() {
  return srv_ids_.Add();
}
inline void scene_ns2xs_ack_online_scenes::add_srv_ids(const ::std::string& value) {
  srv_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:scene_ns2xs_ack_online_scenes.srv_ids)
}
inline void scene_ns2xs_ack_online_scenes::add_srv_ids(const char* value) {
  srv_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:scene_ns2xs_ack_online_scenes.srv_ids)
}
inline void scene_ns2xs_ack_online_scenes::add_srv_ids(const char* value, size_t size) {
  srv_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:scene_ns2xs_ack_online_scenes.srv_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
scene_ns2xs_ack_online_scenes::srv_ids() const {
  // @@protoc_insertion_point(field_list:scene_ns2xs_ack_online_scenes.srv_ids)
  return srv_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
scene_ns2xs_ack_online_scenes::mutable_srv_ids() {
  // @@protoc_insertion_point(field_mutable_list:scene_ns2xs_ack_online_scenes.srv_ids)
  return &srv_ids_;
}

// repeated string srv_addrs = 3;
inline int scene_ns2xs_ack_online_scenes::srv_addrs_size() const {
  return srv_addrs_.size();
}
inline void scene_ns2xs_ack_online_scenes::clear_srv_addrs() {
  srv_addrs_.Clear();
}
inline const ::std::string& scene_ns2xs_ack_online_scenes::srv_addrs(int index) const {
  // @@protoc_insertion_point(field_get:scene_ns2xs_ack_online_scenes.srv_addrs)
  return srv_addrs_.Get(index);
}
inline ::std::string* scene_ns2xs_ack_online_scenes::mutable_srv_addrs(int index) {
  // @@protoc_insertion_point(field_mutable:scene_ns2xs_ack_online_scenes.srv_addrs)
  return srv_addrs_.Mutable(index);
}
inline void scene_ns2xs_ack_online_scenes::set_srv_addrs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:scene_ns2xs_ack_online_scenes.srv_addrs)
  srv_addrs_.Mutable(index)->assign(value);
}
inline void scene_ns2xs_ack_online_scenes::set_srv_addrs(int index, const char* value) {
  srv_addrs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:scene_ns2xs_ack_online_scenes.srv_addrs)
}
inline void scene_ns2xs_ack_online_scenes::set_srv_addrs(int index, const char* value, size_t size) {
  srv_addrs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:scene_ns2xs_ack_online_scenes.srv_addrs)
}
inline ::std::string* scene_ns2xs_ack_online_scenes::add_srv_addrs() {
  return srv_addrs_.Add();
}
inline void scene_ns2xs_ack_online_scenes::add_srv_addrs(const ::std::string& value) {
  srv_addrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:scene_ns2xs_ack_online_scenes.srv_addrs)
}
inline void scene_ns2xs_ack_online_scenes::add_srv_addrs(const char* value) {
  srv_addrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:scene_ns2xs_ack_online_scenes.srv_addrs)
}
inline void scene_ns2xs_ack_online_scenes::add_srv_addrs(const char* value, size_t size) {
  srv_addrs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:scene_ns2xs_ack_online_scenes.srv_addrs)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
scene_ns2xs_ack_online_scenes::srv_addrs() const {
  // @@protoc_insertion_point(field_list:scene_ns2xs_ack_online_scenes.srv_addrs)
  return srv_addrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
scene_ns2xs_ack_online_scenes::mutable_srv_addrs() {
  // @@protoc_insertion_point(field_mutable_list:scene_ns2xs_ack_online_scenes.srv_addrs)
  return &srv_addrs_;
}

// -------------------------------------------------------------------

// scene_ns2xs_ntf_new_scenes

// repeated string srv_types = 1;
inline int scene_ns2xs_ntf_new_scenes::srv_types_size() const {
  return srv_types_.size();
}
inline void scene_ns2xs_ntf_new_scenes::clear_srv_types() {
  srv_types_.Clear();
}
inline const ::std::string& scene_ns2xs_ntf_new_scenes::srv_types(int index) const {
  // @@protoc_insertion_point(field_get:scene_ns2xs_ntf_new_scenes.srv_types)
  return srv_types_.Get(index);
}
inline ::std::string* scene_ns2xs_ntf_new_scenes::mutable_srv_types(int index) {
  // @@protoc_insertion_point(field_mutable:scene_ns2xs_ntf_new_scenes.srv_types)
  return srv_types_.Mutable(index);
}
inline void scene_ns2xs_ntf_new_scenes::set_srv_types(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:scene_ns2xs_ntf_new_scenes.srv_types)
  srv_types_.Mutable(index)->assign(value);
}
inline void scene_ns2xs_ntf_new_scenes::set_srv_types(int index, const char* value) {
  srv_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:scene_ns2xs_ntf_new_scenes.srv_types)
}
inline void scene_ns2xs_ntf_new_scenes::set_srv_types(int index, const char* value, size_t size) {
  srv_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:scene_ns2xs_ntf_new_scenes.srv_types)
}
inline ::std::string* scene_ns2xs_ntf_new_scenes::add_srv_types() {
  return srv_types_.Add();
}
inline void scene_ns2xs_ntf_new_scenes::add_srv_types(const ::std::string& value) {
  srv_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:scene_ns2xs_ntf_new_scenes.srv_types)
}
inline void scene_ns2xs_ntf_new_scenes::add_srv_types(const char* value) {
  srv_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:scene_ns2xs_ntf_new_scenes.srv_types)
}
inline void scene_ns2xs_ntf_new_scenes::add_srv_types(const char* value, size_t size) {
  srv_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:scene_ns2xs_ntf_new_scenes.srv_types)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
scene_ns2xs_ntf_new_scenes::srv_types() const {
  // @@protoc_insertion_point(field_list:scene_ns2xs_ntf_new_scenes.srv_types)
  return srv_types_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
scene_ns2xs_ntf_new_scenes::mutable_srv_types() {
  // @@protoc_insertion_point(field_mutable_list:scene_ns2xs_ntf_new_scenes.srv_types)
  return &srv_types_;
}

// repeated string srv_ids = 2;
inline int scene_ns2xs_ntf_new_scenes::srv_ids_size() const {
  return srv_ids_.size();
}
inline void scene_ns2xs_ntf_new_scenes::clear_srv_ids() {
  srv_ids_.Clear();
}
inline const ::std::string& scene_ns2xs_ntf_new_scenes::srv_ids(int index) const {
  // @@protoc_insertion_point(field_get:scene_ns2xs_ntf_new_scenes.srv_ids)
  return srv_ids_.Get(index);
}
inline ::std::string* scene_ns2xs_ntf_new_scenes::mutable_srv_ids(int index) {
  // @@protoc_insertion_point(field_mutable:scene_ns2xs_ntf_new_scenes.srv_ids)
  return srv_ids_.Mutable(index);
}
inline void scene_ns2xs_ntf_new_scenes::set_srv_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:scene_ns2xs_ntf_new_scenes.srv_ids)
  srv_ids_.Mutable(index)->assign(value);
}
inline void scene_ns2xs_ntf_new_scenes::set_srv_ids(int index, const char* value) {
  srv_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:scene_ns2xs_ntf_new_scenes.srv_ids)
}
inline void scene_ns2xs_ntf_new_scenes::set_srv_ids(int index, const char* value, size_t size) {
  srv_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:scene_ns2xs_ntf_new_scenes.srv_ids)
}
inline ::std::string* scene_ns2xs_ntf_new_scenes::add_srv_ids() {
  return srv_ids_.Add();
}
inline void scene_ns2xs_ntf_new_scenes::add_srv_ids(const ::std::string& value) {
  srv_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:scene_ns2xs_ntf_new_scenes.srv_ids)
}
inline void scene_ns2xs_ntf_new_scenes::add_srv_ids(const char* value) {
  srv_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:scene_ns2xs_ntf_new_scenes.srv_ids)
}
inline void scene_ns2xs_ntf_new_scenes::add_srv_ids(const char* value, size_t size) {
  srv_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:scene_ns2xs_ntf_new_scenes.srv_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
scene_ns2xs_ntf_new_scenes::srv_ids() const {
  // @@protoc_insertion_point(field_list:scene_ns2xs_ntf_new_scenes.srv_ids)
  return srv_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
scene_ns2xs_ntf_new_scenes::mutable_srv_ids() {
  // @@protoc_insertion_point(field_mutable_list:scene_ns2xs_ntf_new_scenes.srv_ids)
  return &srv_ids_;
}

// repeated string srv_addrs = 3;
inline int scene_ns2xs_ntf_new_scenes::srv_addrs_size() const {
  return srv_addrs_.size();
}
inline void scene_ns2xs_ntf_new_scenes::clear_srv_addrs() {
  srv_addrs_.Clear();
}
inline const ::std::string& scene_ns2xs_ntf_new_scenes::srv_addrs(int index) const {
  // @@protoc_insertion_point(field_get:scene_ns2xs_ntf_new_scenes.srv_addrs)
  return srv_addrs_.Get(index);
}
inline ::std::string* scene_ns2xs_ntf_new_scenes::mutable_srv_addrs(int index) {
  // @@protoc_insertion_point(field_mutable:scene_ns2xs_ntf_new_scenes.srv_addrs)
  return srv_addrs_.Mutable(index);
}
inline void scene_ns2xs_ntf_new_scenes::set_srv_addrs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:scene_ns2xs_ntf_new_scenes.srv_addrs)
  srv_addrs_.Mutable(index)->assign(value);
}
inline void scene_ns2xs_ntf_new_scenes::set_srv_addrs(int index, const char* value) {
  srv_addrs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:scene_ns2xs_ntf_new_scenes.srv_addrs)
}
inline void scene_ns2xs_ntf_new_scenes::set_srv_addrs(int index, const char* value, size_t size) {
  srv_addrs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:scene_ns2xs_ntf_new_scenes.srv_addrs)
}
inline ::std::string* scene_ns2xs_ntf_new_scenes::add_srv_addrs() {
  return srv_addrs_.Add();
}
inline void scene_ns2xs_ntf_new_scenes::add_srv_addrs(const ::std::string& value) {
  srv_addrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:scene_ns2xs_ntf_new_scenes.srv_addrs)
}
inline void scene_ns2xs_ntf_new_scenes::add_srv_addrs(const char* value) {
  srv_addrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:scene_ns2xs_ntf_new_scenes.srv_addrs)
}
inline void scene_ns2xs_ntf_new_scenes::add_srv_addrs(const char* value, size_t size) {
  srv_addrs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:scene_ns2xs_ntf_new_scenes.srv_addrs)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
scene_ns2xs_ntf_new_scenes::srv_addrs() const {
  // @@protoc_insertion_point(field_list:scene_ns2xs_ntf_new_scenes.srv_addrs)
  return srv_addrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
scene_ns2xs_ntf_new_scenes::mutable_srv_addrs() {
  // @@protoc_insertion_point(field_mutable_list:scene_ns2xs_ntf_new_scenes.srv_addrs)
  return &srv_addrs_;
}

// -------------------------------------------------------------------

// scene_xs2xs_req_connection

// optional string srv_type = 1;
inline bool scene_xs2xs_req_connection::has_srv_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void scene_xs2xs_req_connection::set_has_srv_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void scene_xs2xs_req_connection::clear_has_srv_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void scene_xs2xs_req_connection::clear_srv_type() {
  if (srv_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_type_->clear();
  }
  clear_has_srv_type();
}
inline const ::std::string& scene_xs2xs_req_connection::srv_type() const {
  // @@protoc_insertion_point(field_get:scene_xs2xs_req_connection.srv_type)
  return *srv_type_;
}
inline void scene_xs2xs_req_connection::set_srv_type(const ::std::string& value) {
  set_has_srv_type();
  if (srv_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_type_ = new ::std::string;
  }
  srv_type_->assign(value);
  // @@protoc_insertion_point(field_set:scene_xs2xs_req_connection.srv_type)
}
inline void scene_xs2xs_req_connection::set_srv_type(const char* value) {
  set_has_srv_type();
  if (srv_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_type_ = new ::std::string;
  }
  srv_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:scene_xs2xs_req_connection.srv_type)
}
inline void scene_xs2xs_req_connection::set_srv_type(const char* value, size_t size) {
  set_has_srv_type();
  if (srv_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_type_ = new ::std::string;
  }
  srv_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:scene_xs2xs_req_connection.srv_type)
}
inline ::std::string* scene_xs2xs_req_connection::mutable_srv_type() {
  set_has_srv_type();
  if (srv_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:scene_xs2xs_req_connection.srv_type)
  return srv_type_;
}
inline ::std::string* scene_xs2xs_req_connection::release_srv_type() {
  clear_has_srv_type();
  if (srv_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = srv_type_;
    srv_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void scene_xs2xs_req_connection::set_allocated_srv_type(::std::string* srv_type) {
  if (srv_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete srv_type_;
  }
  if (srv_type) {
    set_has_srv_type();
    srv_type_ = srv_type;
  } else {
    clear_has_srv_type();
    srv_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:scene_xs2xs_req_connection.srv_type)
}

// optional string srv_id = 2;
inline bool scene_xs2xs_req_connection::has_srv_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void scene_xs2xs_req_connection::set_has_srv_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void scene_xs2xs_req_connection::clear_has_srv_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void scene_xs2xs_req_connection::clear_srv_id() {
  if (srv_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_id_->clear();
  }
  clear_has_srv_id();
}
inline const ::std::string& scene_xs2xs_req_connection::srv_id() const {
  // @@protoc_insertion_point(field_get:scene_xs2xs_req_connection.srv_id)
  return *srv_id_;
}
inline void scene_xs2xs_req_connection::set_srv_id(const ::std::string& value) {
  set_has_srv_id();
  if (srv_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_id_ = new ::std::string;
  }
  srv_id_->assign(value);
  // @@protoc_insertion_point(field_set:scene_xs2xs_req_connection.srv_id)
}
inline void scene_xs2xs_req_connection::set_srv_id(const char* value) {
  set_has_srv_id();
  if (srv_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_id_ = new ::std::string;
  }
  srv_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:scene_xs2xs_req_connection.srv_id)
}
inline void scene_xs2xs_req_connection::set_srv_id(const char* value, size_t size) {
  set_has_srv_id();
  if (srv_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_id_ = new ::std::string;
  }
  srv_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:scene_xs2xs_req_connection.srv_id)
}
inline ::std::string* scene_xs2xs_req_connection::mutable_srv_id() {
  set_has_srv_id();
  if (srv_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:scene_xs2xs_req_connection.srv_id)
  return srv_id_;
}
inline ::std::string* scene_xs2xs_req_connection::release_srv_id() {
  clear_has_srv_id();
  if (srv_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = srv_id_;
    srv_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void scene_xs2xs_req_connection::set_allocated_srv_id(::std::string* srv_id) {
  if (srv_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete srv_id_;
  }
  if (srv_id) {
    set_has_srv_id();
    srv_id_ = srv_id;
  } else {
    clear_has_srv_id();
    srv_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:scene_xs2xs_req_connection.srv_id)
}

// optional string srv_addr = 3;
inline bool scene_xs2xs_req_connection::has_srv_addr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void scene_xs2xs_req_connection::set_has_srv_addr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void scene_xs2xs_req_connection::clear_has_srv_addr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void scene_xs2xs_req_connection::clear_srv_addr() {
  if (srv_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_addr_->clear();
  }
  clear_has_srv_addr();
}
inline const ::std::string& scene_xs2xs_req_connection::srv_addr() const {
  // @@protoc_insertion_point(field_get:scene_xs2xs_req_connection.srv_addr)
  return *srv_addr_;
}
inline void scene_xs2xs_req_connection::set_srv_addr(const ::std::string& value) {
  set_has_srv_addr();
  if (srv_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_addr_ = new ::std::string;
  }
  srv_addr_->assign(value);
  // @@protoc_insertion_point(field_set:scene_xs2xs_req_connection.srv_addr)
}
inline void scene_xs2xs_req_connection::set_srv_addr(const char* value) {
  set_has_srv_addr();
  if (srv_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_addr_ = new ::std::string;
  }
  srv_addr_->assign(value);
  // @@protoc_insertion_point(field_set_char:scene_xs2xs_req_connection.srv_addr)
}
inline void scene_xs2xs_req_connection::set_srv_addr(const char* value, size_t size) {
  set_has_srv_addr();
  if (srv_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_addr_ = new ::std::string;
  }
  srv_addr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:scene_xs2xs_req_connection.srv_addr)
}
inline ::std::string* scene_xs2xs_req_connection::mutable_srv_addr() {
  set_has_srv_addr();
  if (srv_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_addr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:scene_xs2xs_req_connection.srv_addr)
  return srv_addr_;
}
inline ::std::string* scene_xs2xs_req_connection::release_srv_addr() {
  clear_has_srv_addr();
  if (srv_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = srv_addr_;
    srv_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void scene_xs2xs_req_connection::set_allocated_srv_addr(::std::string* srv_addr) {
  if (srv_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete srv_addr_;
  }
  if (srv_addr) {
    set_has_srv_addr();
    srv_addr_ = srv_addr;
  } else {
    clear_has_srv_addr();
    srv_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:scene_xs2xs_req_connection.srv_addr)
}

// -------------------------------------------------------------------

// scene_xs2xs_ack_connection

// optional string srv_type = 1;
inline bool scene_xs2xs_ack_connection::has_srv_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void scene_xs2xs_ack_connection::set_has_srv_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void scene_xs2xs_ack_connection::clear_has_srv_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void scene_xs2xs_ack_connection::clear_srv_type() {
  if (srv_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_type_->clear();
  }
  clear_has_srv_type();
}
inline const ::std::string& scene_xs2xs_ack_connection::srv_type() const {
  // @@protoc_insertion_point(field_get:scene_xs2xs_ack_connection.srv_type)
  return *srv_type_;
}
inline void scene_xs2xs_ack_connection::set_srv_type(const ::std::string& value) {
  set_has_srv_type();
  if (srv_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_type_ = new ::std::string;
  }
  srv_type_->assign(value);
  // @@protoc_insertion_point(field_set:scene_xs2xs_ack_connection.srv_type)
}
inline void scene_xs2xs_ack_connection::set_srv_type(const char* value) {
  set_has_srv_type();
  if (srv_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_type_ = new ::std::string;
  }
  srv_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:scene_xs2xs_ack_connection.srv_type)
}
inline void scene_xs2xs_ack_connection::set_srv_type(const char* value, size_t size) {
  set_has_srv_type();
  if (srv_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_type_ = new ::std::string;
  }
  srv_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:scene_xs2xs_ack_connection.srv_type)
}
inline ::std::string* scene_xs2xs_ack_connection::mutable_srv_type() {
  set_has_srv_type();
  if (srv_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:scene_xs2xs_ack_connection.srv_type)
  return srv_type_;
}
inline ::std::string* scene_xs2xs_ack_connection::release_srv_type() {
  clear_has_srv_type();
  if (srv_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = srv_type_;
    srv_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void scene_xs2xs_ack_connection::set_allocated_srv_type(::std::string* srv_type) {
  if (srv_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete srv_type_;
  }
  if (srv_type) {
    set_has_srv_type();
    srv_type_ = srv_type;
  } else {
    clear_has_srv_type();
    srv_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:scene_xs2xs_ack_connection.srv_type)
}

// optional string srv_id = 2;
inline bool scene_xs2xs_ack_connection::has_srv_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void scene_xs2xs_ack_connection::set_has_srv_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void scene_xs2xs_ack_connection::clear_has_srv_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void scene_xs2xs_ack_connection::clear_srv_id() {
  if (srv_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_id_->clear();
  }
  clear_has_srv_id();
}
inline const ::std::string& scene_xs2xs_ack_connection::srv_id() const {
  // @@protoc_insertion_point(field_get:scene_xs2xs_ack_connection.srv_id)
  return *srv_id_;
}
inline void scene_xs2xs_ack_connection::set_srv_id(const ::std::string& value) {
  set_has_srv_id();
  if (srv_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_id_ = new ::std::string;
  }
  srv_id_->assign(value);
  // @@protoc_insertion_point(field_set:scene_xs2xs_ack_connection.srv_id)
}
inline void scene_xs2xs_ack_connection::set_srv_id(const char* value) {
  set_has_srv_id();
  if (srv_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_id_ = new ::std::string;
  }
  srv_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:scene_xs2xs_ack_connection.srv_id)
}
inline void scene_xs2xs_ack_connection::set_srv_id(const char* value, size_t size) {
  set_has_srv_id();
  if (srv_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_id_ = new ::std::string;
  }
  srv_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:scene_xs2xs_ack_connection.srv_id)
}
inline ::std::string* scene_xs2xs_ack_connection::mutable_srv_id() {
  set_has_srv_id();
  if (srv_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:scene_xs2xs_ack_connection.srv_id)
  return srv_id_;
}
inline ::std::string* scene_xs2xs_ack_connection::release_srv_id() {
  clear_has_srv_id();
  if (srv_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = srv_id_;
    srv_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void scene_xs2xs_ack_connection::set_allocated_srv_id(::std::string* srv_id) {
  if (srv_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete srv_id_;
  }
  if (srv_id) {
    set_has_srv_id();
    srv_id_ = srv_id;
  } else {
    clear_has_srv_id();
    srv_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:scene_xs2xs_ack_connection.srv_id)
}

// optional string srv_addr = 3;
inline bool scene_xs2xs_ack_connection::has_srv_addr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void scene_xs2xs_ack_connection::set_has_srv_addr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void scene_xs2xs_ack_connection::clear_has_srv_addr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void scene_xs2xs_ack_connection::clear_srv_addr() {
  if (srv_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_addr_->clear();
  }
  clear_has_srv_addr();
}
inline const ::std::string& scene_xs2xs_ack_connection::srv_addr() const {
  // @@protoc_insertion_point(field_get:scene_xs2xs_ack_connection.srv_addr)
  return *srv_addr_;
}
inline void scene_xs2xs_ack_connection::set_srv_addr(const ::std::string& value) {
  set_has_srv_addr();
  if (srv_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_addr_ = new ::std::string;
  }
  srv_addr_->assign(value);
  // @@protoc_insertion_point(field_set:scene_xs2xs_ack_connection.srv_addr)
}
inline void scene_xs2xs_ack_connection::set_srv_addr(const char* value) {
  set_has_srv_addr();
  if (srv_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_addr_ = new ::std::string;
  }
  srv_addr_->assign(value);
  // @@protoc_insertion_point(field_set_char:scene_xs2xs_ack_connection.srv_addr)
}
inline void scene_xs2xs_ack_connection::set_srv_addr(const char* value, size_t size) {
  set_has_srv_addr();
  if (srv_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_addr_ = new ::std::string;
  }
  srv_addr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:scene_xs2xs_ack_connection.srv_addr)
}
inline ::std::string* scene_xs2xs_ack_connection::mutable_srv_addr() {
  set_has_srv_addr();
  if (srv_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srv_addr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:scene_xs2xs_ack_connection.srv_addr)
  return srv_addr_;
}
inline ::std::string* scene_xs2xs_ack_connection::release_srv_addr() {
  clear_has_srv_addr();
  if (srv_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = srv_addr_;
    srv_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void scene_xs2xs_ack_connection::set_allocated_srv_addr(::std::string* srv_addr) {
  if (srv_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete srv_addr_;
  }
  if (srv_addr) {
    set_has_srv_addr();
    srv_addr_ = srv_addr;
  } else {
    clear_has_srv_addr();
    srv_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:scene_xs2xs_ack_connection.srv_addr)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protocol_2fmsg_5fscene_2eproto__INCLUDED
