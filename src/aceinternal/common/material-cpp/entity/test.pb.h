// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: entity/test.proto

#ifndef PROTOBUF_entity_2ftest_2eproto__INCLUDED
#define PROTOBUF_entity_2ftest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_entity_2ftest_2eproto();
void protobuf_AssignDesc_entity_2ftest_2eproto();
void protobuf_ShutdownFile_entity_2ftest_2eproto();

class nestTest;
class Test;

// ===================================================================

class nestTest : public ::google::protobuf::Message {
 public:
  nestTest();
  virtual ~nestTest();

  nestTest(const nestTest& from);

  inline nestTest& operator=(const nestTest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const nestTest& default_instance();

  void Swap(nestTest* other);

  // implements Message ----------------------------------------------

  nestTest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const nestTest& from);
  void MergeFrom(const nestTest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:nestTest)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 guid_;
  friend void  protobuf_AddDesc_entity_2ftest_2eproto();
  friend void protobuf_AssignDesc_entity_2ftest_2eproto();
  friend void protobuf_ShutdownFile_entity_2ftest_2eproto();

  void InitAsDefaultInstance();
  static nestTest* default_instance_;
};
// -------------------------------------------------------------------

class Test : public ::google::protobuf::Message {
 public:
  Test();
  virtual ~Test();

  Test(const Test& from);

  inline Test& operator=(const Test& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Test& default_instance();

  void Swap(Test* other);

  // implements Message ----------------------------------------------

  Test* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Test& from);
  void MergeFrom(const Test& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 t_uint64 = 1;
  inline bool has_t_uint64() const;
  inline void clear_t_uint64();
  static const int kTUint64FieldNumber = 1;
  inline ::google::protobuf::uint64 t_uint64() const;
  inline void set_t_uint64(::google::protobuf::uint64 value);

  // optional int64 t_int64 = 2;
  inline bool has_t_int64() const;
  inline void clear_t_int64();
  static const int kTInt64FieldNumber = 2;
  inline ::google::protobuf::int64 t_int64() const;
  inline void set_t_int64(::google::protobuf::int64 value);

  // optional int32 t_int32 = 3;
  inline bool has_t_int32() const;
  inline void clear_t_int32();
  static const int kTInt32FieldNumber = 3;
  inline ::google::protobuf::int32 t_int32() const;
  inline void set_t_int32(::google::protobuf::int32 value);

  // optional uint32 t_uint32 = 4;
  inline bool has_t_uint32() const;
  inline void clear_t_uint32();
  static const int kTUint32FieldNumber = 4;
  inline ::google::protobuf::uint32 t_uint32() const;
  inline void set_t_uint32(::google::protobuf::uint32 value);

  // optional float t_float = 5;
  inline bool has_t_float() const;
  inline void clear_t_float();
  static const int kTFloatFieldNumber = 5;
  inline float t_float() const;
  inline void set_t_float(float value);

  // optional double t_double = 6;
  inline bool has_t_double() const;
  inline void clear_t_double();
  static const int kTDoubleFieldNumber = 6;
  inline double t_double() const;
  inline void set_t_double(double value);

  // optional string t_string = 7;
  inline bool has_t_string() const;
  inline void clear_t_string();
  static const int kTStringFieldNumber = 7;
  inline const ::std::string& t_string() const;
  inline void set_t_string(const ::std::string& value);
  inline void set_t_string(const char* value);
  inline void set_t_string(const char* value, size_t size);
  inline ::std::string* mutable_t_string();
  inline ::std::string* release_t_string();
  inline void set_allocated_t_string(::std::string* t_string);

  // repeated uint32 t_uint32_rep = 8;
  inline int t_uint32_rep_size() const;
  inline void clear_t_uint32_rep();
  static const int kTUint32RepFieldNumber = 8;
  inline ::google::protobuf::uint32 t_uint32_rep(int index) const;
  inline void set_t_uint32_rep(int index, ::google::protobuf::uint32 value);
  inline void add_t_uint32_rep(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      t_uint32_rep() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_t_uint32_rep();

  // optional .nestTest test1 = 9;
  inline bool has_test1() const;
  inline void clear_test1();
  static const int kTest1FieldNumber = 9;
  inline const ::nestTest& test1() const;
  inline ::nestTest* mutable_test1();
  inline ::nestTest* release_test1();
  inline void set_allocated_test1(::nestTest* test1);

  // repeated .nestTest test2 = 10;
  inline int test2_size() const;
  inline void clear_test2();
  static const int kTest2FieldNumber = 10;
  inline const ::nestTest& test2(int index) const;
  inline ::nestTest* mutable_test2(int index);
  inline ::nestTest* add_test2();
  inline const ::google::protobuf::RepeatedPtrField< ::nestTest >&
      test2() const;
  inline ::google::protobuf::RepeatedPtrField< ::nestTest >*
      mutable_test2();

  // @@protoc_insertion_point(class_scope:Test)
 private:
  inline void set_has_t_uint64();
  inline void clear_has_t_uint64();
  inline void set_has_t_int64();
  inline void clear_has_t_int64();
  inline void set_has_t_int32();
  inline void clear_has_t_int32();
  inline void set_has_t_uint32();
  inline void clear_has_t_uint32();
  inline void set_has_t_float();
  inline void clear_has_t_float();
  inline void set_has_t_double();
  inline void clear_has_t_double();
  inline void set_has_t_string();
  inline void clear_has_t_string();
  inline void set_has_test1();
  inline void clear_has_test1();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 t_uint64_;
  ::google::protobuf::int64 t_int64_;
  ::google::protobuf::int32 t_int32_;
  ::google::protobuf::uint32 t_uint32_;
  double t_double_;
  ::std::string* t_string_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > t_uint32_rep_;
  ::nestTest* test1_;
  ::google::protobuf::RepeatedPtrField< ::nestTest > test2_;
  float t_float_;
  friend void  protobuf_AddDesc_entity_2ftest_2eproto();
  friend void protobuf_AssignDesc_entity_2ftest_2eproto();
  friend void protobuf_ShutdownFile_entity_2ftest_2eproto();

  void InitAsDefaultInstance();
  static Test* default_instance_;
};
// ===================================================================


// ===================================================================

// nestTest

// required uint64 guid = 1;
inline bool nestTest::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nestTest::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void nestTest::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void nestTest::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::uint64 nestTest::guid() const {
  // @@protoc_insertion_point(field_get:nestTest.guid)
  return guid_;
}
inline void nestTest::set_guid(::google::protobuf::uint64 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:nestTest.guid)
}

// -------------------------------------------------------------------

// Test

// required uint64 t_uint64 = 1;
inline bool Test::has_t_uint64() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Test::set_has_t_uint64() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Test::clear_has_t_uint64() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Test::clear_t_uint64() {
  t_uint64_ = GOOGLE_ULONGLONG(0);
  clear_has_t_uint64();
}
inline ::google::protobuf::uint64 Test::t_uint64() const {
  // @@protoc_insertion_point(field_get:Test.t_uint64)
  return t_uint64_;
}
inline void Test::set_t_uint64(::google::protobuf::uint64 value) {
  set_has_t_uint64();
  t_uint64_ = value;
  // @@protoc_insertion_point(field_set:Test.t_uint64)
}

// optional int64 t_int64 = 2;
inline bool Test::has_t_int64() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Test::set_has_t_int64() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Test::clear_has_t_int64() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Test::clear_t_int64() {
  t_int64_ = GOOGLE_LONGLONG(0);
  clear_has_t_int64();
}
inline ::google::protobuf::int64 Test::t_int64() const {
  // @@protoc_insertion_point(field_get:Test.t_int64)
  return t_int64_;
}
inline void Test::set_t_int64(::google::protobuf::int64 value) {
  set_has_t_int64();
  t_int64_ = value;
  // @@protoc_insertion_point(field_set:Test.t_int64)
}

// optional int32 t_int32 = 3;
inline bool Test::has_t_int32() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Test::set_has_t_int32() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Test::clear_has_t_int32() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Test::clear_t_int32() {
  t_int32_ = 0;
  clear_has_t_int32();
}
inline ::google::protobuf::int32 Test::t_int32() const {
  // @@protoc_insertion_point(field_get:Test.t_int32)
  return t_int32_;
}
inline void Test::set_t_int32(::google::protobuf::int32 value) {
  set_has_t_int32();
  t_int32_ = value;
  // @@protoc_insertion_point(field_set:Test.t_int32)
}

// optional uint32 t_uint32 = 4;
inline bool Test::has_t_uint32() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Test::set_has_t_uint32() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Test::clear_has_t_uint32() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Test::clear_t_uint32() {
  t_uint32_ = 0u;
  clear_has_t_uint32();
}
inline ::google::protobuf::uint32 Test::t_uint32() const {
  // @@protoc_insertion_point(field_get:Test.t_uint32)
  return t_uint32_;
}
inline void Test::set_t_uint32(::google::protobuf::uint32 value) {
  set_has_t_uint32();
  t_uint32_ = value;
  // @@protoc_insertion_point(field_set:Test.t_uint32)
}

// optional float t_float = 5;
inline bool Test::has_t_float() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Test::set_has_t_float() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Test::clear_has_t_float() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Test::clear_t_float() {
  t_float_ = 0;
  clear_has_t_float();
}
inline float Test::t_float() const {
  // @@protoc_insertion_point(field_get:Test.t_float)
  return t_float_;
}
inline void Test::set_t_float(float value) {
  set_has_t_float();
  t_float_ = value;
  // @@protoc_insertion_point(field_set:Test.t_float)
}

// optional double t_double = 6;
inline bool Test::has_t_double() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Test::set_has_t_double() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Test::clear_has_t_double() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Test::clear_t_double() {
  t_double_ = 0;
  clear_has_t_double();
}
inline double Test::t_double() const {
  // @@protoc_insertion_point(field_get:Test.t_double)
  return t_double_;
}
inline void Test::set_t_double(double value) {
  set_has_t_double();
  t_double_ = value;
  // @@protoc_insertion_point(field_set:Test.t_double)
}

// optional string t_string = 7;
inline bool Test::has_t_string() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Test::set_has_t_string() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Test::clear_has_t_string() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Test::clear_t_string() {
  if (t_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    t_string_->clear();
  }
  clear_has_t_string();
}
inline const ::std::string& Test::t_string() const {
  // @@protoc_insertion_point(field_get:Test.t_string)
  return *t_string_;
}
inline void Test::set_t_string(const ::std::string& value) {
  set_has_t_string();
  if (t_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    t_string_ = new ::std::string;
  }
  t_string_->assign(value);
  // @@protoc_insertion_point(field_set:Test.t_string)
}
inline void Test::set_t_string(const char* value) {
  set_has_t_string();
  if (t_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    t_string_ = new ::std::string;
  }
  t_string_->assign(value);
  // @@protoc_insertion_point(field_set_char:Test.t_string)
}
inline void Test::set_t_string(const char* value, size_t size) {
  set_has_t_string();
  if (t_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    t_string_ = new ::std::string;
  }
  t_string_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Test.t_string)
}
inline ::std::string* Test::mutable_t_string() {
  set_has_t_string();
  if (t_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    t_string_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Test.t_string)
  return t_string_;
}
inline ::std::string* Test::release_t_string() {
  clear_has_t_string();
  if (t_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = t_string_;
    t_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Test::set_allocated_t_string(::std::string* t_string) {
  if (t_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete t_string_;
  }
  if (t_string) {
    set_has_t_string();
    t_string_ = t_string;
  } else {
    clear_has_t_string();
    t_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Test.t_string)
}

// repeated uint32 t_uint32_rep = 8;
inline int Test::t_uint32_rep_size() const {
  return t_uint32_rep_.size();
}
inline void Test::clear_t_uint32_rep() {
  t_uint32_rep_.Clear();
}
inline ::google::protobuf::uint32 Test::t_uint32_rep(int index) const {
  // @@protoc_insertion_point(field_get:Test.t_uint32_rep)
  return t_uint32_rep_.Get(index);
}
inline void Test::set_t_uint32_rep(int index, ::google::protobuf::uint32 value) {
  t_uint32_rep_.Set(index, value);
  // @@protoc_insertion_point(field_set:Test.t_uint32_rep)
}
inline void Test::add_t_uint32_rep(::google::protobuf::uint32 value) {
  t_uint32_rep_.Add(value);
  // @@protoc_insertion_point(field_add:Test.t_uint32_rep)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Test::t_uint32_rep() const {
  // @@protoc_insertion_point(field_list:Test.t_uint32_rep)
  return t_uint32_rep_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Test::mutable_t_uint32_rep() {
  // @@protoc_insertion_point(field_mutable_list:Test.t_uint32_rep)
  return &t_uint32_rep_;
}

// optional .nestTest test1 = 9;
inline bool Test::has_test1() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Test::set_has_test1() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Test::clear_has_test1() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Test::clear_test1() {
  if (test1_ != NULL) test1_->::nestTest::Clear();
  clear_has_test1();
}
inline const ::nestTest& Test::test1() const {
  // @@protoc_insertion_point(field_get:Test.test1)
  return test1_ != NULL ? *test1_ : *default_instance_->test1_;
}
inline ::nestTest* Test::mutable_test1() {
  set_has_test1();
  if (test1_ == NULL) test1_ = new ::nestTest;
  // @@protoc_insertion_point(field_mutable:Test.test1)
  return test1_;
}
inline ::nestTest* Test::release_test1() {
  clear_has_test1();
  ::nestTest* temp = test1_;
  test1_ = NULL;
  return temp;
}
inline void Test::set_allocated_test1(::nestTest* test1) {
  delete test1_;
  test1_ = test1;
  if (test1) {
    set_has_test1();
  } else {
    clear_has_test1();
  }
  // @@protoc_insertion_point(field_set_allocated:Test.test1)
}

// repeated .nestTest test2 = 10;
inline int Test::test2_size() const {
  return test2_.size();
}
inline void Test::clear_test2() {
  test2_.Clear();
}
inline const ::nestTest& Test::test2(int index) const {
  // @@protoc_insertion_point(field_get:Test.test2)
  return test2_.Get(index);
}
inline ::nestTest* Test::mutable_test2(int index) {
  // @@protoc_insertion_point(field_mutable:Test.test2)
  return test2_.Mutable(index);
}
inline ::nestTest* Test::add_test2() {
  // @@protoc_insertion_point(field_add:Test.test2)
  return test2_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::nestTest >&
Test::test2() const {
  // @@protoc_insertion_point(field_list:Test.test2)
  return test2_;
}
inline ::google::protobuf::RepeatedPtrField< ::nestTest >*
Test::mutable_test2() {
  // @@protoc_insertion_point(field_mutable_list:Test.test2)
  return &test2_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_entity_2ftest_2eproto__INCLUDED
