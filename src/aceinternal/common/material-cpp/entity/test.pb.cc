// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: entity/test.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "entity/test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* nestTest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  nestTest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Test_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Test_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_entity_2ftest_2eproto() {
  protobuf_AddDesc_entity_2ftest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "entity/test.proto");
  GOOGLE_CHECK(file != NULL);
  nestTest_descriptor_ = file->message_type(0);
  static const int nestTest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nestTest, guid_),
  };
  nestTest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      nestTest_descriptor_,
      nestTest::default_instance_,
      nestTest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nestTest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nestTest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(nestTest));
  Test_descriptor_ = file->message_type(1);
  static const int Test_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, t_uint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, t_int64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, t_int32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, t_uint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, t_float_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, t_double_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, t_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, t_uint32_rep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, test1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, test2_),
  };
  Test_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Test_descriptor_,
      Test::default_instance_,
      Test_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Test));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_entity_2ftest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    nestTest_descriptor_, &nestTest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Test_descriptor_, &Test::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_entity_2ftest_2eproto() {
  delete nestTest::default_instance_;
  delete nestTest_reflection_;
  delete Test::default_instance_;
  delete Test_reflection_;
}

void protobuf_AddDesc_entity_2ftest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021entity/test.proto\"\030\n\010nestTest\022\014\n\004guid\030"
    "\001 \002(\004\"\313\001\n\004Test\022\020\n\010t_uint64\030\001 \002(\004\022\017\n\007t_in"
    "t64\030\002 \001(\003\022\017\n\007t_int32\030\003 \001(\005\022\020\n\010t_uint32\030\004"
    " \001(\r\022\017\n\007t_float\030\005 \001(\002\022\020\n\010t_double\030\006 \001(\001\022"
    "\020\n\010t_string\030\007 \001(\t\022\024\n\014t_uint32_rep\030\010 \003(\r\022"
    "\030\n\005test1\030\t \001(\0132\t.nestTest\022\030\n\005test2\030\n \003(\013"
    "2\t.nestTest", 251);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "entity/test.proto", &protobuf_RegisterTypes);
  nestTest::default_instance_ = new nestTest();
  Test::default_instance_ = new Test();
  nestTest::default_instance_->InitAsDefaultInstance();
  Test::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_entity_2ftest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_entity_2ftest_2eproto {
  StaticDescriptorInitializer_entity_2ftest_2eproto() {
    protobuf_AddDesc_entity_2ftest_2eproto();
  }
} static_descriptor_initializer_entity_2ftest_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int nestTest::kGuidFieldNumber;
#endif  // !_MSC_VER

nestTest::nestTest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nestTest)
}

void nestTest::InitAsDefaultInstance() {
}

nestTest::nestTest(const nestTest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nestTest)
}

void nestTest::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

nestTest::~nestTest() {
  // @@protoc_insertion_point(destructor:nestTest)
  SharedDtor();
}

void nestTest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void nestTest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* nestTest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nestTest_descriptor_;
}

const nestTest& nestTest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_entity_2ftest_2eproto();
  return *default_instance_;
}

nestTest* nestTest::default_instance_ = NULL;

nestTest* nestTest::New() const {
  return new nestTest;
}

void nestTest::Clear() {
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool nestTest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nestTest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nestTest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nestTest)
  return false;
#undef DO_
}

void nestTest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nestTest)
  // required uint64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nestTest)
}

::google::protobuf::uint8* nestTest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nestTest)
  // required uint64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nestTest)
  return target;
}

int nestTest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nestTest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const nestTest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const nestTest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nestTest::MergeFrom(const nestTest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void nestTest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nestTest::CopyFrom(const nestTest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nestTest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void nestTest::Swap(nestTest* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata nestTest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = nestTest_descriptor_;
  metadata.reflection = nestTest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Test::kTUint64FieldNumber;
const int Test::kTInt64FieldNumber;
const int Test::kTInt32FieldNumber;
const int Test::kTUint32FieldNumber;
const int Test::kTFloatFieldNumber;
const int Test::kTDoubleFieldNumber;
const int Test::kTStringFieldNumber;
const int Test::kTUint32RepFieldNumber;
const int Test::kTest1FieldNumber;
const int Test::kTest2FieldNumber;
#endif  // !_MSC_VER

Test::Test()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Test)
}

void Test::InitAsDefaultInstance() {
  test1_ = const_cast< ::nestTest*>(&::nestTest::default_instance());
}

Test::Test(const Test& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Test)
}

void Test::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  t_uint64_ = GOOGLE_ULONGLONG(0);
  t_int64_ = GOOGLE_LONGLONG(0);
  t_int32_ = 0;
  t_uint32_ = 0u;
  t_float_ = 0;
  t_double_ = 0;
  t_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  test1_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Test::~Test() {
  // @@protoc_insertion_point(destructor:Test)
  SharedDtor();
}

void Test::SharedDtor() {
  if (t_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete t_string_;
  }
  if (this != default_instance_) {
    delete test1_;
  }
}

void Test::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Test::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Test_descriptor_;
}

const Test& Test::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_entity_2ftest_2eproto();
  return *default_instance_;
}

Test* Test::default_instance_ = NULL;

Test* Test::New() const {
  return new Test;
}

void Test::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Test*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(t_uint64_, t_double_);
    t_float_ = 0;
    if (has_t_string()) {
      if (t_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        t_string_->clear();
      }
    }
  }
  if (has_test1()) {
    if (test1_ != NULL) test1_->::nestTest::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  t_uint32_rep_.Clear();
  test2_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Test::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Test)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 t_uint64 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &t_uint64_)));
          set_has_t_uint64();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_t_int64;
        break;
      }

      // optional int64 t_int64 = 2;
      case 2: {
        if (tag == 16) {
         parse_t_int64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &t_int64_)));
          set_has_t_int64();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_t_int32;
        break;
      }

      // optional int32 t_int32 = 3;
      case 3: {
        if (tag == 24) {
         parse_t_int32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &t_int32_)));
          set_has_t_int32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_t_uint32;
        break;
      }

      // optional uint32 t_uint32 = 4;
      case 4: {
        if (tag == 32) {
         parse_t_uint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &t_uint32_)));
          set_has_t_uint32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_t_float;
        break;
      }

      // optional float t_float = 5;
      case 5: {
        if (tag == 45) {
         parse_t_float:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &t_float_)));
          set_has_t_float();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_t_double;
        break;
      }

      // optional double t_double = 6;
      case 6: {
        if (tag == 49) {
         parse_t_double:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_double_)));
          set_has_t_double();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_t_string;
        break;
      }

      // optional string t_string = 7;
      case 7: {
        if (tag == 58) {
         parse_t_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_t_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->t_string().data(), this->t_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "t_string");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_t_uint32_rep;
        break;
      }

      // repeated uint32 t_uint32_rep = 8;
      case 8: {
        if (tag == 64) {
         parse_t_uint32_rep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_t_uint32_rep())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_t_uint32_rep())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_t_uint32_rep;
        if (input->ExpectTag(74)) goto parse_test1;
        break;
      }

      // optional .nestTest test1 = 9;
      case 9: {
        if (tag == 74) {
         parse_test1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_test1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_test2;
        break;
      }

      // repeated .nestTest test2 = 10;
      case 10: {
        if (tag == 82) {
         parse_test2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_test2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_test2;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Test)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Test)
  return false;
#undef DO_
}

void Test::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Test)
  // required uint64 t_uint64 = 1;
  if (has_t_uint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->t_uint64(), output);
  }

  // optional int64 t_int64 = 2;
  if (has_t_int64()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->t_int64(), output);
  }

  // optional int32 t_int32 = 3;
  if (has_t_int32()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->t_int32(), output);
  }

  // optional uint32 t_uint32 = 4;
  if (has_t_uint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->t_uint32(), output);
  }

  // optional float t_float = 5;
  if (has_t_float()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->t_float(), output);
  }

  // optional double t_double = 6;
  if (has_t_double()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->t_double(), output);
  }

  // optional string t_string = 7;
  if (has_t_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->t_string().data(), this->t_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "t_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->t_string(), output);
  }

  // repeated uint32 t_uint32_rep = 8;
  for (int i = 0; i < this->t_uint32_rep_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->t_uint32_rep(i), output);
  }

  // optional .nestTest test1 = 9;
  if (has_test1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->test1(), output);
  }

  // repeated .nestTest test2 = 10;
  for (int i = 0; i < this->test2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->test2(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Test)
}

::google::protobuf::uint8* Test::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Test)
  // required uint64 t_uint64 = 1;
  if (has_t_uint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->t_uint64(), target);
  }

  // optional int64 t_int64 = 2;
  if (has_t_int64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->t_int64(), target);
  }

  // optional int32 t_int32 = 3;
  if (has_t_int32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->t_int32(), target);
  }

  // optional uint32 t_uint32 = 4;
  if (has_t_uint32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->t_uint32(), target);
  }

  // optional float t_float = 5;
  if (has_t_float()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->t_float(), target);
  }

  // optional double t_double = 6;
  if (has_t_double()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->t_double(), target);
  }

  // optional string t_string = 7;
  if (has_t_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->t_string().data(), this->t_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "t_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->t_string(), target);
  }

  // repeated uint32 t_uint32_rep = 8;
  for (int i = 0; i < this->t_uint32_rep_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->t_uint32_rep(i), target);
  }

  // optional .nestTest test1 = 9;
  if (has_test1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->test1(), target);
  }

  // repeated .nestTest test2 = 10;
  for (int i = 0; i < this->test2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->test2(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Test)
  return target;
}

int Test::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 t_uint64 = 1;
    if (has_t_uint64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->t_uint64());
    }

    // optional int64 t_int64 = 2;
    if (has_t_int64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->t_int64());
    }

    // optional int32 t_int32 = 3;
    if (has_t_int32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->t_int32());
    }

    // optional uint32 t_uint32 = 4;
    if (has_t_uint32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->t_uint32());
    }

    // optional float t_float = 5;
    if (has_t_float()) {
      total_size += 1 + 4;
    }

    // optional double t_double = 6;
    if (has_t_double()) {
      total_size += 1 + 8;
    }

    // optional string t_string = 7;
    if (has_t_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->t_string());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .nestTest test1 = 9;
    if (has_test1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->test1());
    }

  }
  // repeated uint32 t_uint32_rep = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->t_uint32_rep_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->t_uint32_rep(i));
    }
    total_size += 1 * this->t_uint32_rep_size() + data_size;
  }

  // repeated .nestTest test2 = 10;
  total_size += 1 * this->test2_size();
  for (int i = 0; i < this->test2_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->test2(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Test::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Test* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Test*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Test::MergeFrom(const Test& from) {
  GOOGLE_CHECK_NE(&from, this);
  t_uint32_rep_.MergeFrom(from.t_uint32_rep_);
  test2_.MergeFrom(from.test2_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_t_uint64()) {
      set_t_uint64(from.t_uint64());
    }
    if (from.has_t_int64()) {
      set_t_int64(from.t_int64());
    }
    if (from.has_t_int32()) {
      set_t_int32(from.t_int32());
    }
    if (from.has_t_uint32()) {
      set_t_uint32(from.t_uint32());
    }
    if (from.has_t_float()) {
      set_t_float(from.t_float());
    }
    if (from.has_t_double()) {
      set_t_double(from.t_double());
    }
    if (from.has_t_string()) {
      set_t_string(from.t_string());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_test1()) {
      mutable_test1()->::nestTest::MergeFrom(from.test1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Test::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Test::CopyFrom(const Test& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Test::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_test1()) {
    if (!this->test1().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->test2())) return false;
  return true;
}

void Test::Swap(Test* other) {
  if (other != this) {
    std::swap(t_uint64_, other->t_uint64_);
    std::swap(t_int64_, other->t_int64_);
    std::swap(t_int32_, other->t_int32_);
    std::swap(t_uint32_, other->t_uint32_);
    std::swap(t_float_, other->t_float_);
    std::swap(t_double_, other->t_double_);
    std::swap(t_string_, other->t_string_);
    t_uint32_rep_.Swap(&other->t_uint32_rep_);
    std::swap(test1_, other->test1_);
    test2_.Swap(&other->test2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Test::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Test_descriptor_;
  metadata.reflection = Test_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
