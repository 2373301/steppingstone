// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: entity/player.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "entity/player.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace typed {
namespace entity {

namespace {

const ::google::protobuf::Descriptor* Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Player_reflection_ = NULL;
const ::google::protobuf::Descriptor* Role_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Role_reflection_ = NULL;
const ::google::protobuf::Descriptor* Coin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Coin_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_entity_2fplayer_2eproto() {
  protobuf_AddDesc_entity_2fplayer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "entity/player.proto");
  GOOGLE_CHECK(file != NULL);
  Player_descriptor_ = file->message_type(0);
  static const int Player_offsets_[143] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, src_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, src_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, dst_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, dst_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, seniority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, coin_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, prestige_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, training_slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, member_slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, line_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, form_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, guild_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, wonder_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, buffers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, roles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, bag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, storehouse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, hunt_master_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, can_recruit_roles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, leave_team_roles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, sect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, law_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, sthen_will_succ_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, sthen_queue_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, sthen_queue_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, sthen_queue_flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, stheno_hire_checksum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, stheno_hire_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, stheno_idle_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, stheno_equip_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, announce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, task_brief_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, level_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, town_stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, educate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, attach_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, specshop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, chakra_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, last_clean_day_relational_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, last_login_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, last_logoff_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, worship_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, first_role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, last_clean_week_relational_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, eggs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, condor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, reverence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, vip_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, boss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, answer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, addiction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, is_addiction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, addiction_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, gift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, sthen_flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, super_gm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, achievement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, practice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, flower_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, daily_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, tower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, start_stheno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, tavern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, fish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, dodge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, guild_icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, wifes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, player_wife_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, player_activies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, last_energy_reward_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, left_energy_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, maze_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, open_activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, open_act_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, coin_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, last_logoff_time_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, give_equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, equip_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, follow_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, max_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, item_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, current_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, enable_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, push_id_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, push_status_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, jifen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, total_money_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, total_coin_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, total_seni_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, charge_quest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, trial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, runes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, shl_switch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, doubleexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, soul_pve_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, soul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, soul_frag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, login_gift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, super_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, goldcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, special_right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, talent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, turntable_accrun_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, touch_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, validate_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, vip_level_init_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, year_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, horse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, robot_validate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, robot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, horse_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, wife_follow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, is_yellow_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, is_yelow_year_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, yellow_vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, is_yellow_high_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, open_id_qq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, open_id_referrer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, qqspreadsen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, wf_fatepoint_),
  };
  Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Player_descriptor_,
      Player::default_instance_,
      Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Player));
  Role_descriptor_ = file->message_type(1);
  static const int Role_offsets_[33] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, faction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, postion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, normal_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, extremely_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, char_ability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, culture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, pellet1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, pellet_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, buffers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, equipments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, hunt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, hire_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, avatar_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, educate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, stomach_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, training_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, dodge_skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, wife_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, pellet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, inherit_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, inherit_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, shl_owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, update_fight_power_),
  };
  Role_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Role_descriptor_,
      Role::default_instance_,
      Role_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Role));
  Coin_descriptor_ = file->message_type(2);
  static const int Coin_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coin, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coin, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coin, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coin, money_),
  };
  Coin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Coin_descriptor_,
      Coin::default_instance_,
      Coin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Coin));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_entity_2fplayer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Player_descriptor_, &Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Role_descriptor_, &Role::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Coin_descriptor_, &Coin::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_entity_2fplayer_2eproto() {
  delete Player::default_instance_;
  delete Player_reflection_;
  delete Role::default_instance_;
  delete Role_reflection_;
  delete Coin::default_instance_;
  delete Coin_reflection_;
}

void protobuf_AddDesc_entity_2fplayer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023entity/player.proto\022\014typed.entity\"\306\026\n\006"
    "Player\022\014\n\004guid\030\001 \002(\004\022\014\n\004name\030\002 \001(\t\022\r\n\005le"
    "vel\030\003 \001(\r\022\013\n\003exp\030\004 \001(\r\022\013\n\003sex\030\005 \001(\r\022\022\n\np"
    "rofession\030\006 \001(\r\022\r\n\005money\030\007 \001(\r\022\014\n\004coin\030\010"
    " \001(\r\022\r\n\005src_x\030\t \001(\005\022\r\n\005src_y\030\n \001(\005\022\r\n\005ds"
    "t_x\030\013 \001(\005\022\r\n\005dst_y\030\014 \001(\005\022\021\n\tseniority\030\r "
    "\001(\r\022\021\n\tvip_level\030\016 \001(\r\022\020\n\010coin_exp\030\017 \001(\r"
    "\022\020\n\010prestige\030\020 \001(\r\022\016\n\006energy\030\021 \001(\r\022\r\n\005po"
    "wer\030\022 \001(\r\022\025\n\rtraining_slot\030\023 \001(\r\022\023\n\013memb"
    "er_slot\030\024 \001(\r\022\016\n\006map_id\030\025 \001(\r\022\017\n\007line_no"
    "\030\026 \001(\r\022\r\n\005stage\030\027 \001(\004\022\021\n\tdirection\030\030 \001(\005"
    "\022\014\n\004form\030\031 \001(\004\022\014\n\004rank\030\032 \001(\r\022\r\n\005guild\030\033 "
    "\001(\004\022\022\n\nguild_name\030\034 \001(\t\022\024\n\014wonder_skill\030"
    "\035 \003(\r\022\017\n\007buffers\030\036 \003(\004\022\r\n\005roles\030\037 \003(\004\022\013\n"
    "\003bag\030  \003(\004\022\022\n\nstorehouse\030! \003(\004\022\031\n\021hunt_m"
    "aster_state\030\" \003(\r\022\031\n\021can_recruit_roles\030#"
    " \003(\r\022\030\n\020leave_team_roles\030$ \003(\004\022\014\n\004sect\030%"
    " \001(\004\022\013\n\003law\030& \001(\004\022\027\n\017sthen_will_succ\030\' \001"
    "(\r\022\031\n\021sthen_queue_stamp\030( \003(\004\022\031\n\021sthen_q"
    "ueue_times\0303 \003(\r\022\031\n\021sthen_queue_flags\0304 "
    "\003(\r\022\034\n\024stheno_hire_checksum\030) \001(\004\022\030\n\020sth"
    "eno_hire_list\030* \003(\r\022\030\n\020stheno_idle_list\030"
    "+ \003(\004\022\031\n\021stheno_equip_list\030, \003(\004\022\020\n\010anno"
    "unce\030- \001(\004\022\022\n\ntask_brief\030. \001(\004\022\022\n\nattrib"
    "utes\030/ \003(\r\022\023\n\013level_limit\0300 \001(\r\022\022\n\ntown_"
    "stage\0301 \003(\004\022\017\n\007educate\0302 \001(\004\022\016\n\006attach\0305"
    " \001(\004\022\020\n\010specshop\0306 \001(\004\022\016\n\006chakra\0307 \001(\004\022&"
    "\n\036last_clean_day_relational_time\0308 \001(\004\022\027"
    "\n\017last_login_time\0309 \001(\004\022\030\n\020last_logoff_t"
    "ime\030: \001(\004\022\017\n\007worship\030; \001(\004\022\017\n\007role_id\030< "
    "\001(\004\022\022\n\nfirst_role\030= \001(\004\022\'\n\037last_clean_we"
    "ek_relational_time\030> \001(\004\022\014\n\004eggs\030\? \001(\004\022\016"
    "\n\006condor\030@ \001(\004\022\021\n\treverence\030A \001(\r\022\017\n\007vip"
    "_exp\030B \001(\r\022\014\n\004boss\030C \001(\004\022\016\n\006answer\030D \001(\004"
    "\022\021\n\taddiction\030E \001(\004\022\024\n\014is_addiction\030F \001("
    "\r\022\030\n\020addiction_status\030G \001(\r\022\014\n\004gift\030H \001("
    "\004\022\013\n\003vip\030I \001(\004\022\023\n\013sthen_flags\030J \001(\r\022\017\n\007a"
    "ccount\030K \001(\t\022\020\n\010super_gm\030L \001(\r\022\023\n\013achiev"
    "ement\030M \001(\004\022\020\n\010practice\030N \001(\004\022\023\n\013flower_"
    "rank\030O \001(\r\022\024\n\014daily_points\030P \001(\004\022\r\n\005towe"
    "r\030Q \001(\004\022\024\n\014start_stheno\030R \001(\r\022\016\n\006tavern\030"
    "S \001(\004\022\014\n\004fish\030T \001(\004\022\r\n\005dodge\030U \001(\004\022\022\n\ngu"
    "ild_icon\030V \001(\r\022\r\n\005wifes\030W \003(\004\022\023\n\013player_"
    "wife\030X \001(\004\022\027\n\017player_activies\030Y \001(\004\022\037\n\027l"
    "ast_energy_reward_time\030Z \001(\004\022\032\n\022left_ene"
    "rgy_reward\030[ \001(\r\022\014\n\004maze\030\\ \001(\004\022\025\n\ropen_a"
    "ctivity\030] \001(\004\022\020\n\010open_act\030^ \001(\004\022\021\n\tcoin_"
    "guid\030_ \001(\004\022\034\n\024last_logoff_time_str\030` \001(\t"
    "\022\022\n\ngive_equip\030a \003(\r\022\024\n\014equip_reward\030b \003"
    "(\r\022\026\n\016follow_role_id\030c \001(\r\022\021\n\tmax_power\030"
    "d \001(\r\022\017\n\007item_id\030e \003(\r\022\020\n\010item_num\030f \003(\r"
    "\022\025\n\rcurrent_title\030g \003(\r\022\024\n\014enable_title\030"
    "h \001(\r\022\024\n\014push_id_list\030i \003(\r\022\030\n\020push_stat"
    "us_list\030j \003(\r\022\r\n\005jifen\030k \001(\r\022\030\n\020total_mo"
    "ney_cost\030l \001(\004\022\027\n\017total_coin_cost\030m \001(\004\022"
    "\027\n\017total_seni_cost\030n \001(\004\022\024\n\014charge_quest"
    "\030o \001(\r\022\r\n\005trial\030p \001(\004\022\r\n\005runes\030q \001(\004\022\022\n\n"
    "shl_switch\030r \001(\004\022\021\n\tdoubleexp\030s \001(\004\022\025\n\rs"
    "oul_pve_guid\030t \001(\004\022\014\n\004soul\030u \001(\004\022\021\n\tsoul"
    "_frag\030v \001(\r\022\022\n\nlogin_gift\030w \001(\004\022\023\n\013super"
    "_power\030x \001(\004\022\020\n\010platform\030y \001(\t\022\020\n\010goldca"
    "rd\030z \001(\004\022\025\n\rspecial_right\030{ \001(\r\022\016\n\006talen"
    "t\030| \001(\004\022\030\n\020turntable_accrun\030} \001(\r\022\023\n\013tou"
    "ch_times\030~ \003(\004\022\024\n\014validate_str\030\177 \001(\t\022\027\n\016"
    "vip_level_init\030\200\001 \001(\r\022\022\n\tyear_card\030\201\001 \001("
    "\r\022\023\n\ntime_stamp\030\202\001 \001(\r\022\016\n\005horse\030\203\001 \001(\004\022\027"
    "\n\016robot_validate\030\204\001 \001(\t\022\021\n\010robot_id\030\205\001 \001"
    "(\r\022\021\n\010horse_id\030\206\001 \001(\r\022\024\n\013wife_follow\030\207\001 "
    "\001(\r\022\026\n\ris_yellow_vip\030\210\001 \001(\r\022\032\n\021is_yelow_"
    "year_vip\030\211\001 \001(\r\022\031\n\020yellow_vip_level\030\212\001 \001"
    "(\r\022\033\n\022is_yellow_high_vip\030\213\001 \001(\r\022\023\n\nopen_"
    "id_qq\030\214\001 \001(\t\022\031\n\020open_id_referrer\030\215\001 \001(\t\022"
    "\024\n\013qqspreadsen\030\216\001 \001(\004\022\025\n\014wf_fatepoint\030\217\001"
    " \001(\r\"\345\004\n\004Role\022\014\n\004guid\030\001 \002(\004\022\016\n\006player\030\002 "
    "\002(\004\022\017\n\007role_id\030\003 \001(\r\022\014\n\004name\030\004 \001(\t\022\013\n\003se"
    "x\030\005 \001(\r\022\013\n\003job\030\006 \001(\r\022\017\n\007faction\030\007 \001(\r\022\r\n"
    "\005level\030\010 \001(\r\022\013\n\003exp\030\t \001(\r\022\017\n\007postion\030\n \001"
    "(\r\022\024\n\014normal_skill\030\013 \001(\r\022\027\n\017extremely_sk"
    "ill\030\014 \001(\r\022\024\n\014char_ability\030\r \001(\r\022\017\n\007cultu"
    "re\030\016 \003(\r\022\017\n\007pellet1\030\017 \003(\r\022\021\n\tpellet_no\030\020"
    " \003(\r\022\022\n\nattributes\030\021 \003(\005\022\017\n\007buffers\030\022 \003("
    "\004\022\022\n\nequipments\030\023 \003(\004\022\014\n\004hunt\030\024 \003(\004\022\017\n\007h"
    "ire_id\030\025 \001(\r\022\021\n\tavatar_id\030\026 \001(\r\022\017\n\007educa"
    "te\030\027 \001(\004\022\032\n\022stomach_start_time\030\030 \001(\r\022\017\n\007"
    "quality\030\031 \001(\r\022\026\n\016training_level\030\032 \001(\r\022\026\n"
    "\016dodge_skill_id\030\033 \001(\r\022\014\n\004wife\030\034 \001(\004\022\016\n\006p"
    "ellet\030\035 \001(\004\022\022\n\ninherit_to\030\036 \001(\r\022\024\n\014inher"
    "it_from\030\037 \001(\r\022\021\n\tshl_owner\030  \001(\004\022\032\n\022upda"
    "te_fight_power\030! \001(\004\"A\n\004Coin\022\014\n\004guid\030\001 \002"
    "(\004\022\016\n\006player\030\002 \002(\004\022\014\n\004coin\030\003 \001(\r\022\r\n\005mone"
    "y\030\004 \001(\r", 3607);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "entity/player.proto", &protobuf_RegisterTypes);
  Player::default_instance_ = new Player();
  Role::default_instance_ = new Role();
  Coin::default_instance_ = new Coin();
  Player::default_instance_->InitAsDefaultInstance();
  Role::default_instance_->InitAsDefaultInstance();
  Coin::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_entity_2fplayer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_entity_2fplayer_2eproto {
  StaticDescriptorInitializer_entity_2fplayer_2eproto() {
    protobuf_AddDesc_entity_2fplayer_2eproto();
  }
} static_descriptor_initializer_entity_2fplayer_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Player::kGuidFieldNumber;
const int Player::kNameFieldNumber;
const int Player::kLevelFieldNumber;
const int Player::kExpFieldNumber;
const int Player::kSexFieldNumber;
const int Player::kProfessionFieldNumber;
const int Player::kMoneyFieldNumber;
const int Player::kCoinFieldNumber;
const int Player::kSrcXFieldNumber;
const int Player::kSrcYFieldNumber;
const int Player::kDstXFieldNumber;
const int Player::kDstYFieldNumber;
const int Player::kSeniorityFieldNumber;
const int Player::kVipLevelFieldNumber;
const int Player::kCoinExpFieldNumber;
const int Player::kPrestigeFieldNumber;
const int Player::kEnergyFieldNumber;
const int Player::kPowerFieldNumber;
const int Player::kTrainingSlotFieldNumber;
const int Player::kMemberSlotFieldNumber;
const int Player::kMapIdFieldNumber;
const int Player::kLineNoFieldNumber;
const int Player::kStageFieldNumber;
const int Player::kDirectionFieldNumber;
const int Player::kFormFieldNumber;
const int Player::kRankFieldNumber;
const int Player::kGuildFieldNumber;
const int Player::kGuildNameFieldNumber;
const int Player::kWonderSkillFieldNumber;
const int Player::kBuffersFieldNumber;
const int Player::kRolesFieldNumber;
const int Player::kBagFieldNumber;
const int Player::kStorehouseFieldNumber;
const int Player::kHuntMasterStateFieldNumber;
const int Player::kCanRecruitRolesFieldNumber;
const int Player::kLeaveTeamRolesFieldNumber;
const int Player::kSectFieldNumber;
const int Player::kLawFieldNumber;
const int Player::kSthenWillSuccFieldNumber;
const int Player::kSthenQueueStampFieldNumber;
const int Player::kSthenQueueTimesFieldNumber;
const int Player::kSthenQueueFlagsFieldNumber;
const int Player::kSthenoHireChecksumFieldNumber;
const int Player::kSthenoHireListFieldNumber;
const int Player::kSthenoIdleListFieldNumber;
const int Player::kSthenoEquipListFieldNumber;
const int Player::kAnnounceFieldNumber;
const int Player::kTaskBriefFieldNumber;
const int Player::kAttributesFieldNumber;
const int Player::kLevelLimitFieldNumber;
const int Player::kTownStageFieldNumber;
const int Player::kEducateFieldNumber;
const int Player::kAttachFieldNumber;
const int Player::kSpecshopFieldNumber;
const int Player::kChakraFieldNumber;
const int Player::kLastCleanDayRelationalTimeFieldNumber;
const int Player::kLastLoginTimeFieldNumber;
const int Player::kLastLogoffTimeFieldNumber;
const int Player::kWorshipFieldNumber;
const int Player::kRoleIdFieldNumber;
const int Player::kFirstRoleFieldNumber;
const int Player::kLastCleanWeekRelationalTimeFieldNumber;
const int Player::kEggsFieldNumber;
const int Player::kCondorFieldNumber;
const int Player::kReverenceFieldNumber;
const int Player::kVipExpFieldNumber;
const int Player::kBossFieldNumber;
const int Player::kAnswerFieldNumber;
const int Player::kAddictionFieldNumber;
const int Player::kIsAddictionFieldNumber;
const int Player::kAddictionStatusFieldNumber;
const int Player::kGiftFieldNumber;
const int Player::kVipFieldNumber;
const int Player::kSthenFlagsFieldNumber;
const int Player::kAccountFieldNumber;
const int Player::kSuperGmFieldNumber;
const int Player::kAchievementFieldNumber;
const int Player::kPracticeFieldNumber;
const int Player::kFlowerRankFieldNumber;
const int Player::kDailyPointsFieldNumber;
const int Player::kTowerFieldNumber;
const int Player::kStartSthenoFieldNumber;
const int Player::kTavernFieldNumber;
const int Player::kFishFieldNumber;
const int Player::kDodgeFieldNumber;
const int Player::kGuildIconFieldNumber;
const int Player::kWifesFieldNumber;
const int Player::kPlayerWifeFieldNumber;
const int Player::kPlayerActiviesFieldNumber;
const int Player::kLastEnergyRewardTimeFieldNumber;
const int Player::kLeftEnergyRewardFieldNumber;
const int Player::kMazeFieldNumber;
const int Player::kOpenActivityFieldNumber;
const int Player::kOpenActFieldNumber;
const int Player::kCoinGuidFieldNumber;
const int Player::kLastLogoffTimeStrFieldNumber;
const int Player::kGiveEquipFieldNumber;
const int Player::kEquipRewardFieldNumber;
const int Player::kFollowRoleIdFieldNumber;
const int Player::kMaxPowerFieldNumber;
const int Player::kItemIdFieldNumber;
const int Player::kItemNumFieldNumber;
const int Player::kCurrentTitleFieldNumber;
const int Player::kEnableTitleFieldNumber;
const int Player::kPushIdListFieldNumber;
const int Player::kPushStatusListFieldNumber;
const int Player::kJifenFieldNumber;
const int Player::kTotalMoneyCostFieldNumber;
const int Player::kTotalCoinCostFieldNumber;
const int Player::kTotalSeniCostFieldNumber;
const int Player::kChargeQuestFieldNumber;
const int Player::kTrialFieldNumber;
const int Player::kRunesFieldNumber;
const int Player::kShlSwitchFieldNumber;
const int Player::kDoubleexpFieldNumber;
const int Player::kSoulPveGuidFieldNumber;
const int Player::kSoulFieldNumber;
const int Player::kSoulFragFieldNumber;
const int Player::kLoginGiftFieldNumber;
const int Player::kSuperPowerFieldNumber;
const int Player::kPlatformFieldNumber;
const int Player::kGoldcardFieldNumber;
const int Player::kSpecialRightFieldNumber;
const int Player::kTalentFieldNumber;
const int Player::kTurntableAccrunFieldNumber;
const int Player::kTouchTimesFieldNumber;
const int Player::kValidateStrFieldNumber;
const int Player::kVipLevelInitFieldNumber;
const int Player::kYearCardFieldNumber;
const int Player::kTimeStampFieldNumber;
const int Player::kHorseFieldNumber;
const int Player::kRobotValidateFieldNumber;
const int Player::kRobotIdFieldNumber;
const int Player::kHorseIdFieldNumber;
const int Player::kWifeFollowFieldNumber;
const int Player::kIsYellowVipFieldNumber;
const int Player::kIsYelowYearVipFieldNumber;
const int Player::kYellowVipLevelFieldNumber;
const int Player::kIsYellowHighVipFieldNumber;
const int Player::kOpenIdQqFieldNumber;
const int Player::kOpenIdReferrerFieldNumber;
const int Player::kQqspreadsenFieldNumber;
const int Player::kWfFatepointFieldNumber;
#endif  // !_MSC_VER

Player::Player()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.entity.Player)
}

void Player::InitAsDefaultInstance() {
}

Player::Player(const Player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.entity.Player)
}

void Player::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0u;
  exp_ = 0u;
  sex_ = 0u;
  profession_ = 0u;
  money_ = 0u;
  coin_ = 0u;
  src_x_ = 0;
  src_y_ = 0;
  dst_x_ = 0;
  dst_y_ = 0;
  seniority_ = 0u;
  vip_level_ = 0u;
  coin_exp_ = 0u;
  prestige_ = 0u;
  energy_ = 0u;
  power_ = 0u;
  training_slot_ = 0u;
  member_slot_ = 0u;
  map_id_ = 0u;
  line_no_ = 0u;
  stage_ = GOOGLE_ULONGLONG(0);
  direction_ = 0;
  form_ = GOOGLE_ULONGLONG(0);
  rank_ = 0u;
  guild_ = GOOGLE_ULONGLONG(0);
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sect_ = GOOGLE_ULONGLONG(0);
  law_ = GOOGLE_ULONGLONG(0);
  sthen_will_succ_ = 0u;
  stheno_hire_checksum_ = GOOGLE_ULONGLONG(0);
  announce_ = GOOGLE_ULONGLONG(0);
  task_brief_ = GOOGLE_ULONGLONG(0);
  level_limit_ = 0u;
  educate_ = GOOGLE_ULONGLONG(0);
  attach_ = GOOGLE_ULONGLONG(0);
  specshop_ = GOOGLE_ULONGLONG(0);
  chakra_ = GOOGLE_ULONGLONG(0);
  last_clean_day_relational_time_ = GOOGLE_ULONGLONG(0);
  last_login_time_ = GOOGLE_ULONGLONG(0);
  last_logoff_time_ = GOOGLE_ULONGLONG(0);
  worship_ = GOOGLE_ULONGLONG(0);
  role_id_ = GOOGLE_ULONGLONG(0);
  first_role_ = GOOGLE_ULONGLONG(0);
  last_clean_week_relational_time_ = GOOGLE_ULONGLONG(0);
  eggs_ = GOOGLE_ULONGLONG(0);
  condor_ = GOOGLE_ULONGLONG(0);
  reverence_ = 0u;
  vip_exp_ = 0u;
  boss_ = GOOGLE_ULONGLONG(0);
  answer_ = GOOGLE_ULONGLONG(0);
  addiction_ = GOOGLE_ULONGLONG(0);
  is_addiction_ = 0u;
  addiction_status_ = 0u;
  gift_ = GOOGLE_ULONGLONG(0);
  vip_ = GOOGLE_ULONGLONG(0);
  sthen_flags_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  super_gm_ = 0u;
  achievement_ = GOOGLE_ULONGLONG(0);
  practice_ = GOOGLE_ULONGLONG(0);
  flower_rank_ = 0u;
  daily_points_ = GOOGLE_ULONGLONG(0);
  tower_ = GOOGLE_ULONGLONG(0);
  start_stheno_ = 0u;
  tavern_ = GOOGLE_ULONGLONG(0);
  fish_ = GOOGLE_ULONGLONG(0);
  dodge_ = GOOGLE_ULONGLONG(0);
  guild_icon_ = 0u;
  player_wife_ = GOOGLE_ULONGLONG(0);
  player_activies_ = GOOGLE_ULONGLONG(0);
  last_energy_reward_time_ = GOOGLE_ULONGLONG(0);
  left_energy_reward_ = 0u;
  maze_ = GOOGLE_ULONGLONG(0);
  open_activity_ = GOOGLE_ULONGLONG(0);
  open_act_ = GOOGLE_ULONGLONG(0);
  coin_guid_ = GOOGLE_ULONGLONG(0);
  last_logoff_time_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  follow_role_id_ = 0u;
  max_power_ = 0u;
  enable_title_ = 0u;
  jifen_ = 0u;
  total_money_cost_ = GOOGLE_ULONGLONG(0);
  total_coin_cost_ = GOOGLE_ULONGLONG(0);
  total_seni_cost_ = GOOGLE_ULONGLONG(0);
  charge_quest_ = 0u;
  trial_ = GOOGLE_ULONGLONG(0);
  runes_ = GOOGLE_ULONGLONG(0);
  shl_switch_ = GOOGLE_ULONGLONG(0);
  doubleexp_ = GOOGLE_ULONGLONG(0);
  soul_pve_guid_ = GOOGLE_ULONGLONG(0);
  soul_ = GOOGLE_ULONGLONG(0);
  soul_frag_ = 0u;
  login_gift_ = GOOGLE_ULONGLONG(0);
  super_power_ = GOOGLE_ULONGLONG(0);
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  goldcard_ = GOOGLE_ULONGLONG(0);
  special_right_ = 0u;
  talent_ = GOOGLE_ULONGLONG(0);
  turntable_accrun_ = 0u;
  validate_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vip_level_init_ = 0u;
  year_card_ = 0u;
  time_stamp_ = 0u;
  horse_ = GOOGLE_ULONGLONG(0);
  robot_validate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robot_id_ = 0u;
  horse_id_ = 0u;
  wife_follow_ = 0u;
  is_yellow_vip_ = 0u;
  is_yelow_year_vip_ = 0u;
  yellow_vip_level_ = 0u;
  is_yellow_high_vip_ = 0u;
  open_id_qq_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  open_id_referrer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qqspreadsen_ = GOOGLE_ULONGLONG(0);
  wf_fatepoint_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Player::~Player() {
  // @@protoc_insertion_point(destructor:typed.entity.Player)
  SharedDtor();
}

void Player::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (guild_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guild_name_;
  }
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (last_logoff_time_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete last_logoff_time_str_;
  }
  if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_;
  }
  if (validate_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete validate_str_;
  }
  if (robot_validate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete robot_validate_;
  }
  if (open_id_qq_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete open_id_qq_;
  }
  if (open_id_referrer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete open_id_referrer_;
  }
  if (this != default_instance_) {
  }
}

void Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Player_descriptor_;
}

const Player& Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_entity_2fplayer_2eproto();
  return *default_instance_;
}

Player* Player::default_instance_ = NULL;

Player* Player::New() const {
  return new Player;
}

void Player::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Player*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(level_, coin_);
    guid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(src_x_, prestige_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(energy_, stage_);
    direction_ = 0;
  }
  if (_has_bits_[24 / 32] & 251658240) {
    ZR_(rank_, guild_);
    form_ = GOOGLE_ULONGLONG(0);
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guild_name_->clear();
      }
    }
  }
  if (_has_bits_[32 / 32] & 112) {
    ZR_(sect_, law_);
    sthen_will_succ_ = 0u;
  }
  if (_has_bits_[40 / 32] & 50176) {
    ZR_(announce_, task_brief_);
    stheno_hire_checksum_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[48 / 32] & 16384000) {
    ZR_(educate_, last_clean_day_relational_time_);
    level_limit_ = 0u;
  }
  if (_has_bits_[56 / 32] & 4278190080) {
    ZR_(last_login_time_, condor_);
  }
  if (_has_bits_[64 / 32] & 255) {
    ZR_(reverence_, gift_);
  }
  if (_has_bits_[72 / 32] & 65280) {
    ZR_(sthen_flags_, flower_rank_);
    vip_ = GOOGLE_ULONGLONG(0);
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
  }
  if (_has_bits_[80 / 32] & 12517376) {
    ZR_(start_stheno_, dodge_);
    ZR_(player_wife_, guild_icon_);
  }
  if (_has_bits_[88 / 32] & 4278190080) {
    ZR_(left_energy_reward_, coin_guid_);
    if (has_last_logoff_time_str()) {
      if (last_logoff_time_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        last_logoff_time_str_->clear();
      }
    }
  }
  if (_has_bits_[96 / 32] & 140) {
    ZR_(follow_role_id_, max_power_);
    enable_title_ = 0u;
  }
  if (_has_bits_[104 / 32] & 64512) {
    ZR_(total_money_cost_, trial_);
    jifen_ = 0u;
    charge_quest_ = 0u;
  }
  if (_has_bits_[112 / 32] & 16711680) {
    ZR_(runes_, shl_switch_);
    ZR_(soul_frag_, super_power_);
  }
  if (_has_bits_[120 / 32] & 3741319168) {
    ZR_(goldcard_, turntable_accrun_);
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        platform_->clear();
      }
    }
    if (has_validate_str()) {
      if (validate_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        validate_str_->clear();
      }
    }
    vip_level_init_ = 0u;
  }
  if (_has_bits_[128 / 32] & 255) {
    ZR_(year_card_, robot_id_);
    ZR_(horse_id_, is_yellow_vip_);
    if (has_robot_validate()) {
      if (robot_validate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        robot_validate_->clear();
      }
    }
  }
  if (_has_bits_[136 / 32] & 32512) {
    ZR_(is_yelow_year_vip_, is_yellow_high_vip_);
    ZR_(qqspreadsen_, wf_fatepoint_);
    if (has_open_id_qq()) {
      if (open_id_qq_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        open_id_qq_->clear();
      }
    }
    if (has_open_id_referrer()) {
      if (open_id_referrer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        open_id_referrer_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  wonder_skill_.Clear();
  buffers_.Clear();
  roles_.Clear();
  bag_.Clear();
  storehouse_.Clear();
  hunt_master_state_.Clear();
  can_recruit_roles_.Clear();
  leave_team_roles_.Clear();
  sthen_queue_stamp_.Clear();
  sthen_queue_times_.Clear();
  sthen_queue_flags_.Clear();
  stheno_hire_list_.Clear();
  stheno_idle_list_.Clear();
  stheno_equip_list_.Clear();
  attributes_.Clear();
  town_stage_.Clear();
  wifes_.Clear();
  give_equip_.Clear();
  equip_reward_.Clear();
  item_id_.Clear();
  item_num_.Clear();
  current_title_.Clear();
  push_id_list_.Clear();
  push_status_list_.Clear();
  touch_times_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.entity.Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 4;
      case 4: {
        if (tag == 32) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 5;
      case 5: {
        if (tag == 40) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_profession;
        break;
      }

      // optional uint32 profession = 6;
      case 6: {
        if (tag == 48) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_money;
        break;
      }

      // optional uint32 money = 7;
      case 7: {
        if (tag == 56) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_coin;
        break;
      }

      // optional uint32 coin = 8;
      case 8: {
        if (tag == 64) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_src_x;
        break;
      }

      // optional int32 src_x = 9;
      case 9: {
        if (tag == 72) {
         parse_src_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_x_)));
          set_has_src_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_src_y;
        break;
      }

      // optional int32 src_y = 10;
      case 10: {
        if (tag == 80) {
         parse_src_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_y_)));
          set_has_src_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_dst_x;
        break;
      }

      // optional int32 dst_x = 11;
      case 11: {
        if (tag == 88) {
         parse_dst_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_x_)));
          set_has_dst_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_dst_y;
        break;
      }

      // optional int32 dst_y = 12;
      case 12: {
        if (tag == 96) {
         parse_dst_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_y_)));
          set_has_dst_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_seniority;
        break;
      }

      // optional uint32 seniority = 13;
      case 13: {
        if (tag == 104) {
         parse_seniority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seniority_)));
          set_has_seniority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_vip_level;
        break;
      }

      // optional uint32 vip_level = 14;
      case 14: {
        if (tag == 112) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_coin_exp;
        break;
      }

      // optional uint32 coin_exp = 15;
      case 15: {
        if (tag == 120) {
         parse_coin_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_exp_)));
          set_has_coin_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_prestige;
        break;
      }

      // optional uint32 prestige = 16;
      case 16: {
        if (tag == 128) {
         parse_prestige:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prestige_)));
          set_has_prestige();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_energy;
        break;
      }

      // optional uint32 energy = 17;
      case 17: {
        if (tag == 136) {
         parse_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_power;
        break;
      }

      // optional uint32 power = 18;
      case 18: {
        if (tag == 144) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_training_slot;
        break;
      }

      // optional uint32 training_slot = 19;
      case 19: {
        if (tag == 152) {
         parse_training_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &training_slot_)));
          set_has_training_slot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_member_slot;
        break;
      }

      // optional uint32 member_slot = 20;
      case 20: {
        if (tag == 160) {
         parse_member_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_slot_)));
          set_has_member_slot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_map_id;
        break;
      }

      // optional uint32 map_id = 21;
      case 21: {
        if (tag == 168) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_line_no;
        break;
      }

      // optional uint32 line_no = 22;
      case 22: {
        if (tag == 176) {
         parse_line_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &line_no_)));
          set_has_line_no();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_stage;
        break;
      }

      // optional uint64 stage = 23;
      case 23: {
        if (tag == 184) {
         parse_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_direction;
        break;
      }

      // optional int32 direction = 24;
      case 24: {
        if (tag == 192) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_form;
        break;
      }

      // optional uint64 form = 25;
      case 25: {
        if (tag == 200) {
         parse_form:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &form_)));
          set_has_form();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 26;
      case 26: {
        if (tag == 208) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_guild;
        break;
      }

      // optional uint64 guild = 27;
      case 27: {
        if (tag == 216) {
         parse_guild:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guild_)));
          set_has_guild();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_guild_name;
        break;
      }

      // optional string guild_name = 28;
      case 28: {
        if (tag == 226) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guild_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_wonder_skill;
        break;
      }

      // repeated uint32 wonder_skill = 29;
      case 29: {
        if (tag == 232) {
         parse_wonder_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 232, input, this->mutable_wonder_skill())));
        } else if (tag == 234) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_wonder_skill())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_wonder_skill;
        if (input->ExpectTag(240)) goto parse_buffers;
        break;
      }

      // repeated uint64 buffers = 30;
      case 30: {
        if (tag == 240) {
         parse_buffers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 240, input, this->mutable_buffers())));
        } else if (tag == 242) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_buffers())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_buffers;
        if (input->ExpectTag(248)) goto parse_roles;
        break;
      }

      // repeated uint64 roles = 31;
      case 31: {
        if (tag == 248) {
         parse_roles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 248, input, this->mutable_roles())));
        } else if (tag == 250) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_roles())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_roles;
        if (input->ExpectTag(256)) goto parse_bag;
        break;
      }

      // repeated uint64 bag = 32;
      case 32: {
        if (tag == 256) {
         parse_bag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 256, input, this->mutable_bag())));
        } else if (tag == 258) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_bag())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_bag;
        if (input->ExpectTag(264)) goto parse_storehouse;
        break;
      }

      // repeated uint64 storehouse = 33;
      case 33: {
        if (tag == 264) {
         parse_storehouse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 264, input, this->mutable_storehouse())));
        } else if (tag == 266) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_storehouse())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_storehouse;
        if (input->ExpectTag(272)) goto parse_hunt_master_state;
        break;
      }

      // repeated uint32 hunt_master_state = 34;
      case 34: {
        if (tag == 272) {
         parse_hunt_master_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 272, input, this->mutable_hunt_master_state())));
        } else if (tag == 274) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hunt_master_state())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_hunt_master_state;
        if (input->ExpectTag(280)) goto parse_can_recruit_roles;
        break;
      }

      // repeated uint32 can_recruit_roles = 35;
      case 35: {
        if (tag == 280) {
         parse_can_recruit_roles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 280, input, this->mutable_can_recruit_roles())));
        } else if (tag == 282) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_can_recruit_roles())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_can_recruit_roles;
        if (input->ExpectTag(288)) goto parse_leave_team_roles;
        break;
      }

      // repeated uint64 leave_team_roles = 36;
      case 36: {
        if (tag == 288) {
         parse_leave_team_roles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 288, input, this->mutable_leave_team_roles())));
        } else if (tag == 290) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_leave_team_roles())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_leave_team_roles;
        if (input->ExpectTag(296)) goto parse_sect;
        break;
      }

      // optional uint64 sect = 37;
      case 37: {
        if (tag == 296) {
         parse_sect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sect_)));
          set_has_sect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_law;
        break;
      }

      // optional uint64 law = 38;
      case 38: {
        if (tag == 304) {
         parse_law:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &law_)));
          set_has_law();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_sthen_will_succ;
        break;
      }

      // optional uint32 sthen_will_succ = 39;
      case 39: {
        if (tag == 312) {
         parse_sthen_will_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sthen_will_succ_)));
          set_has_sthen_will_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_sthen_queue_stamp;
        break;
      }

      // repeated uint64 sthen_queue_stamp = 40;
      case 40: {
        if (tag == 320) {
         parse_sthen_queue_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 320, input, this->mutable_sthen_queue_stamp())));
        } else if (tag == 322) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_sthen_queue_stamp())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_sthen_queue_stamp;
        if (input->ExpectTag(328)) goto parse_stheno_hire_checksum;
        break;
      }

      // optional uint64 stheno_hire_checksum = 41;
      case 41: {
        if (tag == 328) {
         parse_stheno_hire_checksum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stheno_hire_checksum_)));
          set_has_stheno_hire_checksum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_stheno_hire_list;
        break;
      }

      // repeated uint32 stheno_hire_list = 42;
      case 42: {
        if (tag == 336) {
         parse_stheno_hire_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 336, input, this->mutable_stheno_hire_list())));
        } else if (tag == 338) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_stheno_hire_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_stheno_hire_list;
        if (input->ExpectTag(344)) goto parse_stheno_idle_list;
        break;
      }

      // repeated uint64 stheno_idle_list = 43;
      case 43: {
        if (tag == 344) {
         parse_stheno_idle_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 344, input, this->mutable_stheno_idle_list())));
        } else if (tag == 346) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_stheno_idle_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_stheno_idle_list;
        if (input->ExpectTag(352)) goto parse_stheno_equip_list;
        break;
      }

      // repeated uint64 stheno_equip_list = 44;
      case 44: {
        if (tag == 352) {
         parse_stheno_equip_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 352, input, this->mutable_stheno_equip_list())));
        } else if (tag == 354) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_stheno_equip_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_stheno_equip_list;
        if (input->ExpectTag(360)) goto parse_announce;
        break;
      }

      // optional uint64 announce = 45;
      case 45: {
        if (tag == 360) {
         parse_announce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &announce_)));
          set_has_announce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(368)) goto parse_task_brief;
        break;
      }

      // optional uint64 task_brief = 46;
      case 46: {
        if (tag == 368) {
         parse_task_brief:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &task_brief_)));
          set_has_task_brief();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(376)) goto parse_attributes;
        break;
      }

      // repeated uint32 attributes = 47;
      case 47: {
        if (tag == 376) {
         parse_attributes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 376, input, this->mutable_attributes())));
        } else if (tag == 378) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_attributes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(376)) goto parse_attributes;
        if (input->ExpectTag(384)) goto parse_level_limit;
        break;
      }

      // optional uint32 level_limit = 48;
      case 48: {
        if (tag == 384) {
         parse_level_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_limit_)));
          set_has_level_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(392)) goto parse_town_stage;
        break;
      }

      // repeated uint64 town_stage = 49;
      case 49: {
        if (tag == 392) {
         parse_town_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 392, input, this->mutable_town_stage())));
        } else if (tag == 394) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_town_stage())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(392)) goto parse_town_stage;
        if (input->ExpectTag(400)) goto parse_educate;
        break;
      }

      // optional uint64 educate = 50;
      case 50: {
        if (tag == 400) {
         parse_educate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &educate_)));
          set_has_educate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(408)) goto parse_sthen_queue_times;
        break;
      }

      // repeated uint32 sthen_queue_times = 51;
      case 51: {
        if (tag == 408) {
         parse_sthen_queue_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 408, input, this->mutable_sthen_queue_times())));
        } else if (tag == 410) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_sthen_queue_times())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(408)) goto parse_sthen_queue_times;
        if (input->ExpectTag(416)) goto parse_sthen_queue_flags;
        break;
      }

      // repeated uint32 sthen_queue_flags = 52;
      case 52: {
        if (tag == 416) {
         parse_sthen_queue_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 416, input, this->mutable_sthen_queue_flags())));
        } else if (tag == 418) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_sthen_queue_flags())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(416)) goto parse_sthen_queue_flags;
        if (input->ExpectTag(424)) goto parse_attach;
        break;
      }

      // optional uint64 attach = 53;
      case 53: {
        if (tag == 424) {
         parse_attach:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &attach_)));
          set_has_attach();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(432)) goto parse_specshop;
        break;
      }

      // optional uint64 specshop = 54;
      case 54: {
        if (tag == 432) {
         parse_specshop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &specshop_)));
          set_has_specshop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(440)) goto parse_chakra;
        break;
      }

      // optional uint64 chakra = 55;
      case 55: {
        if (tag == 440) {
         parse_chakra:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chakra_)));
          set_has_chakra();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(448)) goto parse_last_clean_day_relational_time;
        break;
      }

      // optional uint64 last_clean_day_relational_time = 56;
      case 56: {
        if (tag == 448) {
         parse_last_clean_day_relational_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_clean_day_relational_time_)));
          set_has_last_clean_day_relational_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(456)) goto parse_last_login_time;
        break;
      }

      // optional uint64 last_login_time = 57;
      case 57: {
        if (tag == 456) {
         parse_last_login_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_login_time_)));
          set_has_last_login_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(464)) goto parse_last_logoff_time;
        break;
      }

      // optional uint64 last_logoff_time = 58;
      case 58: {
        if (tag == 464) {
         parse_last_logoff_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_logoff_time_)));
          set_has_last_logoff_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(472)) goto parse_worship;
        break;
      }

      // optional uint64 worship = 59;
      case 59: {
        if (tag == 472) {
         parse_worship:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &worship_)));
          set_has_worship();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(480)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 60;
      case 60: {
        if (tag == 480) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(488)) goto parse_first_role;
        break;
      }

      // optional uint64 first_role = 61;
      case 61: {
        if (tag == 488) {
         parse_first_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &first_role_)));
          set_has_first_role();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(496)) goto parse_last_clean_week_relational_time;
        break;
      }

      // optional uint64 last_clean_week_relational_time = 62;
      case 62: {
        if (tag == 496) {
         parse_last_clean_week_relational_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_clean_week_relational_time_)));
          set_has_last_clean_week_relational_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(504)) goto parse_eggs;
        break;
      }

      // optional uint64 eggs = 63;
      case 63: {
        if (tag == 504) {
         parse_eggs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &eggs_)));
          set_has_eggs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(512)) goto parse_condor;
        break;
      }

      // optional uint64 condor = 64;
      case 64: {
        if (tag == 512) {
         parse_condor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &condor_)));
          set_has_condor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(520)) goto parse_reverence;
        break;
      }

      // optional uint32 reverence = 65;
      case 65: {
        if (tag == 520) {
         parse_reverence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reverence_)));
          set_has_reverence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(528)) goto parse_vip_exp;
        break;
      }

      // optional uint32 vip_exp = 66;
      case 66: {
        if (tag == 528) {
         parse_vip_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_exp_)));
          set_has_vip_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(536)) goto parse_boss;
        break;
      }

      // optional uint64 boss = 67;
      case 67: {
        if (tag == 536) {
         parse_boss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &boss_)));
          set_has_boss();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(544)) goto parse_answer;
        break;
      }

      // optional uint64 answer = 68;
      case 68: {
        if (tag == 544) {
         parse_answer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &answer_)));
          set_has_answer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(552)) goto parse_addiction;
        break;
      }

      // optional uint64 addiction = 69;
      case 69: {
        if (tag == 552) {
         parse_addiction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &addiction_)));
          set_has_addiction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(560)) goto parse_is_addiction;
        break;
      }

      // optional uint32 is_addiction = 70;
      case 70: {
        if (tag == 560) {
         parse_is_addiction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_addiction_)));
          set_has_is_addiction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(568)) goto parse_addiction_status;
        break;
      }

      // optional uint32 addiction_status = 71;
      case 71: {
        if (tag == 568) {
         parse_addiction_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addiction_status_)));
          set_has_addiction_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(576)) goto parse_gift;
        break;
      }

      // optional uint64 gift = 72;
      case 72: {
        if (tag == 576) {
         parse_gift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gift_)));
          set_has_gift();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(584)) goto parse_vip;
        break;
      }

      // optional uint64 vip = 73;
      case 73: {
        if (tag == 584) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(592)) goto parse_sthen_flags;
        break;
      }

      // optional uint32 sthen_flags = 74;
      case 74: {
        if (tag == 592) {
         parse_sthen_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sthen_flags_)));
          set_has_sthen_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(602)) goto parse_account;
        break;
      }

      // optional string account = 75;
      case 75: {
        if (tag == 602) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(608)) goto parse_super_gm;
        break;
      }

      // optional uint32 super_gm = 76;
      case 76: {
        if (tag == 608) {
         parse_super_gm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &super_gm_)));
          set_has_super_gm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(616)) goto parse_achievement;
        break;
      }

      // optional uint64 achievement = 77;
      case 77: {
        if (tag == 616) {
         parse_achievement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &achievement_)));
          set_has_achievement();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(624)) goto parse_practice;
        break;
      }

      // optional uint64 practice = 78;
      case 78: {
        if (tag == 624) {
         parse_practice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &practice_)));
          set_has_practice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(632)) goto parse_flower_rank;
        break;
      }

      // optional uint32 flower_rank = 79;
      case 79: {
        if (tag == 632) {
         parse_flower_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flower_rank_)));
          set_has_flower_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(640)) goto parse_daily_points;
        break;
      }

      // optional uint64 daily_points = 80;
      case 80: {
        if (tag == 640) {
         parse_daily_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &daily_points_)));
          set_has_daily_points();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(648)) goto parse_tower;
        break;
      }

      // optional uint64 tower = 81;
      case 81: {
        if (tag == 648) {
         parse_tower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tower_)));
          set_has_tower();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(656)) goto parse_start_stheno;
        break;
      }

      // optional uint32 start_stheno = 82;
      case 82: {
        if (tag == 656) {
         parse_start_stheno:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_stheno_)));
          set_has_start_stheno();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(664)) goto parse_tavern;
        break;
      }

      // optional uint64 tavern = 83;
      case 83: {
        if (tag == 664) {
         parse_tavern:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tavern_)));
          set_has_tavern();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(672)) goto parse_fish;
        break;
      }

      // optional uint64 fish = 84;
      case 84: {
        if (tag == 672) {
         parse_fish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fish_)));
          set_has_fish();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(680)) goto parse_dodge;
        break;
      }

      // optional uint64 dodge = 85;
      case 85: {
        if (tag == 680) {
         parse_dodge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dodge_)));
          set_has_dodge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(688)) goto parse_guild_icon;
        break;
      }

      // optional uint32 guild_icon = 86;
      case 86: {
        if (tag == 688) {
         parse_guild_icon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_icon_)));
          set_has_guild_icon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(696)) goto parse_wifes;
        break;
      }

      // repeated uint64 wifes = 87;
      case 87: {
        if (tag == 696) {
         parse_wifes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 696, input, this->mutable_wifes())));
        } else if (tag == 698) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_wifes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(696)) goto parse_wifes;
        if (input->ExpectTag(704)) goto parse_player_wife;
        break;
      }

      // optional uint64 player_wife = 88;
      case 88: {
        if (tag == 704) {
         parse_player_wife:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_wife_)));
          set_has_player_wife();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(712)) goto parse_player_activies;
        break;
      }

      // optional uint64 player_activies = 89;
      case 89: {
        if (tag == 712) {
         parse_player_activies:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_activies_)));
          set_has_player_activies();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(720)) goto parse_last_energy_reward_time;
        break;
      }

      // optional uint64 last_energy_reward_time = 90;
      case 90: {
        if (tag == 720) {
         parse_last_energy_reward_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_energy_reward_time_)));
          set_has_last_energy_reward_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(728)) goto parse_left_energy_reward;
        break;
      }

      // optional uint32 left_energy_reward = 91;
      case 91: {
        if (tag == 728) {
         parse_left_energy_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_energy_reward_)));
          set_has_left_energy_reward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(736)) goto parse_maze;
        break;
      }

      // optional uint64 maze = 92;
      case 92: {
        if (tag == 736) {
         parse_maze:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maze_)));
          set_has_maze();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(744)) goto parse_open_activity;
        break;
      }

      // optional uint64 open_activity = 93;
      case 93: {
        if (tag == 744) {
         parse_open_activity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &open_activity_)));
          set_has_open_activity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(752)) goto parse_open_act;
        break;
      }

      // optional uint64 open_act = 94;
      case 94: {
        if (tag == 752) {
         parse_open_act:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &open_act_)));
          set_has_open_act();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(760)) goto parse_coin_guid;
        break;
      }

      // optional uint64 coin_guid = 95;
      case 95: {
        if (tag == 760) {
         parse_coin_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &coin_guid_)));
          set_has_coin_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(770)) goto parse_last_logoff_time_str;
        break;
      }

      // optional string last_logoff_time_str = 96;
      case 96: {
        if (tag == 770) {
         parse_last_logoff_time_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_logoff_time_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->last_logoff_time_str().data(), this->last_logoff_time_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "last_logoff_time_str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(776)) goto parse_give_equip;
        break;
      }

      // repeated uint32 give_equip = 97;
      case 97: {
        if (tag == 776) {
         parse_give_equip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 776, input, this->mutable_give_equip())));
        } else if (tag == 778) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_give_equip())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(776)) goto parse_give_equip;
        if (input->ExpectTag(784)) goto parse_equip_reward;
        break;
      }

      // repeated uint32 equip_reward = 98;
      case 98: {
        if (tag == 784) {
         parse_equip_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 784, input, this->mutable_equip_reward())));
        } else if (tag == 786) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_equip_reward())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(784)) goto parse_equip_reward;
        if (input->ExpectTag(792)) goto parse_follow_role_id;
        break;
      }

      // optional uint32 follow_role_id = 99;
      case 99: {
        if (tag == 792) {
         parse_follow_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &follow_role_id_)));
          set_has_follow_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(800)) goto parse_max_power;
        break;
      }

      // optional uint32 max_power = 100;
      case 100: {
        if (tag == 800) {
         parse_max_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_power_)));
          set_has_max_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(808)) goto parse_item_id;
        break;
      }

      // repeated uint32 item_id = 101;
      case 101: {
        if (tag == 808) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 808, input, this->mutable_item_id())));
        } else if (tag == 810) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_item_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(808)) goto parse_item_id;
        if (input->ExpectTag(816)) goto parse_item_num;
        break;
      }

      // repeated uint32 item_num = 102;
      case 102: {
        if (tag == 816) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 816, input, this->mutable_item_num())));
        } else if (tag == 818) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_item_num())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(816)) goto parse_item_num;
        if (input->ExpectTag(824)) goto parse_current_title;
        break;
      }

      // repeated uint32 current_title = 103;
      case 103: {
        if (tag == 824) {
         parse_current_title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 824, input, this->mutable_current_title())));
        } else if (tag == 826) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_current_title())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(824)) goto parse_current_title;
        if (input->ExpectTag(832)) goto parse_enable_title;
        break;
      }

      // optional uint32 enable_title = 104;
      case 104: {
        if (tag == 832) {
         parse_enable_title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enable_title_)));
          set_has_enable_title();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(840)) goto parse_push_id_list;
        break;
      }

      // repeated uint32 push_id_list = 105;
      case 105: {
        if (tag == 840) {
         parse_push_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 840, input, this->mutable_push_id_list())));
        } else if (tag == 842) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_push_id_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(840)) goto parse_push_id_list;
        if (input->ExpectTag(848)) goto parse_push_status_list;
        break;
      }

      // repeated uint32 push_status_list = 106;
      case 106: {
        if (tag == 848) {
         parse_push_status_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 848, input, this->mutable_push_status_list())));
        } else if (tag == 850) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_push_status_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(848)) goto parse_push_status_list;
        if (input->ExpectTag(856)) goto parse_jifen;
        break;
      }

      // optional uint32 jifen = 107;
      case 107: {
        if (tag == 856) {
         parse_jifen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jifen_)));
          set_has_jifen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(864)) goto parse_total_money_cost;
        break;
      }

      // optional uint64 total_money_cost = 108;
      case 108: {
        if (tag == 864) {
         parse_total_money_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_money_cost_)));
          set_has_total_money_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(872)) goto parse_total_coin_cost;
        break;
      }

      // optional uint64 total_coin_cost = 109;
      case 109: {
        if (tag == 872) {
         parse_total_coin_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_coin_cost_)));
          set_has_total_coin_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(880)) goto parse_total_seni_cost;
        break;
      }

      // optional uint64 total_seni_cost = 110;
      case 110: {
        if (tag == 880) {
         parse_total_seni_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_seni_cost_)));
          set_has_total_seni_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(888)) goto parse_charge_quest;
        break;
      }

      // optional uint32 charge_quest = 111;
      case 111: {
        if (tag == 888) {
         parse_charge_quest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charge_quest_)));
          set_has_charge_quest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(896)) goto parse_trial;
        break;
      }

      // optional uint64 trial = 112;
      case 112: {
        if (tag == 896) {
         parse_trial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trial_)));
          set_has_trial();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(904)) goto parse_runes;
        break;
      }

      // optional uint64 runes = 113;
      case 113: {
        if (tag == 904) {
         parse_runes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &runes_)));
          set_has_runes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(912)) goto parse_shl_switch;
        break;
      }

      // optional uint64 shl_switch = 114;
      case 114: {
        if (tag == 912) {
         parse_shl_switch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &shl_switch_)));
          set_has_shl_switch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(920)) goto parse_doubleexp;
        break;
      }

      // optional uint64 doubleexp = 115;
      case 115: {
        if (tag == 920) {
         parse_doubleexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &doubleexp_)));
          set_has_doubleexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(928)) goto parse_soul_pve_guid;
        break;
      }

      // optional uint64 soul_pve_guid = 116;
      case 116: {
        if (tag == 928) {
         parse_soul_pve_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &soul_pve_guid_)));
          set_has_soul_pve_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(936)) goto parse_soul;
        break;
      }

      // optional uint64 soul = 117;
      case 117: {
        if (tag == 936) {
         parse_soul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &soul_)));
          set_has_soul();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(944)) goto parse_soul_frag;
        break;
      }

      // optional uint32 soul_frag = 118;
      case 118: {
        if (tag == 944) {
         parse_soul_frag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &soul_frag_)));
          set_has_soul_frag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(952)) goto parse_login_gift;
        break;
      }

      // optional uint64 login_gift = 119;
      case 119: {
        if (tag == 952) {
         parse_login_gift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &login_gift_)));
          set_has_login_gift();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(960)) goto parse_super_power;
        break;
      }

      // optional uint64 super_power = 120;
      case 120: {
        if (tag == 960) {
         parse_super_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &super_power_)));
          set_has_super_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(970)) goto parse_platform;
        break;
      }

      // optional string platform = 121;
      case 121: {
        if (tag == 970) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "platform");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(976)) goto parse_goldcard;
        break;
      }

      // optional uint64 goldcard = 122;
      case 122: {
        if (tag == 976) {
         parse_goldcard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &goldcard_)));
          set_has_goldcard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(984)) goto parse_special_right;
        break;
      }

      // optional uint32 special_right = 123;
      case 123: {
        if (tag == 984) {
         parse_special_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &special_right_)));
          set_has_special_right();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(992)) goto parse_talent;
        break;
      }

      // optional uint64 talent = 124;
      case 124: {
        if (tag == 992) {
         parse_talent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &talent_)));
          set_has_talent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1000)) goto parse_turntable_accrun;
        break;
      }

      // optional uint32 turntable_accrun = 125;
      case 125: {
        if (tag == 1000) {
         parse_turntable_accrun:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &turntable_accrun_)));
          set_has_turntable_accrun();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1008)) goto parse_touch_times;
        break;
      }

      // repeated uint64 touch_times = 126;
      case 126: {
        if (tag == 1008) {
         parse_touch_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 1008, input, this->mutable_touch_times())));
        } else if (tag == 1010) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_touch_times())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1008)) goto parse_touch_times;
        if (input->ExpectTag(1018)) goto parse_validate_str;
        break;
      }

      // optional string validate_str = 127;
      case 127: {
        if (tag == 1018) {
         parse_validate_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_validate_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->validate_str().data(), this->validate_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "validate_str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1024)) goto parse_vip_level_init;
        break;
      }

      // optional uint32 vip_level_init = 128;
      case 128: {
        if (tag == 1024) {
         parse_vip_level_init:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_level_init_)));
          set_has_vip_level_init();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1032)) goto parse_year_card;
        break;
      }

      // optional uint32 year_card = 129;
      case 129: {
        if (tag == 1032) {
         parse_year_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &year_card_)));
          set_has_year_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1040)) goto parse_time_stamp;
        break;
      }

      // optional uint32 time_stamp = 130;
      case 130: {
        if (tag == 1040) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1048)) goto parse_horse;
        break;
      }

      // optional uint64 horse = 131;
      case 131: {
        if (tag == 1048) {
         parse_horse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &horse_)));
          set_has_horse();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1058)) goto parse_robot_validate;
        break;
      }

      // optional string robot_validate = 132;
      case 132: {
        if (tag == 1058) {
         parse_robot_validate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_robot_validate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->robot_validate().data(), this->robot_validate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "robot_validate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1064)) goto parse_robot_id;
        break;
      }

      // optional uint32 robot_id = 133;
      case 133: {
        if (tag == 1064) {
         parse_robot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &robot_id_)));
          set_has_robot_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1072)) goto parse_horse_id;
        break;
      }

      // optional uint32 horse_id = 134;
      case 134: {
        if (tag == 1072) {
         parse_horse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &horse_id_)));
          set_has_horse_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1080)) goto parse_wife_follow;
        break;
      }

      // optional uint32 wife_follow = 135;
      case 135: {
        if (tag == 1080) {
         parse_wife_follow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wife_follow_)));
          set_has_wife_follow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1088)) goto parse_is_yellow_vip;
        break;
      }

      // optional uint32 is_yellow_vip = 136;
      case 136: {
        if (tag == 1088) {
         parse_is_yellow_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_yellow_vip_)));
          set_has_is_yellow_vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1096)) goto parse_is_yelow_year_vip;
        break;
      }

      // optional uint32 is_yelow_year_vip = 137;
      case 137: {
        if (tag == 1096) {
         parse_is_yelow_year_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_yelow_year_vip_)));
          set_has_is_yelow_year_vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1104)) goto parse_yellow_vip_level;
        break;
      }

      // optional uint32 yellow_vip_level = 138;
      case 138: {
        if (tag == 1104) {
         parse_yellow_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yellow_vip_level_)));
          set_has_yellow_vip_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1112)) goto parse_is_yellow_high_vip;
        break;
      }

      // optional uint32 is_yellow_high_vip = 139;
      case 139: {
        if (tag == 1112) {
         parse_is_yellow_high_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_yellow_high_vip_)));
          set_has_is_yellow_high_vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1122)) goto parse_open_id_qq;
        break;
      }

      // optional string open_id_qq = 140;
      case 140: {
        if (tag == 1122) {
         parse_open_id_qq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_open_id_qq()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->open_id_qq().data(), this->open_id_qq().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "open_id_qq");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1130)) goto parse_open_id_referrer;
        break;
      }

      // optional string open_id_referrer = 141;
      case 141: {
        if (tag == 1130) {
         parse_open_id_referrer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_open_id_referrer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->open_id_referrer().data(), this->open_id_referrer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "open_id_referrer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1136)) goto parse_qqspreadsen;
        break;
      }

      // optional uint64 qqspreadsen = 142;
      case 142: {
        if (tag == 1136) {
         parse_qqspreadsen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qqspreadsen_)));
          set_has_qqspreadsen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1144)) goto parse_wf_fatepoint;
        break;
      }

      // optional uint32 wf_fatepoint = 143;
      case 143: {
        if (tag == 1144) {
         parse_wf_fatepoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wf_fatepoint_)));
          set_has_wf_fatepoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.entity.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.entity.Player)
  return false;
#undef DO_
}

void Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.entity.Player)
  // required uint64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional uint32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->exp(), output);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sex(), output);
  }

  // optional uint32 profession = 6;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->profession(), output);
  }

  // optional uint32 money = 7;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->money(), output);
  }

  // optional uint32 coin = 8;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->coin(), output);
  }

  // optional int32 src_x = 9;
  if (has_src_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->src_x(), output);
  }

  // optional int32 src_y = 10;
  if (has_src_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->src_y(), output);
  }

  // optional int32 dst_x = 11;
  if (has_dst_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->dst_x(), output);
  }

  // optional int32 dst_y = 12;
  if (has_dst_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->dst_y(), output);
  }

  // optional uint32 seniority = 13;
  if (has_seniority()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->seniority(), output);
  }

  // optional uint32 vip_level = 14;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->vip_level(), output);
  }

  // optional uint32 coin_exp = 15;
  if (has_coin_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->coin_exp(), output);
  }

  // optional uint32 prestige = 16;
  if (has_prestige()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->prestige(), output);
  }

  // optional uint32 energy = 17;
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->energy(), output);
  }

  // optional uint32 power = 18;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->power(), output);
  }

  // optional uint32 training_slot = 19;
  if (has_training_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->training_slot(), output);
  }

  // optional uint32 member_slot = 20;
  if (has_member_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->member_slot(), output);
  }

  // optional uint32 map_id = 21;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->map_id(), output);
  }

  // optional uint32 line_no = 22;
  if (has_line_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->line_no(), output);
  }

  // optional uint64 stage = 23;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(23, this->stage(), output);
  }

  // optional int32 direction = 24;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->direction(), output);
  }

  // optional uint64 form = 25;
  if (has_form()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(25, this->form(), output);
  }

  // optional uint32 rank = 26;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->rank(), output);
  }

  // optional uint64 guild = 27;
  if (has_guild()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(27, this->guild(), output);
  }

  // optional string guild_name = 28;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guild_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      28, this->guild_name(), output);
  }

  // repeated uint32 wonder_skill = 29;
  for (int i = 0; i < this->wonder_skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      29, this->wonder_skill(i), output);
  }

  // repeated uint64 buffers = 30;
  for (int i = 0; i < this->buffers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      30, this->buffers(i), output);
  }

  // repeated uint64 roles = 31;
  for (int i = 0; i < this->roles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      31, this->roles(i), output);
  }

  // repeated uint64 bag = 32;
  for (int i = 0; i < this->bag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      32, this->bag(i), output);
  }

  // repeated uint64 storehouse = 33;
  for (int i = 0; i < this->storehouse_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      33, this->storehouse(i), output);
  }

  // repeated uint32 hunt_master_state = 34;
  for (int i = 0; i < this->hunt_master_state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      34, this->hunt_master_state(i), output);
  }

  // repeated uint32 can_recruit_roles = 35;
  for (int i = 0; i < this->can_recruit_roles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      35, this->can_recruit_roles(i), output);
  }

  // repeated uint64 leave_team_roles = 36;
  for (int i = 0; i < this->leave_team_roles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      36, this->leave_team_roles(i), output);
  }

  // optional uint64 sect = 37;
  if (has_sect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(37, this->sect(), output);
  }

  // optional uint64 law = 38;
  if (has_law()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(38, this->law(), output);
  }

  // optional uint32 sthen_will_succ = 39;
  if (has_sthen_will_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->sthen_will_succ(), output);
  }

  // repeated uint64 sthen_queue_stamp = 40;
  for (int i = 0; i < this->sthen_queue_stamp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      40, this->sthen_queue_stamp(i), output);
  }

  // optional uint64 stheno_hire_checksum = 41;
  if (has_stheno_hire_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(41, this->stheno_hire_checksum(), output);
  }

  // repeated uint32 stheno_hire_list = 42;
  for (int i = 0; i < this->stheno_hire_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      42, this->stheno_hire_list(i), output);
  }

  // repeated uint64 stheno_idle_list = 43;
  for (int i = 0; i < this->stheno_idle_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      43, this->stheno_idle_list(i), output);
  }

  // repeated uint64 stheno_equip_list = 44;
  for (int i = 0; i < this->stheno_equip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      44, this->stheno_equip_list(i), output);
  }

  // optional uint64 announce = 45;
  if (has_announce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(45, this->announce(), output);
  }

  // optional uint64 task_brief = 46;
  if (has_task_brief()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(46, this->task_brief(), output);
  }

  // repeated uint32 attributes = 47;
  for (int i = 0; i < this->attributes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      47, this->attributes(i), output);
  }

  // optional uint32 level_limit = 48;
  if (has_level_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(48, this->level_limit(), output);
  }

  // repeated uint64 town_stage = 49;
  for (int i = 0; i < this->town_stage_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      49, this->town_stage(i), output);
  }

  // optional uint64 educate = 50;
  if (has_educate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(50, this->educate(), output);
  }

  // repeated uint32 sthen_queue_times = 51;
  for (int i = 0; i < this->sthen_queue_times_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      51, this->sthen_queue_times(i), output);
  }

  // repeated uint32 sthen_queue_flags = 52;
  for (int i = 0; i < this->sthen_queue_flags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      52, this->sthen_queue_flags(i), output);
  }

  // optional uint64 attach = 53;
  if (has_attach()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(53, this->attach(), output);
  }

  // optional uint64 specshop = 54;
  if (has_specshop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(54, this->specshop(), output);
  }

  // optional uint64 chakra = 55;
  if (has_chakra()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(55, this->chakra(), output);
  }

  // optional uint64 last_clean_day_relational_time = 56;
  if (has_last_clean_day_relational_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(56, this->last_clean_day_relational_time(), output);
  }

  // optional uint64 last_login_time = 57;
  if (has_last_login_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(57, this->last_login_time(), output);
  }

  // optional uint64 last_logoff_time = 58;
  if (has_last_logoff_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(58, this->last_logoff_time(), output);
  }

  // optional uint64 worship = 59;
  if (has_worship()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(59, this->worship(), output);
  }

  // optional uint64 role_id = 60;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(60, this->role_id(), output);
  }

  // optional uint64 first_role = 61;
  if (has_first_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(61, this->first_role(), output);
  }

  // optional uint64 last_clean_week_relational_time = 62;
  if (has_last_clean_week_relational_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(62, this->last_clean_week_relational_time(), output);
  }

  // optional uint64 eggs = 63;
  if (has_eggs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(63, this->eggs(), output);
  }

  // optional uint64 condor = 64;
  if (has_condor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(64, this->condor(), output);
  }

  // optional uint32 reverence = 65;
  if (has_reverence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(65, this->reverence(), output);
  }

  // optional uint32 vip_exp = 66;
  if (has_vip_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(66, this->vip_exp(), output);
  }

  // optional uint64 boss = 67;
  if (has_boss()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(67, this->boss(), output);
  }

  // optional uint64 answer = 68;
  if (has_answer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(68, this->answer(), output);
  }

  // optional uint64 addiction = 69;
  if (has_addiction()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(69, this->addiction(), output);
  }

  // optional uint32 is_addiction = 70;
  if (has_is_addiction()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(70, this->is_addiction(), output);
  }

  // optional uint32 addiction_status = 71;
  if (has_addiction_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(71, this->addiction_status(), output);
  }

  // optional uint64 gift = 72;
  if (has_gift()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(72, this->gift(), output);
  }

  // optional uint64 vip = 73;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(73, this->vip(), output);
  }

  // optional uint32 sthen_flags = 74;
  if (has_sthen_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(74, this->sthen_flags(), output);
  }

  // optional string account = 75;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      75, this->account(), output);
  }

  // optional uint32 super_gm = 76;
  if (has_super_gm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(76, this->super_gm(), output);
  }

  // optional uint64 achievement = 77;
  if (has_achievement()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(77, this->achievement(), output);
  }

  // optional uint64 practice = 78;
  if (has_practice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(78, this->practice(), output);
  }

  // optional uint32 flower_rank = 79;
  if (has_flower_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(79, this->flower_rank(), output);
  }

  // optional uint64 daily_points = 80;
  if (has_daily_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(80, this->daily_points(), output);
  }

  // optional uint64 tower = 81;
  if (has_tower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(81, this->tower(), output);
  }

  // optional uint32 start_stheno = 82;
  if (has_start_stheno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(82, this->start_stheno(), output);
  }

  // optional uint64 tavern = 83;
  if (has_tavern()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(83, this->tavern(), output);
  }

  // optional uint64 fish = 84;
  if (has_fish()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(84, this->fish(), output);
  }

  // optional uint64 dodge = 85;
  if (has_dodge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(85, this->dodge(), output);
  }

  // optional uint32 guild_icon = 86;
  if (has_guild_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(86, this->guild_icon(), output);
  }

  // repeated uint64 wifes = 87;
  for (int i = 0; i < this->wifes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      87, this->wifes(i), output);
  }

  // optional uint64 player_wife = 88;
  if (has_player_wife()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(88, this->player_wife(), output);
  }

  // optional uint64 player_activies = 89;
  if (has_player_activies()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(89, this->player_activies(), output);
  }

  // optional uint64 last_energy_reward_time = 90;
  if (has_last_energy_reward_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(90, this->last_energy_reward_time(), output);
  }

  // optional uint32 left_energy_reward = 91;
  if (has_left_energy_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(91, this->left_energy_reward(), output);
  }

  // optional uint64 maze = 92;
  if (has_maze()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(92, this->maze(), output);
  }

  // optional uint64 open_activity = 93;
  if (has_open_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(93, this->open_activity(), output);
  }

  // optional uint64 open_act = 94;
  if (has_open_act()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(94, this->open_act(), output);
  }

  // optional uint64 coin_guid = 95;
  if (has_coin_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(95, this->coin_guid(), output);
  }

  // optional string last_logoff_time_str = 96;
  if (has_last_logoff_time_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_logoff_time_str().data(), this->last_logoff_time_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "last_logoff_time_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      96, this->last_logoff_time_str(), output);
  }

  // repeated uint32 give_equip = 97;
  for (int i = 0; i < this->give_equip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      97, this->give_equip(i), output);
  }

  // repeated uint32 equip_reward = 98;
  for (int i = 0; i < this->equip_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      98, this->equip_reward(i), output);
  }

  // optional uint32 follow_role_id = 99;
  if (has_follow_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(99, this->follow_role_id(), output);
  }

  // optional uint32 max_power = 100;
  if (has_max_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(100, this->max_power(), output);
  }

  // repeated uint32 item_id = 101;
  for (int i = 0; i < this->item_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      101, this->item_id(i), output);
  }

  // repeated uint32 item_num = 102;
  for (int i = 0; i < this->item_num_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      102, this->item_num(i), output);
  }

  // repeated uint32 current_title = 103;
  for (int i = 0; i < this->current_title_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      103, this->current_title(i), output);
  }

  // optional uint32 enable_title = 104;
  if (has_enable_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(104, this->enable_title(), output);
  }

  // repeated uint32 push_id_list = 105;
  for (int i = 0; i < this->push_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      105, this->push_id_list(i), output);
  }

  // repeated uint32 push_status_list = 106;
  for (int i = 0; i < this->push_status_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      106, this->push_status_list(i), output);
  }

  // optional uint32 jifen = 107;
  if (has_jifen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(107, this->jifen(), output);
  }

  // optional uint64 total_money_cost = 108;
  if (has_total_money_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(108, this->total_money_cost(), output);
  }

  // optional uint64 total_coin_cost = 109;
  if (has_total_coin_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(109, this->total_coin_cost(), output);
  }

  // optional uint64 total_seni_cost = 110;
  if (has_total_seni_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(110, this->total_seni_cost(), output);
  }

  // optional uint32 charge_quest = 111;
  if (has_charge_quest()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(111, this->charge_quest(), output);
  }

  // optional uint64 trial = 112;
  if (has_trial()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(112, this->trial(), output);
  }

  // optional uint64 runes = 113;
  if (has_runes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(113, this->runes(), output);
  }

  // optional uint64 shl_switch = 114;
  if (has_shl_switch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(114, this->shl_switch(), output);
  }

  // optional uint64 doubleexp = 115;
  if (has_doubleexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(115, this->doubleexp(), output);
  }

  // optional uint64 soul_pve_guid = 116;
  if (has_soul_pve_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(116, this->soul_pve_guid(), output);
  }

  // optional uint64 soul = 117;
  if (has_soul()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(117, this->soul(), output);
  }

  // optional uint32 soul_frag = 118;
  if (has_soul_frag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(118, this->soul_frag(), output);
  }

  // optional uint64 login_gift = 119;
  if (has_login_gift()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(119, this->login_gift(), output);
  }

  // optional uint64 super_power = 120;
  if (has_super_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(120, this->super_power(), output);
  }

  // optional string platform = 121;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platform");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      121, this->platform(), output);
  }

  // optional uint64 goldcard = 122;
  if (has_goldcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(122, this->goldcard(), output);
  }

  // optional uint32 special_right = 123;
  if (has_special_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(123, this->special_right(), output);
  }

  // optional uint64 talent = 124;
  if (has_talent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(124, this->talent(), output);
  }

  // optional uint32 turntable_accrun = 125;
  if (has_turntable_accrun()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(125, this->turntable_accrun(), output);
  }

  // repeated uint64 touch_times = 126;
  for (int i = 0; i < this->touch_times_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      126, this->touch_times(i), output);
  }

  // optional string validate_str = 127;
  if (has_validate_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->validate_str().data(), this->validate_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "validate_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      127, this->validate_str(), output);
  }

  // optional uint32 vip_level_init = 128;
  if (has_vip_level_init()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(128, this->vip_level_init(), output);
  }

  // optional uint32 year_card = 129;
  if (has_year_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(129, this->year_card(), output);
  }

  // optional uint32 time_stamp = 130;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(130, this->time_stamp(), output);
  }

  // optional uint64 horse = 131;
  if (has_horse()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(131, this->horse(), output);
  }

  // optional string robot_validate = 132;
  if (has_robot_validate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->robot_validate().data(), this->robot_validate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robot_validate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      132, this->robot_validate(), output);
  }

  // optional uint32 robot_id = 133;
  if (has_robot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(133, this->robot_id(), output);
  }

  // optional uint32 horse_id = 134;
  if (has_horse_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(134, this->horse_id(), output);
  }

  // optional uint32 wife_follow = 135;
  if (has_wife_follow()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(135, this->wife_follow(), output);
  }

  // optional uint32 is_yellow_vip = 136;
  if (has_is_yellow_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(136, this->is_yellow_vip(), output);
  }

  // optional uint32 is_yelow_year_vip = 137;
  if (has_is_yelow_year_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(137, this->is_yelow_year_vip(), output);
  }

  // optional uint32 yellow_vip_level = 138;
  if (has_yellow_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(138, this->yellow_vip_level(), output);
  }

  // optional uint32 is_yellow_high_vip = 139;
  if (has_is_yellow_high_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(139, this->is_yellow_high_vip(), output);
  }

  // optional string open_id_qq = 140;
  if (has_open_id_qq()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->open_id_qq().data(), this->open_id_qq().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "open_id_qq");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      140, this->open_id_qq(), output);
  }

  // optional string open_id_referrer = 141;
  if (has_open_id_referrer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->open_id_referrer().data(), this->open_id_referrer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "open_id_referrer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      141, this->open_id_referrer(), output);
  }

  // optional uint64 qqspreadsen = 142;
  if (has_qqspreadsen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(142, this->qqspreadsen(), output);
  }

  // optional uint32 wf_fatepoint = 143;
  if (has_wf_fatepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(143, this->wf_fatepoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.entity.Player)
}

::google::protobuf::uint8* Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.entity.Player)
  // required uint64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // optional uint32 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->exp(), target);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sex(), target);
  }

  // optional uint32 profession = 6;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->profession(), target);
  }

  // optional uint32 money = 7;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->money(), target);
  }

  // optional uint32 coin = 8;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->coin(), target);
  }

  // optional int32 src_x = 9;
  if (has_src_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->src_x(), target);
  }

  // optional int32 src_y = 10;
  if (has_src_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->src_y(), target);
  }

  // optional int32 dst_x = 11;
  if (has_dst_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->dst_x(), target);
  }

  // optional int32 dst_y = 12;
  if (has_dst_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->dst_y(), target);
  }

  // optional uint32 seniority = 13;
  if (has_seniority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->seniority(), target);
  }

  // optional uint32 vip_level = 14;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->vip_level(), target);
  }

  // optional uint32 coin_exp = 15;
  if (has_coin_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->coin_exp(), target);
  }

  // optional uint32 prestige = 16;
  if (has_prestige()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->prestige(), target);
  }

  // optional uint32 energy = 17;
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->energy(), target);
  }

  // optional uint32 power = 18;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->power(), target);
  }

  // optional uint32 training_slot = 19;
  if (has_training_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->training_slot(), target);
  }

  // optional uint32 member_slot = 20;
  if (has_member_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->member_slot(), target);
  }

  // optional uint32 map_id = 21;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->map_id(), target);
  }

  // optional uint32 line_no = 22;
  if (has_line_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->line_no(), target);
  }

  // optional uint64 stage = 23;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(23, this->stage(), target);
  }

  // optional int32 direction = 24;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->direction(), target);
  }

  // optional uint64 form = 25;
  if (has_form()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(25, this->form(), target);
  }

  // optional uint32 rank = 26;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->rank(), target);
  }

  // optional uint64 guild = 27;
  if (has_guild()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(27, this->guild(), target);
  }

  // optional string guild_name = 28;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guild_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->guild_name(), target);
  }

  // repeated uint32 wonder_skill = 29;
  for (int i = 0; i < this->wonder_skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(29, this->wonder_skill(i), target);
  }

  // repeated uint64 buffers = 30;
  for (int i = 0; i < this->buffers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(30, this->buffers(i), target);
  }

  // repeated uint64 roles = 31;
  for (int i = 0; i < this->roles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(31, this->roles(i), target);
  }

  // repeated uint64 bag = 32;
  for (int i = 0; i < this->bag_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(32, this->bag(i), target);
  }

  // repeated uint64 storehouse = 33;
  for (int i = 0; i < this->storehouse_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(33, this->storehouse(i), target);
  }

  // repeated uint32 hunt_master_state = 34;
  for (int i = 0; i < this->hunt_master_state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(34, this->hunt_master_state(i), target);
  }

  // repeated uint32 can_recruit_roles = 35;
  for (int i = 0; i < this->can_recruit_roles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(35, this->can_recruit_roles(i), target);
  }

  // repeated uint64 leave_team_roles = 36;
  for (int i = 0; i < this->leave_team_roles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(36, this->leave_team_roles(i), target);
  }

  // optional uint64 sect = 37;
  if (has_sect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(37, this->sect(), target);
  }

  // optional uint64 law = 38;
  if (has_law()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(38, this->law(), target);
  }

  // optional uint32 sthen_will_succ = 39;
  if (has_sthen_will_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->sthen_will_succ(), target);
  }

  // repeated uint64 sthen_queue_stamp = 40;
  for (int i = 0; i < this->sthen_queue_stamp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(40, this->sthen_queue_stamp(i), target);
  }

  // optional uint64 stheno_hire_checksum = 41;
  if (has_stheno_hire_checksum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(41, this->stheno_hire_checksum(), target);
  }

  // repeated uint32 stheno_hire_list = 42;
  for (int i = 0; i < this->stheno_hire_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(42, this->stheno_hire_list(i), target);
  }

  // repeated uint64 stheno_idle_list = 43;
  for (int i = 0; i < this->stheno_idle_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(43, this->stheno_idle_list(i), target);
  }

  // repeated uint64 stheno_equip_list = 44;
  for (int i = 0; i < this->stheno_equip_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(44, this->stheno_equip_list(i), target);
  }

  // optional uint64 announce = 45;
  if (has_announce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(45, this->announce(), target);
  }

  // optional uint64 task_brief = 46;
  if (has_task_brief()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(46, this->task_brief(), target);
  }

  // repeated uint32 attributes = 47;
  for (int i = 0; i < this->attributes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(47, this->attributes(i), target);
  }

  // optional uint32 level_limit = 48;
  if (has_level_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(48, this->level_limit(), target);
  }

  // repeated uint64 town_stage = 49;
  for (int i = 0; i < this->town_stage_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(49, this->town_stage(i), target);
  }

  // optional uint64 educate = 50;
  if (has_educate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(50, this->educate(), target);
  }

  // repeated uint32 sthen_queue_times = 51;
  for (int i = 0; i < this->sthen_queue_times_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(51, this->sthen_queue_times(i), target);
  }

  // repeated uint32 sthen_queue_flags = 52;
  for (int i = 0; i < this->sthen_queue_flags_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(52, this->sthen_queue_flags(i), target);
  }

  // optional uint64 attach = 53;
  if (has_attach()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(53, this->attach(), target);
  }

  // optional uint64 specshop = 54;
  if (has_specshop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(54, this->specshop(), target);
  }

  // optional uint64 chakra = 55;
  if (has_chakra()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(55, this->chakra(), target);
  }

  // optional uint64 last_clean_day_relational_time = 56;
  if (has_last_clean_day_relational_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(56, this->last_clean_day_relational_time(), target);
  }

  // optional uint64 last_login_time = 57;
  if (has_last_login_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(57, this->last_login_time(), target);
  }

  // optional uint64 last_logoff_time = 58;
  if (has_last_logoff_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(58, this->last_logoff_time(), target);
  }

  // optional uint64 worship = 59;
  if (has_worship()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(59, this->worship(), target);
  }

  // optional uint64 role_id = 60;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(60, this->role_id(), target);
  }

  // optional uint64 first_role = 61;
  if (has_first_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(61, this->first_role(), target);
  }

  // optional uint64 last_clean_week_relational_time = 62;
  if (has_last_clean_week_relational_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(62, this->last_clean_week_relational_time(), target);
  }

  // optional uint64 eggs = 63;
  if (has_eggs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(63, this->eggs(), target);
  }

  // optional uint64 condor = 64;
  if (has_condor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(64, this->condor(), target);
  }

  // optional uint32 reverence = 65;
  if (has_reverence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(65, this->reverence(), target);
  }

  // optional uint32 vip_exp = 66;
  if (has_vip_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(66, this->vip_exp(), target);
  }

  // optional uint64 boss = 67;
  if (has_boss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(67, this->boss(), target);
  }

  // optional uint64 answer = 68;
  if (has_answer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(68, this->answer(), target);
  }

  // optional uint64 addiction = 69;
  if (has_addiction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(69, this->addiction(), target);
  }

  // optional uint32 is_addiction = 70;
  if (has_is_addiction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(70, this->is_addiction(), target);
  }

  // optional uint32 addiction_status = 71;
  if (has_addiction_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(71, this->addiction_status(), target);
  }

  // optional uint64 gift = 72;
  if (has_gift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(72, this->gift(), target);
  }

  // optional uint64 vip = 73;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(73, this->vip(), target);
  }

  // optional uint32 sthen_flags = 74;
  if (has_sthen_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(74, this->sthen_flags(), target);
  }

  // optional string account = 75;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        75, this->account(), target);
  }

  // optional uint32 super_gm = 76;
  if (has_super_gm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(76, this->super_gm(), target);
  }

  // optional uint64 achievement = 77;
  if (has_achievement()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(77, this->achievement(), target);
  }

  // optional uint64 practice = 78;
  if (has_practice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(78, this->practice(), target);
  }

  // optional uint32 flower_rank = 79;
  if (has_flower_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(79, this->flower_rank(), target);
  }

  // optional uint64 daily_points = 80;
  if (has_daily_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(80, this->daily_points(), target);
  }

  // optional uint64 tower = 81;
  if (has_tower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(81, this->tower(), target);
  }

  // optional uint32 start_stheno = 82;
  if (has_start_stheno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(82, this->start_stheno(), target);
  }

  // optional uint64 tavern = 83;
  if (has_tavern()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(83, this->tavern(), target);
  }

  // optional uint64 fish = 84;
  if (has_fish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(84, this->fish(), target);
  }

  // optional uint64 dodge = 85;
  if (has_dodge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(85, this->dodge(), target);
  }

  // optional uint32 guild_icon = 86;
  if (has_guild_icon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(86, this->guild_icon(), target);
  }

  // repeated uint64 wifes = 87;
  for (int i = 0; i < this->wifes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(87, this->wifes(i), target);
  }

  // optional uint64 player_wife = 88;
  if (has_player_wife()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(88, this->player_wife(), target);
  }

  // optional uint64 player_activies = 89;
  if (has_player_activies()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(89, this->player_activies(), target);
  }

  // optional uint64 last_energy_reward_time = 90;
  if (has_last_energy_reward_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(90, this->last_energy_reward_time(), target);
  }

  // optional uint32 left_energy_reward = 91;
  if (has_left_energy_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(91, this->left_energy_reward(), target);
  }

  // optional uint64 maze = 92;
  if (has_maze()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(92, this->maze(), target);
  }

  // optional uint64 open_activity = 93;
  if (has_open_activity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(93, this->open_activity(), target);
  }

  // optional uint64 open_act = 94;
  if (has_open_act()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(94, this->open_act(), target);
  }

  // optional uint64 coin_guid = 95;
  if (has_coin_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(95, this->coin_guid(), target);
  }

  // optional string last_logoff_time_str = 96;
  if (has_last_logoff_time_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_logoff_time_str().data(), this->last_logoff_time_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "last_logoff_time_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        96, this->last_logoff_time_str(), target);
  }

  // repeated uint32 give_equip = 97;
  for (int i = 0; i < this->give_equip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(97, this->give_equip(i), target);
  }

  // repeated uint32 equip_reward = 98;
  for (int i = 0; i < this->equip_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(98, this->equip_reward(i), target);
  }

  // optional uint32 follow_role_id = 99;
  if (has_follow_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(99, this->follow_role_id(), target);
  }

  // optional uint32 max_power = 100;
  if (has_max_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(100, this->max_power(), target);
  }

  // repeated uint32 item_id = 101;
  for (int i = 0; i < this->item_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(101, this->item_id(i), target);
  }

  // repeated uint32 item_num = 102;
  for (int i = 0; i < this->item_num_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(102, this->item_num(i), target);
  }

  // repeated uint32 current_title = 103;
  for (int i = 0; i < this->current_title_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(103, this->current_title(i), target);
  }

  // optional uint32 enable_title = 104;
  if (has_enable_title()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(104, this->enable_title(), target);
  }

  // repeated uint32 push_id_list = 105;
  for (int i = 0; i < this->push_id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(105, this->push_id_list(i), target);
  }

  // repeated uint32 push_status_list = 106;
  for (int i = 0; i < this->push_status_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(106, this->push_status_list(i), target);
  }

  // optional uint32 jifen = 107;
  if (has_jifen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(107, this->jifen(), target);
  }

  // optional uint64 total_money_cost = 108;
  if (has_total_money_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(108, this->total_money_cost(), target);
  }

  // optional uint64 total_coin_cost = 109;
  if (has_total_coin_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(109, this->total_coin_cost(), target);
  }

  // optional uint64 total_seni_cost = 110;
  if (has_total_seni_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(110, this->total_seni_cost(), target);
  }

  // optional uint32 charge_quest = 111;
  if (has_charge_quest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(111, this->charge_quest(), target);
  }

  // optional uint64 trial = 112;
  if (has_trial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(112, this->trial(), target);
  }

  // optional uint64 runes = 113;
  if (has_runes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(113, this->runes(), target);
  }

  // optional uint64 shl_switch = 114;
  if (has_shl_switch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(114, this->shl_switch(), target);
  }

  // optional uint64 doubleexp = 115;
  if (has_doubleexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(115, this->doubleexp(), target);
  }

  // optional uint64 soul_pve_guid = 116;
  if (has_soul_pve_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(116, this->soul_pve_guid(), target);
  }

  // optional uint64 soul = 117;
  if (has_soul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(117, this->soul(), target);
  }

  // optional uint32 soul_frag = 118;
  if (has_soul_frag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(118, this->soul_frag(), target);
  }

  // optional uint64 login_gift = 119;
  if (has_login_gift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(119, this->login_gift(), target);
  }

  // optional uint64 super_power = 120;
  if (has_super_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(120, this->super_power(), target);
  }

  // optional string platform = 121;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platform");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        121, this->platform(), target);
  }

  // optional uint64 goldcard = 122;
  if (has_goldcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(122, this->goldcard(), target);
  }

  // optional uint32 special_right = 123;
  if (has_special_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(123, this->special_right(), target);
  }

  // optional uint64 talent = 124;
  if (has_talent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(124, this->talent(), target);
  }

  // optional uint32 turntable_accrun = 125;
  if (has_turntable_accrun()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(125, this->turntable_accrun(), target);
  }

  // repeated uint64 touch_times = 126;
  for (int i = 0; i < this->touch_times_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(126, this->touch_times(i), target);
  }

  // optional string validate_str = 127;
  if (has_validate_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->validate_str().data(), this->validate_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "validate_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        127, this->validate_str(), target);
  }

  // optional uint32 vip_level_init = 128;
  if (has_vip_level_init()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(128, this->vip_level_init(), target);
  }

  // optional uint32 year_card = 129;
  if (has_year_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(129, this->year_card(), target);
  }

  // optional uint32 time_stamp = 130;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(130, this->time_stamp(), target);
  }

  // optional uint64 horse = 131;
  if (has_horse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(131, this->horse(), target);
  }

  // optional string robot_validate = 132;
  if (has_robot_validate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->robot_validate().data(), this->robot_validate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robot_validate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        132, this->robot_validate(), target);
  }

  // optional uint32 robot_id = 133;
  if (has_robot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(133, this->robot_id(), target);
  }

  // optional uint32 horse_id = 134;
  if (has_horse_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(134, this->horse_id(), target);
  }

  // optional uint32 wife_follow = 135;
  if (has_wife_follow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(135, this->wife_follow(), target);
  }

  // optional uint32 is_yellow_vip = 136;
  if (has_is_yellow_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(136, this->is_yellow_vip(), target);
  }

  // optional uint32 is_yelow_year_vip = 137;
  if (has_is_yelow_year_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(137, this->is_yelow_year_vip(), target);
  }

  // optional uint32 yellow_vip_level = 138;
  if (has_yellow_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(138, this->yellow_vip_level(), target);
  }

  // optional uint32 is_yellow_high_vip = 139;
  if (has_is_yellow_high_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(139, this->is_yellow_high_vip(), target);
  }

  // optional string open_id_qq = 140;
  if (has_open_id_qq()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->open_id_qq().data(), this->open_id_qq().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "open_id_qq");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        140, this->open_id_qq(), target);
  }

  // optional string open_id_referrer = 141;
  if (has_open_id_referrer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->open_id_referrer().data(), this->open_id_referrer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "open_id_referrer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        141, this->open_id_referrer(), target);
  }

  // optional uint64 qqspreadsen = 142;
  if (has_qqspreadsen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(142, this->qqspreadsen(), target);
  }

  // optional uint32 wf_fatepoint = 143;
  if (has_wf_fatepoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(143, this->wf_fatepoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.entity.Player)
  return target;
}

int Player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 profession = 6;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->profession());
    }

    // optional uint32 money = 7;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money());
    }

    // optional uint32 coin = 8;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 src_x = 9;
    if (has_src_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->src_x());
    }

    // optional int32 src_y = 10;
    if (has_src_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->src_y());
    }

    // optional int32 dst_x = 11;
    if (has_dst_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dst_x());
    }

    // optional int32 dst_y = 12;
    if (has_dst_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dst_y());
    }

    // optional uint32 seniority = 13;
    if (has_seniority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seniority());
    }

    // optional uint32 vip_level = 14;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_level());
    }

    // optional uint32 coin_exp = 15;
    if (has_coin_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin_exp());
    }

    // optional uint32 prestige = 16;
    if (has_prestige()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prestige());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 energy = 17;
    if (has_energy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->energy());
    }

    // optional uint32 power = 18;
    if (has_power()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->power());
    }

    // optional uint32 training_slot = 19;
    if (has_training_slot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->training_slot());
    }

    // optional uint32 member_slot = 20;
    if (has_member_slot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_slot());
    }

    // optional uint32 map_id = 21;
    if (has_map_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }

    // optional uint32 line_no = 22;
    if (has_line_no()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->line_no());
    }

    // optional uint64 stage = 23;
    if (has_stage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stage());
    }

    // optional int32 direction = 24;
    if (has_direction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->direction());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint64 form = 25;
    if (has_form()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->form());
    }

    // optional uint32 rank = 26;
    if (has_rank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint64 guild = 27;
    if (has_guild()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guild());
    }

    // optional string guild_name = 28;
    if (has_guild_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }

  }
  if (_has_bits_[36 / 32] & (0xffu << (36 % 32))) {
    // optional uint64 sect = 37;
    if (has_sect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sect());
    }

    // optional uint64 law = 38;
    if (has_law()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->law());
    }

    // optional uint32 sthen_will_succ = 39;
    if (has_sthen_will_succ()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sthen_will_succ());
    }

  }
  if (_has_bits_[42 / 32] & (0xffu << (42 % 32))) {
    // optional uint64 stheno_hire_checksum = 41;
    if (has_stheno_hire_checksum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stheno_hire_checksum());
    }

    // optional uint64 announce = 45;
    if (has_announce()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->announce());
    }

    // optional uint64 task_brief = 46;
    if (has_task_brief()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->task_brief());
    }

  }
  if (_has_bits_[49 / 32] & (0xffu << (49 % 32))) {
    // optional uint32 level_limit = 48;
    if (has_level_limit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level_limit());
    }

    // optional uint64 educate = 50;
    if (has_educate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->educate());
    }

    // optional uint64 attach = 53;
    if (has_attach()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->attach());
    }

    // optional uint64 specshop = 54;
    if (has_specshop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->specshop());
    }

    // optional uint64 chakra = 55;
    if (has_chakra()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chakra());
    }

    // optional uint64 last_clean_day_relational_time = 56;
    if (has_last_clean_day_relational_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_clean_day_relational_time());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional uint64 last_login_time = 57;
    if (has_last_login_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_login_time());
    }

    // optional uint64 last_logoff_time = 58;
    if (has_last_logoff_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_logoff_time());
    }

    // optional uint64 worship = 59;
    if (has_worship()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->worship());
    }

    // optional uint64 role_id = 60;
    if (has_role_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint64 first_role = 61;
    if (has_first_role()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->first_role());
    }

    // optional uint64 last_clean_week_relational_time = 62;
    if (has_last_clean_week_relational_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_clean_week_relational_time());
    }

    // optional uint64 eggs = 63;
    if (has_eggs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->eggs());
    }

    // optional uint64 condor = 64;
    if (has_condor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->condor());
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional uint32 reverence = 65;
    if (has_reverence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reverence());
    }

    // optional uint32 vip_exp = 66;
    if (has_vip_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_exp());
    }

    // optional uint64 boss = 67;
    if (has_boss()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->boss());
    }

    // optional uint64 answer = 68;
    if (has_answer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->answer());
    }

    // optional uint64 addiction = 69;
    if (has_addiction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->addiction());
    }

    // optional uint32 is_addiction = 70;
    if (has_is_addiction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_addiction());
    }

    // optional uint32 addiction_status = 71;
    if (has_addiction_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addiction_status());
    }

    // optional uint64 gift = 72;
    if (has_gift()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gift());
    }

  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional uint64 vip = 73;
    if (has_vip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->vip());
    }

    // optional uint32 sthen_flags = 74;
    if (has_sthen_flags()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sthen_flags());
    }

    // optional string account = 75;
    if (has_account()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 super_gm = 76;
    if (has_super_gm()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->super_gm());
    }

    // optional uint64 achievement = 77;
    if (has_achievement()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->achievement());
    }

    // optional uint64 practice = 78;
    if (has_practice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->practice());
    }

    // optional uint32 flower_rank = 79;
    if (has_flower_rank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flower_rank());
    }

    // optional uint64 daily_points = 80;
    if (has_daily_points()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->daily_points());
    }

  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    // optional uint64 tower = 81;
    if (has_tower()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tower());
    }

    // optional uint32 start_stheno = 82;
    if (has_start_stheno()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_stheno());
    }

    // optional uint64 tavern = 83;
    if (has_tavern()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tavern());
    }

    // optional uint64 fish = 84;
    if (has_fish()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fish());
    }

    // optional uint64 dodge = 85;
    if (has_dodge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dodge());
    }

    // optional uint32 guild_icon = 86;
    if (has_guild_icon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_icon());
    }

    // optional uint64 player_wife = 88;
    if (has_player_wife()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_wife());
    }

  }
  if (_has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    // optional uint64 player_activies = 89;
    if (has_player_activies()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_activies());
    }

    // optional uint64 last_energy_reward_time = 90;
    if (has_last_energy_reward_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_energy_reward_time());
    }

    // optional uint32 left_energy_reward = 91;
    if (has_left_energy_reward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left_energy_reward());
    }

    // optional uint64 maze = 92;
    if (has_maze()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maze());
    }

    // optional uint64 open_activity = 93;
    if (has_open_activity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->open_activity());
    }

    // optional uint64 open_act = 94;
    if (has_open_act()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->open_act());
    }

    // optional uint64 coin_guid = 95;
    if (has_coin_guid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->coin_guid());
    }

    // optional string last_logoff_time_str = 96;
    if (has_last_logoff_time_str()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_logoff_time_str());
    }

  }
  if (_has_bits_[98 / 32] & (0xffu << (98 % 32))) {
    // optional uint32 follow_role_id = 99;
    if (has_follow_role_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->follow_role_id());
    }

    // optional uint32 max_power = 100;
    if (has_max_power()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_power());
    }

    // optional uint32 enable_title = 104;
    if (has_enable_title()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enable_title());
    }

  }
  if (_has_bits_[106 / 32] & (0xffu << (106 % 32))) {
    // optional uint32 jifen = 107;
    if (has_jifen()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jifen());
    }

    // optional uint64 total_money_cost = 108;
    if (has_total_money_cost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_money_cost());
    }

    // optional uint64 total_coin_cost = 109;
    if (has_total_coin_cost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_coin_cost());
    }

    // optional uint64 total_seni_cost = 110;
    if (has_total_seni_cost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_seni_cost());
    }

    // optional uint32 charge_quest = 111;
    if (has_charge_quest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charge_quest());
    }

    // optional uint64 trial = 112;
    if (has_trial()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->trial());
    }

  }
  if (_has_bits_[112 / 32] & (0xffu << (112 % 32))) {
    // optional uint64 runes = 113;
    if (has_runes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->runes());
    }

    // optional uint64 shl_switch = 114;
    if (has_shl_switch()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->shl_switch());
    }

    // optional uint64 doubleexp = 115;
    if (has_doubleexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->doubleexp());
    }

    // optional uint64 soul_pve_guid = 116;
    if (has_soul_pve_guid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->soul_pve_guid());
    }

    // optional uint64 soul = 117;
    if (has_soul()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->soul());
    }

    // optional uint32 soul_frag = 118;
    if (has_soul_frag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->soul_frag());
    }

    // optional uint64 login_gift = 119;
    if (has_login_gift()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->login_gift());
    }

    // optional uint64 super_power = 120;
    if (has_super_power()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->super_power());
    }

  }
  if (_has_bits_[120 / 32] & (0xffu << (120 % 32))) {
    // optional string platform = 121;
    if (has_platform()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // optional uint64 goldcard = 122;
    if (has_goldcard()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->goldcard());
    }

    // optional uint32 special_right = 123;
    if (has_special_right()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->special_right());
    }

    // optional uint64 talent = 124;
    if (has_talent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->talent());
    }

    // optional uint32 turntable_accrun = 125;
    if (has_turntable_accrun()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->turntable_accrun());
    }

    // optional string validate_str = 127;
    if (has_validate_str()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->validate_str());
    }

    // optional uint32 vip_level_init = 128;
    if (has_vip_level_init()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_level_init());
    }

  }
  if (_has_bits_[128 / 32] & (0xffu << (128 % 32))) {
    // optional uint32 year_card = 129;
    if (has_year_card()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->year_card());
    }

    // optional uint32 time_stamp = 130;
    if (has_time_stamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_stamp());
    }

    // optional uint64 horse = 131;
    if (has_horse()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->horse());
    }

    // optional string robot_validate = 132;
    if (has_robot_validate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->robot_validate());
    }

    // optional uint32 robot_id = 133;
    if (has_robot_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->robot_id());
    }

    // optional uint32 horse_id = 134;
    if (has_horse_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->horse_id());
    }

    // optional uint32 wife_follow = 135;
    if (has_wife_follow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wife_follow());
    }

    // optional uint32 is_yellow_vip = 136;
    if (has_is_yellow_vip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_yellow_vip());
    }

  }
  if (_has_bits_[136 / 32] & (0xffu << (136 % 32))) {
    // optional uint32 is_yelow_year_vip = 137;
    if (has_is_yelow_year_vip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_yelow_year_vip());
    }

    // optional uint32 yellow_vip_level = 138;
    if (has_yellow_vip_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yellow_vip_level());
    }

    // optional uint32 is_yellow_high_vip = 139;
    if (has_is_yellow_high_vip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_yellow_high_vip());
    }

    // optional string open_id_qq = 140;
    if (has_open_id_qq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->open_id_qq());
    }

    // optional string open_id_referrer = 141;
    if (has_open_id_referrer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->open_id_referrer());
    }

    // optional uint64 qqspreadsen = 142;
    if (has_qqspreadsen()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->qqspreadsen());
    }

    // optional uint32 wf_fatepoint = 143;
    if (has_wf_fatepoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wf_fatepoint());
    }

  }
  // repeated uint32 wonder_skill = 29;
  {
    int data_size = 0;
    for (int i = 0; i < this->wonder_skill_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->wonder_skill(i));
    }
    total_size += 2 * this->wonder_skill_size() + data_size;
  }

  // repeated uint64 buffers = 30;
  {
    int data_size = 0;
    for (int i = 0; i < this->buffers_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->buffers(i));
    }
    total_size += 2 * this->buffers_size() + data_size;
  }

  // repeated uint64 roles = 31;
  {
    int data_size = 0;
    for (int i = 0; i < this->roles_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->roles(i));
    }
    total_size += 2 * this->roles_size() + data_size;
  }

  // repeated uint64 bag = 32;
  {
    int data_size = 0;
    for (int i = 0; i < this->bag_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->bag(i));
    }
    total_size += 2 * this->bag_size() + data_size;
  }

  // repeated uint64 storehouse = 33;
  {
    int data_size = 0;
    for (int i = 0; i < this->storehouse_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->storehouse(i));
    }
    total_size += 2 * this->storehouse_size() + data_size;
  }

  // repeated uint32 hunt_master_state = 34;
  {
    int data_size = 0;
    for (int i = 0; i < this->hunt_master_state_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hunt_master_state(i));
    }
    total_size += 2 * this->hunt_master_state_size() + data_size;
  }

  // repeated uint32 can_recruit_roles = 35;
  {
    int data_size = 0;
    for (int i = 0; i < this->can_recruit_roles_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->can_recruit_roles(i));
    }
    total_size += 2 * this->can_recruit_roles_size() + data_size;
  }

  // repeated uint64 leave_team_roles = 36;
  {
    int data_size = 0;
    for (int i = 0; i < this->leave_team_roles_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->leave_team_roles(i));
    }
    total_size += 2 * this->leave_team_roles_size() + data_size;
  }

  // repeated uint64 sthen_queue_stamp = 40;
  {
    int data_size = 0;
    for (int i = 0; i < this->sthen_queue_stamp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->sthen_queue_stamp(i));
    }
    total_size += 2 * this->sthen_queue_stamp_size() + data_size;
  }

  // repeated uint32 sthen_queue_times = 51;
  {
    int data_size = 0;
    for (int i = 0; i < this->sthen_queue_times_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->sthen_queue_times(i));
    }
    total_size += 2 * this->sthen_queue_times_size() + data_size;
  }

  // repeated uint32 sthen_queue_flags = 52;
  {
    int data_size = 0;
    for (int i = 0; i < this->sthen_queue_flags_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->sthen_queue_flags(i));
    }
    total_size += 2 * this->sthen_queue_flags_size() + data_size;
  }

  // repeated uint32 stheno_hire_list = 42;
  {
    int data_size = 0;
    for (int i = 0; i < this->stheno_hire_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->stheno_hire_list(i));
    }
    total_size += 2 * this->stheno_hire_list_size() + data_size;
  }

  // repeated uint64 stheno_idle_list = 43;
  {
    int data_size = 0;
    for (int i = 0; i < this->stheno_idle_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->stheno_idle_list(i));
    }
    total_size += 2 * this->stheno_idle_list_size() + data_size;
  }

  // repeated uint64 stheno_equip_list = 44;
  {
    int data_size = 0;
    for (int i = 0; i < this->stheno_equip_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->stheno_equip_list(i));
    }
    total_size += 2 * this->stheno_equip_list_size() + data_size;
  }

  // repeated uint32 attributes = 47;
  {
    int data_size = 0;
    for (int i = 0; i < this->attributes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->attributes(i));
    }
    total_size += 2 * this->attributes_size() + data_size;
  }

  // repeated uint64 town_stage = 49;
  {
    int data_size = 0;
    for (int i = 0; i < this->town_stage_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->town_stage(i));
    }
    total_size += 2 * this->town_stage_size() + data_size;
  }

  // repeated uint64 wifes = 87;
  {
    int data_size = 0;
    for (int i = 0; i < this->wifes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->wifes(i));
    }
    total_size += 2 * this->wifes_size() + data_size;
  }

  // repeated uint32 give_equip = 97;
  {
    int data_size = 0;
    for (int i = 0; i < this->give_equip_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->give_equip(i));
    }
    total_size += 2 * this->give_equip_size() + data_size;
  }

  // repeated uint32 equip_reward = 98;
  {
    int data_size = 0;
    for (int i = 0; i < this->equip_reward_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->equip_reward(i));
    }
    total_size += 2 * this->equip_reward_size() + data_size;
  }

  // repeated uint32 item_id = 101;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->item_id(i));
    }
    total_size += 2 * this->item_id_size() + data_size;
  }

  // repeated uint32 item_num = 102;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_num_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->item_num(i));
    }
    total_size += 2 * this->item_num_size() + data_size;
  }

  // repeated uint32 current_title = 103;
  {
    int data_size = 0;
    for (int i = 0; i < this->current_title_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->current_title(i));
    }
    total_size += 2 * this->current_title_size() + data_size;
  }

  // repeated uint32 push_id_list = 105;
  {
    int data_size = 0;
    for (int i = 0; i < this->push_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->push_id_list(i));
    }
    total_size += 2 * this->push_id_list_size() + data_size;
  }

  // repeated uint32 push_status_list = 106;
  {
    int data_size = 0;
    for (int i = 0; i < this->push_status_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->push_status_list(i));
    }
    total_size += 2 * this->push_status_list_size() + data_size;
  }

  // repeated uint64 touch_times = 126;
  {
    int data_size = 0;
    for (int i = 0; i < this->touch_times_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->touch_times(i));
    }
    total_size += 2 * this->touch_times_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Player::MergeFrom(const Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  wonder_skill_.MergeFrom(from.wonder_skill_);
  buffers_.MergeFrom(from.buffers_);
  roles_.MergeFrom(from.roles_);
  bag_.MergeFrom(from.bag_);
  storehouse_.MergeFrom(from.storehouse_);
  hunt_master_state_.MergeFrom(from.hunt_master_state_);
  can_recruit_roles_.MergeFrom(from.can_recruit_roles_);
  leave_team_roles_.MergeFrom(from.leave_team_roles_);
  sthen_queue_stamp_.MergeFrom(from.sthen_queue_stamp_);
  sthen_queue_times_.MergeFrom(from.sthen_queue_times_);
  sthen_queue_flags_.MergeFrom(from.sthen_queue_flags_);
  stheno_hire_list_.MergeFrom(from.stheno_hire_list_);
  stheno_idle_list_.MergeFrom(from.stheno_idle_list_);
  stheno_equip_list_.MergeFrom(from.stheno_equip_list_);
  attributes_.MergeFrom(from.attributes_);
  town_stage_.MergeFrom(from.town_stage_);
  wifes_.MergeFrom(from.wifes_);
  give_equip_.MergeFrom(from.give_equip_);
  equip_reward_.MergeFrom(from.equip_reward_);
  item_id_.MergeFrom(from.item_id_);
  item_num_.MergeFrom(from.item_num_);
  current_title_.MergeFrom(from.current_title_);
  push_id_list_.MergeFrom(from.push_id_list_);
  push_status_list_.MergeFrom(from.push_status_list_);
  touch_times_.MergeFrom(from.touch_times_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_src_x()) {
      set_src_x(from.src_x());
    }
    if (from.has_src_y()) {
      set_src_y(from.src_y());
    }
    if (from.has_dst_x()) {
      set_dst_x(from.dst_x());
    }
    if (from.has_dst_y()) {
      set_dst_y(from.dst_y());
    }
    if (from.has_seniority()) {
      set_seniority(from.seniority());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_coin_exp()) {
      set_coin_exp(from.coin_exp());
    }
    if (from.has_prestige()) {
      set_prestige(from.prestige());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_energy()) {
      set_energy(from.energy());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_training_slot()) {
      set_training_slot(from.training_slot());
    }
    if (from.has_member_slot()) {
      set_member_slot(from.member_slot());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_line_no()) {
      set_line_no(from.line_no());
    }
    if (from.has_stage()) {
      set_stage(from.stage());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_form()) {
      set_form(from.form());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_guild()) {
      set_guild(from.guild());
    }
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
  }
  if (from._has_bits_[36 / 32] & (0xffu << (36 % 32))) {
    if (from.has_sect()) {
      set_sect(from.sect());
    }
    if (from.has_law()) {
      set_law(from.law());
    }
    if (from.has_sthen_will_succ()) {
      set_sthen_will_succ(from.sthen_will_succ());
    }
  }
  if (from._has_bits_[42 / 32] & (0xffu << (42 % 32))) {
    if (from.has_stheno_hire_checksum()) {
      set_stheno_hire_checksum(from.stheno_hire_checksum());
    }
    if (from.has_announce()) {
      set_announce(from.announce());
    }
    if (from.has_task_brief()) {
      set_task_brief(from.task_brief());
    }
  }
  if (from._has_bits_[49 / 32] & (0xffu << (49 % 32))) {
    if (from.has_level_limit()) {
      set_level_limit(from.level_limit());
    }
    if (from.has_educate()) {
      set_educate(from.educate());
    }
    if (from.has_attach()) {
      set_attach(from.attach());
    }
    if (from.has_specshop()) {
      set_specshop(from.specshop());
    }
    if (from.has_chakra()) {
      set_chakra(from.chakra());
    }
    if (from.has_last_clean_day_relational_time()) {
      set_last_clean_day_relational_time(from.last_clean_day_relational_time());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_last_login_time()) {
      set_last_login_time(from.last_login_time());
    }
    if (from.has_last_logoff_time()) {
      set_last_logoff_time(from.last_logoff_time());
    }
    if (from.has_worship()) {
      set_worship(from.worship());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_first_role()) {
      set_first_role(from.first_role());
    }
    if (from.has_last_clean_week_relational_time()) {
      set_last_clean_week_relational_time(from.last_clean_week_relational_time());
    }
    if (from.has_eggs()) {
      set_eggs(from.eggs());
    }
    if (from.has_condor()) {
      set_condor(from.condor());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_reverence()) {
      set_reverence(from.reverence());
    }
    if (from.has_vip_exp()) {
      set_vip_exp(from.vip_exp());
    }
    if (from.has_boss()) {
      set_boss(from.boss());
    }
    if (from.has_answer()) {
      set_answer(from.answer());
    }
    if (from.has_addiction()) {
      set_addiction(from.addiction());
    }
    if (from.has_is_addiction()) {
      set_is_addiction(from.is_addiction());
    }
    if (from.has_addiction_status()) {
      set_addiction_status(from.addiction_status());
    }
    if (from.has_gift()) {
      set_gift(from.gift());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_sthen_flags()) {
      set_sthen_flags(from.sthen_flags());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_super_gm()) {
      set_super_gm(from.super_gm());
    }
    if (from.has_achievement()) {
      set_achievement(from.achievement());
    }
    if (from.has_practice()) {
      set_practice(from.practice());
    }
    if (from.has_flower_rank()) {
      set_flower_rank(from.flower_rank());
    }
    if (from.has_daily_points()) {
      set_daily_points(from.daily_points());
    }
  }
  if (from._has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    if (from.has_tower()) {
      set_tower(from.tower());
    }
    if (from.has_start_stheno()) {
      set_start_stheno(from.start_stheno());
    }
    if (from.has_tavern()) {
      set_tavern(from.tavern());
    }
    if (from.has_fish()) {
      set_fish(from.fish());
    }
    if (from.has_dodge()) {
      set_dodge(from.dodge());
    }
    if (from.has_guild_icon()) {
      set_guild_icon(from.guild_icon());
    }
    if (from.has_player_wife()) {
      set_player_wife(from.player_wife());
    }
  }
  if (from._has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    if (from.has_player_activies()) {
      set_player_activies(from.player_activies());
    }
    if (from.has_last_energy_reward_time()) {
      set_last_energy_reward_time(from.last_energy_reward_time());
    }
    if (from.has_left_energy_reward()) {
      set_left_energy_reward(from.left_energy_reward());
    }
    if (from.has_maze()) {
      set_maze(from.maze());
    }
    if (from.has_open_activity()) {
      set_open_activity(from.open_activity());
    }
    if (from.has_open_act()) {
      set_open_act(from.open_act());
    }
    if (from.has_coin_guid()) {
      set_coin_guid(from.coin_guid());
    }
    if (from.has_last_logoff_time_str()) {
      set_last_logoff_time_str(from.last_logoff_time_str());
    }
  }
  if (from._has_bits_[98 / 32] & (0xffu << (98 % 32))) {
    if (from.has_follow_role_id()) {
      set_follow_role_id(from.follow_role_id());
    }
    if (from.has_max_power()) {
      set_max_power(from.max_power());
    }
    if (from.has_enable_title()) {
      set_enable_title(from.enable_title());
    }
  }
  if (from._has_bits_[106 / 32] & (0xffu << (106 % 32))) {
    if (from.has_jifen()) {
      set_jifen(from.jifen());
    }
    if (from.has_total_money_cost()) {
      set_total_money_cost(from.total_money_cost());
    }
    if (from.has_total_coin_cost()) {
      set_total_coin_cost(from.total_coin_cost());
    }
    if (from.has_total_seni_cost()) {
      set_total_seni_cost(from.total_seni_cost());
    }
    if (from.has_charge_quest()) {
      set_charge_quest(from.charge_quest());
    }
    if (from.has_trial()) {
      set_trial(from.trial());
    }
  }
  if (from._has_bits_[112 / 32] & (0xffu << (112 % 32))) {
    if (from.has_runes()) {
      set_runes(from.runes());
    }
    if (from.has_shl_switch()) {
      set_shl_switch(from.shl_switch());
    }
    if (from.has_doubleexp()) {
      set_doubleexp(from.doubleexp());
    }
    if (from.has_soul_pve_guid()) {
      set_soul_pve_guid(from.soul_pve_guid());
    }
    if (from.has_soul()) {
      set_soul(from.soul());
    }
    if (from.has_soul_frag()) {
      set_soul_frag(from.soul_frag());
    }
    if (from.has_login_gift()) {
      set_login_gift(from.login_gift());
    }
    if (from.has_super_power()) {
      set_super_power(from.super_power());
    }
  }
  if (from._has_bits_[120 / 32] & (0xffu << (120 % 32))) {
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_goldcard()) {
      set_goldcard(from.goldcard());
    }
    if (from.has_special_right()) {
      set_special_right(from.special_right());
    }
    if (from.has_talent()) {
      set_talent(from.talent());
    }
    if (from.has_turntable_accrun()) {
      set_turntable_accrun(from.turntable_accrun());
    }
    if (from.has_validate_str()) {
      set_validate_str(from.validate_str());
    }
    if (from.has_vip_level_init()) {
      set_vip_level_init(from.vip_level_init());
    }
  }
  if (from._has_bits_[128 / 32] & (0xffu << (128 % 32))) {
    if (from.has_year_card()) {
      set_year_card(from.year_card());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_horse()) {
      set_horse(from.horse());
    }
    if (from.has_robot_validate()) {
      set_robot_validate(from.robot_validate());
    }
    if (from.has_robot_id()) {
      set_robot_id(from.robot_id());
    }
    if (from.has_horse_id()) {
      set_horse_id(from.horse_id());
    }
    if (from.has_wife_follow()) {
      set_wife_follow(from.wife_follow());
    }
    if (from.has_is_yellow_vip()) {
      set_is_yellow_vip(from.is_yellow_vip());
    }
  }
  if (from._has_bits_[136 / 32] & (0xffu << (136 % 32))) {
    if (from.has_is_yelow_year_vip()) {
      set_is_yelow_year_vip(from.is_yelow_year_vip());
    }
    if (from.has_yellow_vip_level()) {
      set_yellow_vip_level(from.yellow_vip_level());
    }
    if (from.has_is_yellow_high_vip()) {
      set_is_yellow_high_vip(from.is_yellow_high_vip());
    }
    if (from.has_open_id_qq()) {
      set_open_id_qq(from.open_id_qq());
    }
    if (from.has_open_id_referrer()) {
      set_open_id_referrer(from.open_id_referrer());
    }
    if (from.has_qqspreadsen()) {
      set_qqspreadsen(from.qqspreadsen());
    }
    if (from.has_wf_fatepoint()) {
      set_wf_fatepoint(from.wf_fatepoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player::CopyFrom(const Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Player::Swap(Player* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(sex_, other->sex_);
    std::swap(profession_, other->profession_);
    std::swap(money_, other->money_);
    std::swap(coin_, other->coin_);
    std::swap(src_x_, other->src_x_);
    std::swap(src_y_, other->src_y_);
    std::swap(dst_x_, other->dst_x_);
    std::swap(dst_y_, other->dst_y_);
    std::swap(seniority_, other->seniority_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(coin_exp_, other->coin_exp_);
    std::swap(prestige_, other->prestige_);
    std::swap(energy_, other->energy_);
    std::swap(power_, other->power_);
    std::swap(training_slot_, other->training_slot_);
    std::swap(member_slot_, other->member_slot_);
    std::swap(map_id_, other->map_id_);
    std::swap(line_no_, other->line_no_);
    std::swap(stage_, other->stage_);
    std::swap(direction_, other->direction_);
    std::swap(form_, other->form_);
    std::swap(rank_, other->rank_);
    std::swap(guild_, other->guild_);
    std::swap(guild_name_, other->guild_name_);
    wonder_skill_.Swap(&other->wonder_skill_);
    buffers_.Swap(&other->buffers_);
    roles_.Swap(&other->roles_);
    bag_.Swap(&other->bag_);
    storehouse_.Swap(&other->storehouse_);
    hunt_master_state_.Swap(&other->hunt_master_state_);
    can_recruit_roles_.Swap(&other->can_recruit_roles_);
    leave_team_roles_.Swap(&other->leave_team_roles_);
    std::swap(sect_, other->sect_);
    std::swap(law_, other->law_);
    std::swap(sthen_will_succ_, other->sthen_will_succ_);
    sthen_queue_stamp_.Swap(&other->sthen_queue_stamp_);
    sthen_queue_times_.Swap(&other->sthen_queue_times_);
    sthen_queue_flags_.Swap(&other->sthen_queue_flags_);
    std::swap(stheno_hire_checksum_, other->stheno_hire_checksum_);
    stheno_hire_list_.Swap(&other->stheno_hire_list_);
    stheno_idle_list_.Swap(&other->stheno_idle_list_);
    stheno_equip_list_.Swap(&other->stheno_equip_list_);
    std::swap(announce_, other->announce_);
    std::swap(task_brief_, other->task_brief_);
    attributes_.Swap(&other->attributes_);
    std::swap(level_limit_, other->level_limit_);
    town_stage_.Swap(&other->town_stage_);
    std::swap(educate_, other->educate_);
    std::swap(attach_, other->attach_);
    std::swap(specshop_, other->specshop_);
    std::swap(chakra_, other->chakra_);
    std::swap(last_clean_day_relational_time_, other->last_clean_day_relational_time_);
    std::swap(last_login_time_, other->last_login_time_);
    std::swap(last_logoff_time_, other->last_logoff_time_);
    std::swap(worship_, other->worship_);
    std::swap(role_id_, other->role_id_);
    std::swap(first_role_, other->first_role_);
    std::swap(last_clean_week_relational_time_, other->last_clean_week_relational_time_);
    std::swap(eggs_, other->eggs_);
    std::swap(condor_, other->condor_);
    std::swap(reverence_, other->reverence_);
    std::swap(vip_exp_, other->vip_exp_);
    std::swap(boss_, other->boss_);
    std::swap(answer_, other->answer_);
    std::swap(addiction_, other->addiction_);
    std::swap(is_addiction_, other->is_addiction_);
    std::swap(addiction_status_, other->addiction_status_);
    std::swap(gift_, other->gift_);
    std::swap(vip_, other->vip_);
    std::swap(sthen_flags_, other->sthen_flags_);
    std::swap(account_, other->account_);
    std::swap(super_gm_, other->super_gm_);
    std::swap(achievement_, other->achievement_);
    std::swap(practice_, other->practice_);
    std::swap(flower_rank_, other->flower_rank_);
    std::swap(daily_points_, other->daily_points_);
    std::swap(tower_, other->tower_);
    std::swap(start_stheno_, other->start_stheno_);
    std::swap(tavern_, other->tavern_);
    std::swap(fish_, other->fish_);
    std::swap(dodge_, other->dodge_);
    std::swap(guild_icon_, other->guild_icon_);
    wifes_.Swap(&other->wifes_);
    std::swap(player_wife_, other->player_wife_);
    std::swap(player_activies_, other->player_activies_);
    std::swap(last_energy_reward_time_, other->last_energy_reward_time_);
    std::swap(left_energy_reward_, other->left_energy_reward_);
    std::swap(maze_, other->maze_);
    std::swap(open_activity_, other->open_activity_);
    std::swap(open_act_, other->open_act_);
    std::swap(coin_guid_, other->coin_guid_);
    std::swap(last_logoff_time_str_, other->last_logoff_time_str_);
    give_equip_.Swap(&other->give_equip_);
    equip_reward_.Swap(&other->equip_reward_);
    std::swap(follow_role_id_, other->follow_role_id_);
    std::swap(max_power_, other->max_power_);
    item_id_.Swap(&other->item_id_);
    item_num_.Swap(&other->item_num_);
    current_title_.Swap(&other->current_title_);
    std::swap(enable_title_, other->enable_title_);
    push_id_list_.Swap(&other->push_id_list_);
    push_status_list_.Swap(&other->push_status_list_);
    std::swap(jifen_, other->jifen_);
    std::swap(total_money_cost_, other->total_money_cost_);
    std::swap(total_coin_cost_, other->total_coin_cost_);
    std::swap(total_seni_cost_, other->total_seni_cost_);
    std::swap(charge_quest_, other->charge_quest_);
    std::swap(trial_, other->trial_);
    std::swap(runes_, other->runes_);
    std::swap(shl_switch_, other->shl_switch_);
    std::swap(doubleexp_, other->doubleexp_);
    std::swap(soul_pve_guid_, other->soul_pve_guid_);
    std::swap(soul_, other->soul_);
    std::swap(soul_frag_, other->soul_frag_);
    std::swap(login_gift_, other->login_gift_);
    std::swap(super_power_, other->super_power_);
    std::swap(platform_, other->platform_);
    std::swap(goldcard_, other->goldcard_);
    std::swap(special_right_, other->special_right_);
    std::swap(talent_, other->talent_);
    std::swap(turntable_accrun_, other->turntable_accrun_);
    touch_times_.Swap(&other->touch_times_);
    std::swap(validate_str_, other->validate_str_);
    std::swap(vip_level_init_, other->vip_level_init_);
    std::swap(year_card_, other->year_card_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(horse_, other->horse_);
    std::swap(robot_validate_, other->robot_validate_);
    std::swap(robot_id_, other->robot_id_);
    std::swap(horse_id_, other->horse_id_);
    std::swap(wife_follow_, other->wife_follow_);
    std::swap(is_yellow_vip_, other->is_yellow_vip_);
    std::swap(is_yelow_year_vip_, other->is_yelow_year_vip_);
    std::swap(yellow_vip_level_, other->yellow_vip_level_);
    std::swap(is_yellow_high_vip_, other->is_yellow_high_vip_);
    std::swap(open_id_qq_, other->open_id_qq_);
    std::swap(open_id_referrer_, other->open_id_referrer_);
    std::swap(qqspreadsen_, other->qqspreadsen_);
    std::swap(wf_fatepoint_, other->wf_fatepoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    std::swap(_has_bits_[3], other->_has_bits_[3]);
    std::swap(_has_bits_[4], other->_has_bits_[4]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Player_descriptor_;
  metadata.reflection = Player_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Role::kGuidFieldNumber;
const int Role::kPlayerFieldNumber;
const int Role::kRoleIdFieldNumber;
const int Role::kNameFieldNumber;
const int Role::kSexFieldNumber;
const int Role::kJobFieldNumber;
const int Role::kFactionFieldNumber;
const int Role::kLevelFieldNumber;
const int Role::kExpFieldNumber;
const int Role::kPostionFieldNumber;
const int Role::kNormalSkillFieldNumber;
const int Role::kExtremelySkillFieldNumber;
const int Role::kCharAbilityFieldNumber;
const int Role::kCultureFieldNumber;
const int Role::kPellet1FieldNumber;
const int Role::kPelletNoFieldNumber;
const int Role::kAttributesFieldNumber;
const int Role::kBuffersFieldNumber;
const int Role::kEquipmentsFieldNumber;
const int Role::kHuntFieldNumber;
const int Role::kHireIdFieldNumber;
const int Role::kAvatarIdFieldNumber;
const int Role::kEducateFieldNumber;
const int Role::kStomachStartTimeFieldNumber;
const int Role::kQualityFieldNumber;
const int Role::kTrainingLevelFieldNumber;
const int Role::kDodgeSkillIdFieldNumber;
const int Role::kWifeFieldNumber;
const int Role::kPelletFieldNumber;
const int Role::kInheritToFieldNumber;
const int Role::kInheritFromFieldNumber;
const int Role::kShlOwnerFieldNumber;
const int Role::kUpdateFightPowerFieldNumber;
#endif  // !_MSC_VER

Role::Role()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.entity.Role)
}

void Role::InitAsDefaultInstance() {
}

Role::Role(const Role& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.entity.Role)
}

void Role::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  player_ = GOOGLE_ULONGLONG(0);
  role_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = 0u;
  job_ = 0u;
  faction_ = 0u;
  level_ = 0u;
  exp_ = 0u;
  postion_ = 0u;
  normal_skill_ = 0u;
  extremely_skill_ = 0u;
  char_ability_ = 0u;
  hire_id_ = 0u;
  avatar_id_ = 0u;
  educate_ = GOOGLE_ULONGLONG(0);
  stomach_start_time_ = 0u;
  quality_ = 0u;
  training_level_ = 0u;
  dodge_skill_id_ = 0u;
  wife_ = GOOGLE_ULONGLONG(0);
  pellet_ = GOOGLE_ULONGLONG(0);
  inherit_to_ = 0u;
  inherit_from_ = 0u;
  shl_owner_ = GOOGLE_ULONGLONG(0);
  update_fight_power_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Role::~Role() {
  // @@protoc_insertion_point(destructor:typed.entity.Role)
  SharedDtor();
}

void Role::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Role::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Role::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Role_descriptor_;
}

const Role& Role::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_entity_2fplayer_2eproto();
  return *default_instance_;
}

Role* Role::default_instance_ = NULL;

Role* Role::New() const {
  return new Role;
}

void Role::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Role*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(guid_, player_);
    ZR_(role_id_, level_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(exp_, char_ability_);
  }
  ZR_(hire_id_, stomach_start_time_);
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(quality_, shl_owner_);
  }
  update_fight_power_ = GOOGLE_ULONGLONG(0);

#undef OFFSET_OF_FIELD_
#undef ZR_

  culture_.Clear();
  pellet1_.Clear();
  pellet_no_.Clear();
  attributes_.Clear();
  buffers_.Clear();
  equipments_.Clear();
  hunt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Role::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.entity.Role)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player;
        break;
      }

      // required uint64 player = 2;
      case 2: {
        if (tag == 16) {
         parse_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_)));
          set_has_player();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint32 role_id = 3;
      case 3: {
        if (tag == 24) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 5;
      case 5: {
        if (tag == 40) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_job;
        break;
      }

      // optional uint32 job = 6;
      case 6: {
        if (tag == 48) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_faction;
        break;
      }

      // optional uint32 faction = 7;
      case 7: {
        if (tag == 56) {
         parse_faction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_)));
          set_has_faction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_level;
        break;
      }

      // optional uint32 level = 8;
      case 8: {
        if (tag == 64) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 9;
      case 9: {
        if (tag == 72) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_postion;
        break;
      }

      // optional uint32 postion = 10;
      case 10: {
        if (tag == 80) {
         parse_postion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &postion_)));
          set_has_postion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_normal_skill;
        break;
      }

      // optional uint32 normal_skill = 11;
      case 11: {
        if (tag == 88) {
         parse_normal_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &normal_skill_)));
          set_has_normal_skill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_extremely_skill;
        break;
      }

      // optional uint32 extremely_skill = 12;
      case 12: {
        if (tag == 96) {
         parse_extremely_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extremely_skill_)));
          set_has_extremely_skill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_char_ability;
        break;
      }

      // optional uint32 char_ability = 13;
      case 13: {
        if (tag == 104) {
         parse_char_ability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_ability_)));
          set_has_char_ability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_culture;
        break;
      }

      // repeated uint32 culture = 14;
      case 14: {
        if (tag == 112) {
         parse_culture:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 112, input, this->mutable_culture())));
        } else if (tag == 114) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_culture())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_culture;
        if (input->ExpectTag(120)) goto parse_pellet1;
        break;
      }

      // repeated uint32 pellet1 = 15;
      case 15: {
        if (tag == 120) {
         parse_pellet1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 120, input, this->mutable_pellet1())));
        } else if (tag == 122) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_pellet1())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_pellet1;
        if (input->ExpectTag(128)) goto parse_pellet_no;
        break;
      }

      // repeated uint32 pellet_no = 16;
      case 16: {
        if (tag == 128) {
         parse_pellet_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 128, input, this->mutable_pellet_no())));
        } else if (tag == 130) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_pellet_no())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_pellet_no;
        if (input->ExpectTag(136)) goto parse_attributes;
        break;
      }

      // repeated int32 attributes = 17;
      case 17: {
        if (tag == 136) {
         parse_attributes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 136, input, this->mutable_attributes())));
        } else if (tag == 138) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_attributes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_attributes;
        if (input->ExpectTag(144)) goto parse_buffers;
        break;
      }

      // repeated uint64 buffers = 18;
      case 18: {
        if (tag == 144) {
         parse_buffers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 144, input, this->mutable_buffers())));
        } else if (tag == 146) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_buffers())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_buffers;
        if (input->ExpectTag(152)) goto parse_equipments;
        break;
      }

      // repeated uint64 equipments = 19;
      case 19: {
        if (tag == 152) {
         parse_equipments:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 152, input, this->mutable_equipments())));
        } else if (tag == 154) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_equipments())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_equipments;
        if (input->ExpectTag(160)) goto parse_hunt;
        break;
      }

      // repeated uint64 hunt = 20;
      case 20: {
        if (tag == 160) {
         parse_hunt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 160, input, this->mutable_hunt())));
        } else if (tag == 162) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_hunt())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_hunt;
        if (input->ExpectTag(168)) goto parse_hire_id;
        break;
      }

      // optional uint32 hire_id = 21;
      case 21: {
        if (tag == 168) {
         parse_hire_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hire_id_)));
          set_has_hire_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_avatar_id;
        break;
      }

      // optional uint32 avatar_id = 22;
      case 22: {
        if (tag == 176) {
         parse_avatar_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_id_)));
          set_has_avatar_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_educate;
        break;
      }

      // optional uint64 educate = 23;
      case 23: {
        if (tag == 184) {
         parse_educate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &educate_)));
          set_has_educate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_stomach_start_time;
        break;
      }

      // optional uint32 stomach_start_time = 24;
      case 24: {
        if (tag == 192) {
         parse_stomach_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stomach_start_time_)));
          set_has_stomach_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_quality;
        break;
      }

      // optional uint32 quality = 25;
      case 25: {
        if (tag == 200) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_training_level;
        break;
      }

      // optional uint32 training_level = 26;
      case 26: {
        if (tag == 208) {
         parse_training_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &training_level_)));
          set_has_training_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_dodge_skill_id;
        break;
      }

      // optional uint32 dodge_skill_id = 27;
      case 27: {
        if (tag == 216) {
         parse_dodge_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dodge_skill_id_)));
          set_has_dodge_skill_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_wife;
        break;
      }

      // optional uint64 wife = 28;
      case 28: {
        if (tag == 224) {
         parse_wife:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &wife_)));
          set_has_wife();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_pellet;
        break;
      }

      // optional uint64 pellet = 29;
      case 29: {
        if (tag == 232) {
         parse_pellet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pellet_)));
          set_has_pellet();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_inherit_to;
        break;
      }

      // optional uint32 inherit_to = 30;
      case 30: {
        if (tag == 240) {
         parse_inherit_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inherit_to_)));
          set_has_inherit_to();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_inherit_from;
        break;
      }

      // optional uint32 inherit_from = 31;
      case 31: {
        if (tag == 248) {
         parse_inherit_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inherit_from_)));
          set_has_inherit_from();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_shl_owner;
        break;
      }

      // optional uint64 shl_owner = 32;
      case 32: {
        if (tag == 256) {
         parse_shl_owner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &shl_owner_)));
          set_has_shl_owner();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_update_fight_power;
        break;
      }

      // optional uint64 update_fight_power = 33;
      case 33: {
        if (tag == 264) {
         parse_update_fight_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_fight_power_)));
          set_has_update_fight_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.entity.Role)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.entity.Role)
  return false;
#undef DO_
}

void Role::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.entity.Role)
  // required uint64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // required uint64 player = 2;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->player(), output);
  }

  // optional uint32 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->role_id(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sex(), output);
  }

  // optional uint32 job = 6;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->job(), output);
  }

  // optional uint32 faction = 7;
  if (has_faction()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->faction(), output);
  }

  // optional uint32 level = 8;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->level(), output);
  }

  // optional uint32 exp = 9;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->exp(), output);
  }

  // optional uint32 postion = 10;
  if (has_postion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->postion(), output);
  }

  // optional uint32 normal_skill = 11;
  if (has_normal_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->normal_skill(), output);
  }

  // optional uint32 extremely_skill = 12;
  if (has_extremely_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->extremely_skill(), output);
  }

  // optional uint32 char_ability = 13;
  if (has_char_ability()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->char_ability(), output);
  }

  // repeated uint32 culture = 14;
  for (int i = 0; i < this->culture_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      14, this->culture(i), output);
  }

  // repeated uint32 pellet1 = 15;
  for (int i = 0; i < this->pellet1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      15, this->pellet1(i), output);
  }

  // repeated uint32 pellet_no = 16;
  for (int i = 0; i < this->pellet_no_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      16, this->pellet_no(i), output);
  }

  // repeated int32 attributes = 17;
  for (int i = 0; i < this->attributes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      17, this->attributes(i), output);
  }

  // repeated uint64 buffers = 18;
  for (int i = 0; i < this->buffers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      18, this->buffers(i), output);
  }

  // repeated uint64 equipments = 19;
  for (int i = 0; i < this->equipments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      19, this->equipments(i), output);
  }

  // repeated uint64 hunt = 20;
  for (int i = 0; i < this->hunt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      20, this->hunt(i), output);
  }

  // optional uint32 hire_id = 21;
  if (has_hire_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->hire_id(), output);
  }

  // optional uint32 avatar_id = 22;
  if (has_avatar_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->avatar_id(), output);
  }

  // optional uint64 educate = 23;
  if (has_educate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(23, this->educate(), output);
  }

  // optional uint32 stomach_start_time = 24;
  if (has_stomach_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->stomach_start_time(), output);
  }

  // optional uint32 quality = 25;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->quality(), output);
  }

  // optional uint32 training_level = 26;
  if (has_training_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->training_level(), output);
  }

  // optional uint32 dodge_skill_id = 27;
  if (has_dodge_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->dodge_skill_id(), output);
  }

  // optional uint64 wife = 28;
  if (has_wife()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(28, this->wife(), output);
  }

  // optional uint64 pellet = 29;
  if (has_pellet()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(29, this->pellet(), output);
  }

  // optional uint32 inherit_to = 30;
  if (has_inherit_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->inherit_to(), output);
  }

  // optional uint32 inherit_from = 31;
  if (has_inherit_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->inherit_from(), output);
  }

  // optional uint64 shl_owner = 32;
  if (has_shl_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(32, this->shl_owner(), output);
  }

  // optional uint64 update_fight_power = 33;
  if (has_update_fight_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(33, this->update_fight_power(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.entity.Role)
}

::google::protobuf::uint8* Role::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.entity.Role)
  // required uint64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // required uint64 player = 2;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->player(), target);
  }

  // optional uint32 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->role_id(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sex(), target);
  }

  // optional uint32 job = 6;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->job(), target);
  }

  // optional uint32 faction = 7;
  if (has_faction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->faction(), target);
  }

  // optional uint32 level = 8;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->level(), target);
  }

  // optional uint32 exp = 9;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->exp(), target);
  }

  // optional uint32 postion = 10;
  if (has_postion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->postion(), target);
  }

  // optional uint32 normal_skill = 11;
  if (has_normal_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->normal_skill(), target);
  }

  // optional uint32 extremely_skill = 12;
  if (has_extremely_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->extremely_skill(), target);
  }

  // optional uint32 char_ability = 13;
  if (has_char_ability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->char_ability(), target);
  }

  // repeated uint32 culture = 14;
  for (int i = 0; i < this->culture_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(14, this->culture(i), target);
  }

  // repeated uint32 pellet1 = 15;
  for (int i = 0; i < this->pellet1_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(15, this->pellet1(i), target);
  }

  // repeated uint32 pellet_no = 16;
  for (int i = 0; i < this->pellet_no_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(16, this->pellet_no(i), target);
  }

  // repeated int32 attributes = 17;
  for (int i = 0; i < this->attributes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(17, this->attributes(i), target);
  }

  // repeated uint64 buffers = 18;
  for (int i = 0; i < this->buffers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(18, this->buffers(i), target);
  }

  // repeated uint64 equipments = 19;
  for (int i = 0; i < this->equipments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(19, this->equipments(i), target);
  }

  // repeated uint64 hunt = 20;
  for (int i = 0; i < this->hunt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(20, this->hunt(i), target);
  }

  // optional uint32 hire_id = 21;
  if (has_hire_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->hire_id(), target);
  }

  // optional uint32 avatar_id = 22;
  if (has_avatar_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->avatar_id(), target);
  }

  // optional uint64 educate = 23;
  if (has_educate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(23, this->educate(), target);
  }

  // optional uint32 stomach_start_time = 24;
  if (has_stomach_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->stomach_start_time(), target);
  }

  // optional uint32 quality = 25;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->quality(), target);
  }

  // optional uint32 training_level = 26;
  if (has_training_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->training_level(), target);
  }

  // optional uint32 dodge_skill_id = 27;
  if (has_dodge_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->dodge_skill_id(), target);
  }

  // optional uint64 wife = 28;
  if (has_wife()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(28, this->wife(), target);
  }

  // optional uint64 pellet = 29;
  if (has_pellet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(29, this->pellet(), target);
  }

  // optional uint32 inherit_to = 30;
  if (has_inherit_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->inherit_to(), target);
  }

  // optional uint32 inherit_from = 31;
  if (has_inherit_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->inherit_from(), target);
  }

  // optional uint64 shl_owner = 32;
  if (has_shl_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(32, this->shl_owner(), target);
  }

  // optional uint64 update_fight_power = 33;
  if (has_update_fight_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(33, this->update_fight_power(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.entity.Role)
  return target;
}

int Role::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // required uint64 player = 2;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player());
    }

    // optional uint32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 job = 6;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 faction = 7;
    if (has_faction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction());
    }

    // optional uint32 level = 8;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 exp = 9;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 postion = 10;
    if (has_postion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->postion());
    }

    // optional uint32 normal_skill = 11;
    if (has_normal_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->normal_skill());
    }

    // optional uint32 extremely_skill = 12;
    if (has_extremely_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extremely_skill());
    }

    // optional uint32 char_ability = 13;
    if (has_char_ability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_ability());
    }

  }
  if (_has_bits_[20 / 32] & (0xffu << (20 % 32))) {
    // optional uint32 hire_id = 21;
    if (has_hire_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hire_id());
    }

    // optional uint32 avatar_id = 22;
    if (has_avatar_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avatar_id());
    }

    // optional uint64 educate = 23;
    if (has_educate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->educate());
    }

    // optional uint32 stomach_start_time = 24;
    if (has_stomach_start_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stomach_start_time());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 quality = 25;
    if (has_quality()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

    // optional uint32 training_level = 26;
    if (has_training_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->training_level());
    }

    // optional uint32 dodge_skill_id = 27;
    if (has_dodge_skill_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dodge_skill_id());
    }

    // optional uint64 wife = 28;
    if (has_wife()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->wife());
    }

    // optional uint64 pellet = 29;
    if (has_pellet()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pellet());
    }

    // optional uint32 inherit_to = 30;
    if (has_inherit_to()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inherit_to());
    }

    // optional uint32 inherit_from = 31;
    if (has_inherit_from()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inherit_from());
    }

    // optional uint64 shl_owner = 32;
    if (has_shl_owner()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->shl_owner());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint64 update_fight_power = 33;
    if (has_update_fight_power()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_fight_power());
    }

  }
  // repeated uint32 culture = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->culture_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->culture(i));
    }
    total_size += 1 * this->culture_size() + data_size;
  }

  // repeated uint32 pellet1 = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->pellet1_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->pellet1(i));
    }
    total_size += 1 * this->pellet1_size() + data_size;
  }

  // repeated uint32 pellet_no = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->pellet_no_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->pellet_no(i));
    }
    total_size += 2 * this->pellet_no_size() + data_size;
  }

  // repeated int32 attributes = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->attributes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->attributes(i));
    }
    total_size += 2 * this->attributes_size() + data_size;
  }

  // repeated uint64 buffers = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->buffers_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->buffers(i));
    }
    total_size += 2 * this->buffers_size() + data_size;
  }

  // repeated uint64 equipments = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->equipments_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->equipments(i));
    }
    total_size += 2 * this->equipments_size() + data_size;
  }

  // repeated uint64 hunt = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->hunt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->hunt(i));
    }
    total_size += 2 * this->hunt_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Role::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Role* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Role*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Role::MergeFrom(const Role& from) {
  GOOGLE_CHECK_NE(&from, this);
  culture_.MergeFrom(from.culture_);
  pellet1_.MergeFrom(from.pellet1_);
  pellet_no_.MergeFrom(from.pellet_no_);
  attributes_.MergeFrom(from.attributes_);
  buffers_.MergeFrom(from.buffers_);
  equipments_.MergeFrom(from.equipments_);
  hunt_.MergeFrom(from.hunt_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_player()) {
      set_player(from.player());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_faction()) {
      set_faction(from.faction());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_postion()) {
      set_postion(from.postion());
    }
    if (from.has_normal_skill()) {
      set_normal_skill(from.normal_skill());
    }
    if (from.has_extremely_skill()) {
      set_extremely_skill(from.extremely_skill());
    }
    if (from.has_char_ability()) {
      set_char_ability(from.char_ability());
    }
  }
  if (from._has_bits_[20 / 32] & (0xffu << (20 % 32))) {
    if (from.has_hire_id()) {
      set_hire_id(from.hire_id());
    }
    if (from.has_avatar_id()) {
      set_avatar_id(from.avatar_id());
    }
    if (from.has_educate()) {
      set_educate(from.educate());
    }
    if (from.has_stomach_start_time()) {
      set_stomach_start_time(from.stomach_start_time());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_training_level()) {
      set_training_level(from.training_level());
    }
    if (from.has_dodge_skill_id()) {
      set_dodge_skill_id(from.dodge_skill_id());
    }
    if (from.has_wife()) {
      set_wife(from.wife());
    }
    if (from.has_pellet()) {
      set_pellet(from.pellet());
    }
    if (from.has_inherit_to()) {
      set_inherit_to(from.inherit_to());
    }
    if (from.has_inherit_from()) {
      set_inherit_from(from.inherit_from());
    }
    if (from.has_shl_owner()) {
      set_shl_owner(from.shl_owner());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_update_fight_power()) {
      set_update_fight_power(from.update_fight_power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Role::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Role::CopyFrom(const Role& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Role::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Role::Swap(Role* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(player_, other->player_);
    std::swap(role_id_, other->role_id_);
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(job_, other->job_);
    std::swap(faction_, other->faction_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(postion_, other->postion_);
    std::swap(normal_skill_, other->normal_skill_);
    std::swap(extremely_skill_, other->extremely_skill_);
    std::swap(char_ability_, other->char_ability_);
    culture_.Swap(&other->culture_);
    pellet1_.Swap(&other->pellet1_);
    pellet_no_.Swap(&other->pellet_no_);
    attributes_.Swap(&other->attributes_);
    buffers_.Swap(&other->buffers_);
    equipments_.Swap(&other->equipments_);
    hunt_.Swap(&other->hunt_);
    std::swap(hire_id_, other->hire_id_);
    std::swap(avatar_id_, other->avatar_id_);
    std::swap(educate_, other->educate_);
    std::swap(stomach_start_time_, other->stomach_start_time_);
    std::swap(quality_, other->quality_);
    std::swap(training_level_, other->training_level_);
    std::swap(dodge_skill_id_, other->dodge_skill_id_);
    std::swap(wife_, other->wife_);
    std::swap(pellet_, other->pellet_);
    std::swap(inherit_to_, other->inherit_to_);
    std::swap(inherit_from_, other->inherit_from_);
    std::swap(shl_owner_, other->shl_owner_);
    std::swap(update_fight_power_, other->update_fight_power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Role::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Role_descriptor_;
  metadata.reflection = Role_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Coin::kGuidFieldNumber;
const int Coin::kPlayerFieldNumber;
const int Coin::kCoinFieldNumber;
const int Coin::kMoneyFieldNumber;
#endif  // !_MSC_VER

Coin::Coin()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:typed.entity.Coin)
}

void Coin::InitAsDefaultInstance() {
}

Coin::Coin(const Coin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:typed.entity.Coin)
}

void Coin::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  player_ = GOOGLE_ULONGLONG(0);
  coin_ = 0u;
  money_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Coin::~Coin() {
  // @@protoc_insertion_point(destructor:typed.entity.Coin)
  SharedDtor();
}

void Coin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Coin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Coin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Coin_descriptor_;
}

const Coin& Coin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_entity_2fplayer_2eproto();
  return *default_instance_;
}

Coin* Coin::default_instance_ = NULL;

Coin* Coin::New() const {
  return new Coin;
}

void Coin::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Coin*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(guid_, money_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Coin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:typed.entity.Coin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player;
        break;
      }

      // required uint64 player = 2;
      case 2: {
        if (tag == 16) {
         parse_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_)));
          set_has_player();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_coin;
        break;
      }

      // optional uint32 coin = 3;
      case 3: {
        if (tag == 24) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_money;
        break;
      }

      // optional uint32 money = 4;
      case 4: {
        if (tag == 32) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:typed.entity.Coin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:typed.entity.Coin)
  return false;
#undef DO_
}

void Coin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:typed.entity.Coin)
  // required uint64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // required uint64 player = 2;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->player(), output);
  }

  // optional uint32 coin = 3;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->coin(), output);
  }

  // optional uint32 money = 4;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:typed.entity.Coin)
}

::google::protobuf::uint8* Coin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:typed.entity.Coin)
  // required uint64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // required uint64 player = 2;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->player(), target);
  }

  // optional uint32 coin = 3;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->coin(), target);
  }

  // optional uint32 money = 4;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:typed.entity.Coin)
  return target;
}

int Coin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // required uint64 player = 2;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player());
    }

    // optional uint32 coin = 3;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // optional uint32 money = 4;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Coin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Coin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Coin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Coin::MergeFrom(const Coin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_player()) {
      set_player(from.player());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Coin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Coin::CopyFrom(const Coin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Coin::Swap(Coin* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(player_, other->player_);
    std::swap(coin_, other->coin_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Coin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Coin_descriptor_;
  metadata.reflection = Coin_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace entity
}  // namespace typed

// @@protoc_insertion_point(global_scope)
